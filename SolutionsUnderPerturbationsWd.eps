%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: SolutionsUnderPerturbationsWd.pdf
%%Creator: (Adobe Acrobat 20.12.0)
%%For: Ricardo
%%CreationDate: 9/15/20, 11:58 AM
%%BoundingBox: 0 0 560 420
%%HiResBoundingBox: 0 0 560 420
%%CropBox: 0 0 560 420
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1024 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2020-09-15T11:49:59-07:00"
   xmp:CreatorTool="MATLAB, The Mathworks, Inc. Version 9.7.0.1216025 (R2019b) Update 1. Operating System: Mac OS X"
   xmp:ModifyDate="2020-09-15T11:49:59-07:00"
   pdf:Producer="Acrobat Distiller 20.0 (Macintosh)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:6b6437f1-5b4a-d943-b40b-262d5115e636"
   xmpMM:InstanceID="uuid:e5d89b54-64ae-bd42-8b77-558eac63173e">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">./SolutionsUnderPerturbationsWd.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -420 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 420 li
560 420 li
560 0 li
cp
clp
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
f
73 165.5 mo
507 165.5 li
507 31.5 li
73 31.5 li
cp
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
73 165.5 mo
73 31.5 li
1 /0 /CSD get_res sepcs
.127 sep
@
116.4 165.5 mo
116.4 31.5 li
@
159.8 165.5 mo
159.8 31.5 li
@
203.2 165.5 mo
203.2 31.5 li
@
246.6 165.5 mo
246.6 31.5 li
@
290 165.5 mo
290 31.5 li
@
333.4 165.5 mo
333.4 31.5 li
@
376.8 165.5 mo
376.8 31.5 li
@
420.2 165.5 mo
420.2 31.5 li
@
463.6 165.5 mo
463.6 31.5 li
@
507 165.5 mo
507 31.5 li
@
507 157.618 mo
73 157.618 li
@
507 118.206 mo
73 118.206 li
@
507 78.794 mo
73 78.794 li
@
507 39.382 mo
73 39.382 li
@
2 lc
73 165.5 mo
507 165.5 li
1 /0 /CSD get_res sepcs
.851 sep
@
73 31.5 mo
507 31.5 li
@
73 165.5 mo
73 161.16 li
@
116.4 165.5 mo
116.4 161.16 li
@
159.8 165.5 mo
159.8 161.16 li
@
203.2 165.5 mo
203.2 161.16 li
@
246.6 165.5 mo
246.6 161.16 li
@
290 165.5 mo
290 161.16 li
@
333.4 165.5 mo
333.4 161.16 li
@
376.8 165.5 mo
376.8 161.16 li
@
420.2 165.5 mo
420.2 161.16 li
@
463.6 165.5 mo
463.6 161.16 li
@
507 165.5 mo
507 161.16 li
@
73 31.5 mo
73 35.84 li
@
116.4 31.5 mo
116.4 35.84 li
@
159.8 31.5 mo
159.8 35.84 li
@
203.2 31.5 mo
203.2 35.84 li
@
246.6 31.5 mo
246.6 35.84 li
@
290 31.5 mo
290 35.84 li
@
333.4 31.5 mo
333.4 35.84 li
@
376.8 31.5 mo
376.8 35.84 li
@
420.2 31.5 mo
420.2 35.84 li
@
463.6 31.5 mo
463.6 35.84 li
@
507 31.5 mo
507 35.84 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /BBAAAA+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f321047244e000000cc000000606376
7420982241db0000012c0000038c6670676d52c5ad27000004b800000b90
676c7966b110bdd900005d580000077c686561649b207bba000010480000
0036686865610a220fe40000108000000024686d747845be3289000010a4
000023306c6f6361004134f8000033d4000023346d61787011400c7d0000
5708000000206e616d653ec51c4600005728000001be70726570c412718a
000058e80000046e67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a002a0093007600a000ac00b800ab00c50000002bfe55001a
042f002105be002740292a292827262524232221201f1e1d1c1b1a191817
161514131211100d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b000
43617d6818b0004360442d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2c20b0032552582359212d2c69b04061b0
008b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0
112bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb01745
8cb0172344b0177ae5182d2cb002254661658a46b040608b482d2cb00225
46608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b003
2545b019236a4445b01a23444565234520b00325606a20b009234223688a
6a606120b0005258b21a401a4523614459b0005058b21940194523614459
2d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7
830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c456920b00943b0022660b00325b00525
4961b0805358b21940194523616844b21a401a4523606a44b209191a4565
2345604259b00943608a103a2d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c764520b003
254523616818236860442d2c7645b00325452361682318456860442d2c76
45b0032545616823452361442d2c4569b014b0324b505821b0205961442d
b8002b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db8002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db8002f2c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db800302c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db800312c2020456944
b001602020457d691844b001602db800322cb800312a2db800332c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db800342c4b535845441b2121592db800352c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800362c20
20456944b001602db800372cb800362a212db800382c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800392c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db8003b2c2020456944b00160202045
7d691844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db800402c2020456944b001
602db800412cb800402a212db800422c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db800432c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db800442c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db800452c2020456944b001602020457d691844b001
602db800462cb800452a2db800472c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
482c4b535845441b2121592db800492c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db8004a2c2020456944b001602db8004b2c
b8004a2a212db8004c2c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db8004d2c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db8004f2c2020456944b001602020457d691844b001602db800502c
b8004f2a2db800512c4b20b003265358b0801bb040598a8a20b003265358
2321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b003
2653582321b801408a8a1b8a235920b80003265358b0032545b801805058
2321b8018023211bb003254523212321591b2159442db800522c4b535845
441b2121592db800532c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db800542c2020456944b001602db800552cb800542a212d
b800562c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800572c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800582c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80059
2c2020456944b001602020457d691844b001602db8005a2cb800592a2db8
005b2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a
1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db8005c2c4b535845441b2121592db8005d2c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db8005e2c2020456944b00160
2db8005f2cb8005e2a212db800602c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800612c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800622c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800632c2020456944b001602020457d691844b00160
2db800642cb800632a2db800652c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800662c4b535845441b2121592d0001
000000000000828f2d665f0f3cf500110800000000005f4d8f0000000000
d8b9a29bf865fc270b9108f9000000090001000100000000000100000629
fe2900000c01f865fced0b910001000000000000000000000000000008cc
05120042000000000239000002390000023900ed02d70052047300000473
0040071d0042055600590187009c02aa008e02aa0044031d004e04ac005c
023900aa02aa0055023900af0239000004730040047300c4047300400473
003104730034047300420473004d0473004b0473004204730049023900e3
023900e304ac001c04ac005c04ac001c0473009c081f00e10556001e0556
009705c7005a05c700a5055600af04e300af0639006305c700a1023900c9
040000230556009c0473009c06aa009705c7009c06390050055600af0639
005005c700b40556006004e3002105c700aa05560034078d00250556002a
0556002a04e3002f023900800239ffbb0239002f03c100780473000002aa
002604730052047300760400003b04730038047300480239001c0473003d
0473008401c7008401c7ffda0400008001c7008906aa0084047300840473
003b047300760473003c02aa00890400004202390017047300800400000b
05c700120400000b040000150400003402acffd50214009002ac002a04ac
00120556001e0556001e05c7005a055600af05c7009c0639005005c700aa
0473005204730052047300520473005204730052047300520400003b0473
004804730048047300480473004802390067023900080239000002390025
047300840473003b0473003b0473003b0473003b0473003b047300800473
00800473008004730080047300500333006f04730068047300380473004b
02cd0095044cfff504e300c705e5001505e50012080000ed02aa008a02aa
00520464005c080000100639004205b4002a0464005c0464005a0464005c
0473ffe1049cffb403f4006a05b400280696001c0464002f0231ff7902f6
003b02ec00310625005e071d004904e3005c04e300ba02aa00e804ac005c
0464ffef047300280464005c04e50071047300c2047300c2080000ed0239
00000556001e0556001e0639005008000049078d00470473fffb080000f1
02aa004e02aa004e01c7008401c700aa0464005c03f40042040000150556
002a0156feaa05f4006002aa00b402aa00aa0400001c0400001c04730050
0239009701c700aa02aa004e0800000e0556001e055600af0556001e0556
00af055600af0239006b0239fff902390020023900020639005006390050
065200690639005005c700aa05c700aa05c700aa023900bd02aa002a02aa
fff702aa001502aa001902aa00f702aa008402aa007902aaffff02aa00a1
02aa002a0473ffe801c7ffd7055600600400004204e3002f040000340214
009005c700210473003d0556002a04000015055600800473008004ac005c
04ac007402aa005702aa000b02aa000706ac005a06ac00a306ac004b0473
0000063900630473003d023900c9055600600400004205c7005a0400003b
05c7005a0400003b047300380556001e047300520556001e047300520556
001e0473005205c7005a0400003b05c7005a0400003b05c700a505480038
055600af04730048055600af04730048055600af04730048055600af0473
0048055600af04730048063900630473003d063900630473003d06390063
0473003d0473003d05c700a10473008405c700350473003e038f00690371
004403330059031f00650239003501c7ffdf063900c9038e008404000023
01c7ffa3055600320400fff10473009c021f00830473009c01c7000c0473
009c021a004e0473009c027b008905c7009c0473008405c7002a0473000a
05c7009c047300840473000e063900500473003b063900500473003b0639
00500473003b05c700b402aa008905c7004902aa001705c700b402aa0042
0556006004000042055600600400004204e300210239001704e3002102e1
001704e30021028fffe205c700aa0473008005c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa04730080078d
002505c700120556002a0400001504e3002f0400003404e3002f04000034
055600600400004204e30021023900170473004b0000fcfc0000fcfc0000
fc9c0000fc680000fc860000fc8a0000fd690000fcc40000fcf60000fc70
0000fc9c0000fd5b0000fcea0000fd120000fc9105c70021063900630473
003d0473009c01c700890556009c0400008005c7009c0473008405c700b4
02aa008901aaffdb023700e102aa005501c7ffda040000800239001c0473
0048047300480400003a047300510000fd3c0000fc660000fc8a0239fffb
0239fffb05c7009c047300840000fcc4056d0024054c0098055600980427
0098059c00250556009807f0000a0554004505c7009805c7009805560098
057e002506aa009805c700980639005005c700980556009805c7005004e3
001d0556002f06d800410556002505db009805360060078d009807a10098
06aa001d070900980536009805c700640800009805b7006a047300560473
0048046200870339008704d9001c04730050063d00170400003304ab0087
04ab0087046200870498001b055400870473008704730048047300870473
007d04000048040000330400001706a800460400001404910087044e005c
063900870657008704e3001b05c7008703ff00870414002f063900870477
005005560098047300500427009803390087023900ba01c7008704000023
05c70050040000480239001d020300290800002506c3001b07e10098067c
008701c7ffdd055600620639004e0473001b055600980462008704000048
0617001b0473001b0556002f0400001705c700980473008704730098031d
00870000fd5b0000fd5b0000fd5b0000fd5b0000fc700000fd930000fd2a
0000fc8a0000fcfc0000fcfc0000fc860000fd690000fcc40000fcf60000
fd930000fc9c0000fc9c0000fc8a0000fc8a0000fc680000fc860000fc66
0000fc680000fc860000fc660000fc660000fd500000fc660000fd5b0000
fc8a0000fc8d0000fd2a000000000239001b0473008306aa008302aa0088
06aa008302aa008902aa0088042b0052042b005302020087033afffd0239
0017023900170400000a05c70011040000140473009c0473009d0473009c
0400008004b2003904b2003905c7005905c7002104890049055600af0556
0060040000420498003906e600aa05950080060a0052021400b6037300b6
023900c3048c002b0400003b0134005102aa00c102aa00c20b06000e0556
00ed029600ed02aa004e01c700aa02aa0055044cfff5042f00c1042f00c2
056500c1056500c202aa0055029600ed02aa0055080000f102d500a4011d
000000000000000000000000000000000000000000000000000000000000
023900000239000002390000023900000239000002390000023900000239
0000023900000000000000000000000000000000000000000000011d0000
008f000002aafff7037000b60473009c02aa005502aa0006044c0072044c
00730556001e04e300ae04730048071c00500568003b0000fd5e0000fd5e
0000fd5e0000fd5e0000fcc90000fcd20000fd980000fccd0000fcef0000
fce10000fcd90000fcec0000fc5e0000fd440000fd4a0000fccf0000fcd1
0000fc860000fc910000fcc10000fcc10000fcc10000fcc20000fcc20000
fc8a01550061027b00610155006101550061046400320464002b03f4002d
03f4002f05b4011305b400280231006b0231fe830464ff330464ffef0464
002b0464002d08fa006f0816006f0556009c023900c9047200c906ab00c9
078f00c905560034078f003409c800340c010034078f00c90556002a078f
002a09c8002a0473009c05c7005a05c700a506aa009701c70084038e0084
0555008405c700840400000b05c7000b078e000b0955000b05c700840400
000b05c7000b078e000b01c700890400003b0473003806aa008409e20074
08c1004f07db003807da006b05a7007102f7005808e7007106f0006b05a1
00530556001e047300520239001e0239ffff063900500473003b05c700aa
0473008005c700aa0473008005c700aa0473008005c700aa0473008005c7
00aa047300800556001e047300520556001e0473005208000010071d0049
063900630473003d0556009c04000080063900500473003b063900500473
003b01c7ffbe09cd005408fc006f07fb00380639006305c7009c04730084
0556001e0473005208000010071d00490639004204e3005c0556001e0473
00520556001e04730052055600af04730048055600af047300480239ff71
01c7ff350239fff801c7ffaa063900500473003b063900500473003b05c7
00b402aaffd605c700b402aa004f05c700aa0473008005c700aa04730080
05c700a1047300840556001e04730052055600af04730048063900500473
003b063900500473003b063900500473003b063900500473003b0556002a
0400001502aa004e023900c90556001e0473005205560097047300760556
009704730076055600970473007605c7005a0400003b05c700a504730038
05c700a50473003805c700a50473003805c700a50473003805c700a50473
0038055600af04730048055600af04730048055600af04730048055600af
04730048055600af0473004804e300af0239001c063900630473003d05c7
00a10473008405c700a10473008405c700a10473008405c700390473001b
05c700a1047300840239ffec01c7ff9e02390027023900160556009c0400
00800556009c040000800556009c040000800473009c01c700890473009c
01c7ff9d0473009c01c7ffb50473009c01c7ffc006aa009706aa008406aa
009706aa008406aa009706aa008405c7009c0473008405c7009c04730084
05c7009c0473008405c7009c04730084063900500473003b063900500473
003b063900500473003b063900500473003b055600af04730076055600af
0473007605c700b402aa008905c700b402aa008305c700b402aa004a05c7
00b402aa0018055600600400004205560060040000420556006004000042
0556006004000042055600600400004204e300210239001704e300210239
001704e300210239ffe204e300210239ffe705c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa047300800556
00340400000b055600340400000b078d002505c70012078d002505c70012
078d002505c70012078d002505c70012078d002505c700120556002a0400
000b0556002a0400000b0556002a0400001504e3002f0400003404e3002f
0400003404e3002f04000034047300840239001005c70012040000150239
001c0556001e047300520556001e047300520556001e047300520556001e
0473ffcb0556001e047300520556001e047300520556001e047300520556
001e047300520556001e047300520556001e047300520556001e04730052
0556001e04730052055600af04730048055600af04730048055600af0473
0048055600af047300480556008c0473fff0055600af04730048055600af
04730048055600af04730048023900ae02390099023900c701c700840639
00500473003b063900500473003b063900500473003b063900500473ffd8
063900500473003b063900500473003b063900500473003b071c00500568
003b071c00500568003b071c00500568003b071c00500568003b071c0050
0568003b05c700aa0473008005c700aa0473008006e600aa0595008006e6
00aa0595008006e600aa0595008006e600aa0595008006e600aa05950080
0556002a040000150556002a040000150556002a040000150556002a0400
0015055600af04730048055600af04730048056d007505df009604860052
048600870723000a05890017056d002404860043056d002404860043056d
00750486005208d9001006dd0012054f0043040a003005df009604860087
05df009604860087065500500486005205df006004120037056d00100412
0019056d001004120019056d00100412001905ac005e047a006907480098
0600008d08000010071d004906aa009706aa008405c700b402aa004c0222
ffc50556001b05c700c504e300d505c70029055600c504e3004805c700b0
06390071023900ba055600b00556002f071d00be05c700b004e300620639
007105c700b0055600c504e3005804e1002f0556002905c700500558003d
06a8007f063900640239000a0556002904e3005a04e300b40473001204e3
006804730077038d004a04e3003b04e5008f023900b0047300b004730025
04e300b8047300420400007104e3006f04e300aa0473004c04e3006f0400
003b04e300b805c700770473000e05c7008f0610006a0239000a04e300b8
0239009a0222000b0000fd19023900b0016c0088016c00880000fcfc0000
fcfc016c008802ca001a02b5001a03050088031200880222002e0222002f
031e00880362006f033300880362006f0735007f0625005e0639ffef01c7
008401c700aa047200ed06ac009c06ac00ed04730048047300480556001e
0473005204730052055600af04730048055600af04730048055600af0473
00480239fff00239ffdb01c70079063900500473003b063900500473003b
063900500473003b055600600400004205c700aa047300800400000b06e6
00aa05950080060200610473ffd605c7fff20473008406aa008403f0009c
0460009a03a6005a03e9000c02cf00020448005c06020061047300500655
004e0486004c0639005002aa001e07c6002407c6002408e6ffca0000f920
0000fa0b0000fa0b0000fa060000fa0606020061047300500655004e0486
004c0222002f02b5001a0473002504e3002f040000340473003b04d20084
04dc00380473007204bd003804d7003d0473008204d7008202220086078d
00470387008802aa008604d2003c04b80032052b00320772003805600017
043a001705ce001c04c2008904b8008901a9008a01a9008a01c700aa0187
007802aa000802aa00c102aa003a0187007802aa000802aa00c102aa003a
01a9008a01a9008a02aa001e02aafff7023a0042023a004100e4ffed0155
00450155004401c4004402e400090200000b023a004e023a004f0256000e
0256000e025600240256002402aa00550256002e0256002e0256002e0200
00210200000600e300440256003a023a000902560024025600240256000e
0256000e02aa0078023a004f0000fccd0000fca20000fca20000fd6f0000
fd6f0000fc490000fc490000fb9e0000fca20000fc490000fccd0000fcc2
0000fcc20000000002390000000000000000000000000000031d004e031d
004e06da00c107c60024023900e308e6009c07c60024071d00d00703001b
023900800239008000000000000000000000000000000000000000000000
0000067b003a023a00200239001a02390021023a002702390025023a0021
023900240256002e0155002b0256002e0155004701550022023a0042023a
0020023a006202390020023900180239001a02390021023a002702390025
023a0021023900240256002e0155002b0256002e0155004701550022063c
0011063900630473009c0473009c0556002a06ab00280600003007560011
0473007207c8005806ac005a05c7005a0556005904e500710696001c06ab
003406ab0028055600af04730076055600af0473007604e3000206390050
04c400a1024100230369001105c7005002bb0023033afffd0473009c0473
009c01c7002a01c7002a0473003d04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a05c1005b05b3005b076c00880776
008807760088078d008807ca006f07a0006f047300770473007704730077
04730077047300770473007706c2008806c200880874008808890088085b
00880868008804e3003b04e3003b04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b073300880733008808e5008808fa008808cc008808d9
00880929006f0929006f023900b0023900b002390041023900390239003d
0239003d023900230239002303a5008803a5008805570088056c0088053e
0088054b0088059b006f059b006f04e3006f04e3006f04e3006f04e3006f
04e3006f04e3006f07a5008807a5008809570088096c0088093e0088094b
008804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b806c20088088900880868008808b8006f0610006a0610006a0610
006a0610006a0610006a0610006a0610006a0610006a0791008807910088
0943008809580088092a0088093700880987006f0987006f04e3005a04e3
005a047300770473007704e3003b04e3003b023900b0023900b004e3006f
04e3006f04e300b804e300b80610006a0610006a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a0811005b080c005b
0991008809d80088097f0088099b008809d3006f09ce006f04e3003b04e3
003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b096c0088
096c00880b1e00880b3300880b0500880b1200880b62006f0b62006f0610
006a0610006a0610006a0610006a0610006a0610006a0610006a0610006a
09ca008809ca00880b7c00880b9100880b6300880b7000880bc0006f0bc0
006f04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
0556001b0556001b0666002e0661002f07a9001b04e3003b04e3003b04e3
003b04e3003b04e3003b06ac002e06a7002f06d2002e06ba002f083100b0
0239ffcf0239ffce0239ffcc0239ffda0239ffdc0239ffc50239ffe10239
ffee0343002e0348002f04e300b804e300b804e300b804e300b804e300aa
04e300aa04e300b804e300b8055600290556002906b1002e0713002f06c2
00880610006a0610006a0610006a0610006a0610006a075a002e0789002f
0792002e07a9002f0878005e04e3005a0473007704e3003b023900b004e3
006f04e300b80610006a05d5007206a7002f06ba002f0348002f0789002f
0713002f07a9002f0239ffcb04e300b804ac002504ea011704f700a102f3
001b02bb00230473002504e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a0239ffd70239ffe40239ffd20239ffd7
0239ffdb0239ffdb0239ffcd0239ffe00239ffc80239ffc30239ffdc0239
ffdc0239ffd70239ffd70239ffd20239ffcd0239ffd20239ffd704e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b80666002e0661002f05c1005b076c00880776008805b3
005b07760088078d00880666002e0661002f05c1005b076c008807760088
05b3005b07760088078d00880343002e0348002f0348002f03a500880557
0088053e008803a50088056c0088054b00880343002e0348002f0348002f
03a5008805570088053e008803a50088056c0088054b008806b1002e0713
002f0713002f06c20088088900880868008806c200880889008808680088
06b1002e0713002f0713002f06c20088088900880868008806c200880889
00880868008805c700b405c7005a0639005001c70020051d0029055600af
05c700a10000fd31055200680473003806390050047300480772005b0738
004505e5001306ac003d06ac003d06ac003a06ac003a066d001d04e3001b
082200d005e1008a06a8007f05c7008f0556001e0400000b079900d005cf
008a04da003802ca002405d900160588003805c700b404730052031f0000
04da00a103eb00a1064900a104cf00840556009c0400008004e3002f0400
003408d9001406dd0030054f0072040a0047056d00a50412007a05df00ac
0486009105df00630412003f04f8002b0412003a056d002e0412002405ac
00ac047a007705ac00ac047a00770556002a0556002a04d900bc037c0091
05ac00ac047a0077063200a504df007a075f00ac059b00910556002a0556
002a06fe0028054e00350748003a059400260748003a0594002607720048
05b3003805df00ac0486009104730052054f00ac054f00ac06a8007f04dc
005d0855004405e0002605560025040000040556003404b6000b0400003b
054f0072040a004705f10026049c0024023900bd056d002e041200240556
00340556001e05c7005a0400003b0473ffe804e3002101c7003e02bb0023
04e30021055600af0473009c0473009c055600af047300480456002301c7
ffda05c700aa01a9002101a9002102aa003302aa003302aa003a02aaffe9
023900e302aa003c02aa003c057f005b04ac002504ac0074023900e304ac
0025057c004c04ac0074023900e3023900e3063900710412003f0412003f
055600ae0473008005c7005a06aa009705dd0097059b004605c7005a05c7
005a05c7005a0400003b0400003b0400003b0473003805ca003006c6002e
063f002f031f001a062e001904e900310488004502aa00be02aa00be02aa
00be02aa00be0277003b0277003b034b0000034b0000034b0000034b0000
034b00000487001203f7001e045e0054043600830436008302fd005d034f
0012069900390655003e052900300000f86506e1002204e9002001e0004b
01e9004b015d0025015d000a0199002a0198001202fb0017030400170267
0013025700120257001202c8004b01d8000701d8000707e9003a097c004b
0931004909310002013c004b04570022058900050589000d04be00150442
001801d8000701d8000703fe003d03fe003d0404003a036f000b0467003c
0000fb760000fcc10000fc080000fc730000fc730000fa630000fce00000
fe950000fc8e0000fc510000fa0b0000fc9f046500360465002204010034
0401002407760017044c001b03ea001d051a00340653003204c8003306c2
008808890088086800880556001b0556001b0239ffdf0239ffe105560029
055600290404001505e5001405e5001405e500140800ffeb0800ffeb0800
03b40800038c080003b40800038c0800ffe90800ffe9080003b40800038c
0800ffe90800ffe9080000000404001500e40042023a0029023a0024023a
001e02000006023a002405c7005a0639006305c7005a0471002205520029
04e300210556001e04d0002805c2004e04d9004e05c7005a06aa008405d0
003106640037082d00350552006805520068039c003f0380003b039c003f
0380003b039c00530381003c039c00530381003c02eb005302e3005302e3
005302e3005302eb005302eb000802e3000002e3000002e3000002eb0008
0363005303630053036300530363005303630053027f00010330004503b2
002603c3000b050b0031069c00290390007f0000fc4f0000fc4f0000fc42
0000fc420000fc420000fc420000fc010000fc010000fd44046500220401
00240a3900500873003b0436008304360083043600830329003a0329003a
03550028050d00340329005403290028032900330329003302f6003a02f6
003a0329002b0143005e02d7005b04bb005e0329005e0329002a02d70029
032900270329002a03290054019400100329005b0373003704bb005e02d7
0008037800800329000d0378004a04dc004d0632002a04be003304730039
0473003b04e6003804e1003a04fa0039076e003e0329000a0143005e01e4
00610329005b02d70008037800800329000d037800790329000a042b0052
05c5001001c70084045e0054070a002e06cb003504d6001b04fa001a02d8
000d04e9001b0330000d02d9000a02db000c01c700aa02aa004e01c700aa
02aa004e01c700aa02aa004e01c700aa02aa004e053d007a0708003b0310
008f0574009708c000220473004002e00034047300400473003104730034
047300420473004d0430002b047300420473004903cc000903cc000903cc
0009042800580425004e048d00560437003d06a600560450004804460048
04f8001f06c70056044e0056042d003d07c7005a049c0056049e007505e3
00560446003f0475005205e9005c046a0075054e00560475003106660056
0448003b05e300560468005604a400560487007504b40058049a005604a4
007504d1003d049a007504250044043d003d04be0056043d004e0458004e
0458004e04ba005605df0056044c00aa04d500b10473005e0473002f0425
00330473007b0437003d04250056049e0050048b003d04b8005604b80056
072b005204a20048048f004804db001f074c007104c10071047d003d085c
005604dd005604dd007b06a20071046f003d04b4004e0619005604ba0085
05d5005604ee0056068b004804a80048063f005204cd005604dd005604c3
007b053b005604e7005604e70085051d005604e70085049600480493003d
0521004e04c50056049300480491004804e7005606060056049c004804c3
007b049c004804ae00560527004c02f6007b044e0056048d005604c50056
05ae005605ee006f000000000000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c000000a8000000e8000000e80000
01c4000002100000032800000328000003c4000004ec0000061800000618
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0000077c0000077c0000
077c0000077c0000077c0000077c0000077c0000077c0000077c0000077c
0000077c0000077c0000077c0000077c0000077c0001000008cc006f0009
006b00070002001000100067000007e80b90000400010000000a007e0001
000000000000005000000001000000000003001000500001000000000004
001000600001000000000006001000700001000000000007003200800003
000104090001002000b20003000104090002000e00d20003000104090003
002000e0000300010409000400200100000300010409000600200120a920
313939302d32303036204170706c6520436f6d707574657220496e632e20
a92031393831204c696e6f7479706520414720a920313939302d39312054
79706520536f6c7574696f6e7320496e632e414143484e4c2b48656c7665
74696361414143484e4c2b48656c766574696361414143484e4c2b48656c
76657469636148656c766574696361206973206120726567697374657265
642074726164656d61726b206f66204c696e6f7479706520414700410041
00430048004e004c002b00480065006c0076006500740069006300610052
006500670075006c006100720041004100430048004e004c002b00480065
006c0076006500740069006300610041004100430048004e004c002b0048
0065006c0076006500740069006300610041004100430048004e004c002b
00480065006c0076006500740069006300610000b8005d2b01ba000501b9
005f2b01bf01bb003e00340029001d0012000000652bbf01bc0042003400
29001d0012000000652bbf01bd003a00340029001d0012000000652b00bf
01b7004d003d003700280012000000652bbf01b80060004f00370028001b
000000652bbf01b90047003d0029001d0012000000652bbf01ba00420034
0029001d0012000000652b00ba01be000400642bb801b620457d691844b8
00532bb800492bb8003f2bb800352bb8002b2b4118008001a6009001a600
a001a600030069018b0079018b0089018b0099018b00040089018b009901
8b00a9018b00b9018bb2040840ba0179001a014a400b041f5414191f180a
0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a001
9f0064001f01a50025017a00480028019ab3296c1f60410a01a9007001a9
008001a90003008001a9000101a9b21e321fbe012c00250401001f012600
1e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f
1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c
1f931eb8019ab21f921db80101b21f911db80101b21f751db80201b61f6d
29961f6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f35
1de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801
2540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2
254a1fba019b0025017ab349293896b8017bb348283125b8017a40364828
9629482725294c1f252946272729482756c80784075b07410732072b0728
07260721071b071408120810080e080c080a08080807b801acb23f1f06bb
01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7
0804080208000814b8ffe0b40000010014b801abb41000000100b801abb6
06100000010006b801adb300000100b801ad401f04000001000410000001
001002000001000200000001000002010802004a00b0018db80600851676
3f183f123e113946443e113946443e113946443e113946443e113946443e
11394660443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b53
58b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b3
76706a66456523456023456560234560b08b766818b080622020b16a7045
65234520b003266062636820b003266165b070236544b06a234420b17666
4565234520b003266062636820b003266165b066236544b0762344b10066
455458b166406544b27640764523614459b36242725d4565234560234565
60234560b089766818b080622020b172424565234520b003266062636820
b003266165b042236544b072234420b1625d4565234520b0032660626368
20b003266165b05d236544b0622344b1005d455458b15d406544b2624062
45236144592b2b2b2b456953427374b8019a2045694b20b02853b049515a
58b020615944b801a62045694475000000>
[1917 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 232 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>BBAAAA+Helvetica AddT42Char 
1 452 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>BBAAAA+Helvetica AddT42Char 
1 528 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>BBAAAA+Helvetica AddT42Char 
1 808 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>BBAAAA+Helvetica AddT42Char 
1 1260 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>BBAAAA+Helvetica AddT42Char 
1 1560 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>BBAAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>BBAAAA+Helvetica AddT42Char 
BBAAAA+Helvetica /CharStrings get begin
/zero 19 def
/one 20 def
/two 21 def
/four 23 def
/six 25 def
/eight 27 def
end
BBAAAA+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
pop
end
%ADOEndSubsetFont
/VJOHJQ+Helvetica /BBAAAA+Helvetica findfont ct_VMDictPut/VJOHJQ+Helvetica*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]VJOHJQ+Helvetica nfVJOHJQ+Helvetica*1 [13 0 0 -13 0 0 ]msf69 183.1 mo(02468101214161820)[43.3979 43.3979 43.3979 43.3979 39.8983 7.22803 36.1686 7.228 36.1686 7.228 36.1686 7.228 36.1686 7.228 36.1686 7.22803 0 ]xsh275.714 201.775 mo
275.714 201.577 275.735 201.395 275.776 201.228 cv
277.229 195.478 li
275.12 195.478 li
274.985 195.478 274.917 195.389 274.917 195.212 cv
274.969 194.921 275.057 194.775 275.182 194.775 cv
277.401 194.775 li
278.198 191.509 li
278.25 191.332 278.354 191.184 278.51 191.064 cv
278.667 190.944 278.844 190.884 279.042 190.884 cv
279.209 190.884 279.349 190.934 279.464 191.033 cv
279.578 191.132 279.635 191.264 279.635 191.431 cv
279.635 191.473 279.633 191.504 279.628 191.525 cv
279.623 191.546 279.62 191.572 279.62 191.603 cv
278.823 194.775 li
280.87 194.775 li
281.016 194.775 281.089 194.864 281.089 195.041 cv
281.078 195.072 281.063 195.126 281.042 195.205 cv
281.021 195.283 280.995 195.348 280.964 195.4 cv
280.933 195.452 280.886 195.478 280.823 195.478 cv
278.635 195.478 li
277.198 201.259 li
277.104 201.634 277.057 201.963 277.057 202.244 cv
277.057 202.817 277.255 203.103 277.651 203.103 cv
278.234 203.103 278.753 202.827 279.206 202.275 cv
279.659 201.723 280.005 201.119 280.245 200.462 cv
280.297 200.379 280.349 200.337 280.401 200.337 cv
280.635 200.337 li
280.688 200.337 280.732 200.355 280.768 200.392 cv
280.805 200.429 280.823 200.473 280.823 200.525 cv
280.823 200.546 280.813 200.561 280.792 200.572 cv
280.5 201.385 280.075 202.096 279.518 202.705 cv
278.961 203.314 278.318 203.619 277.589 203.619 cv
277.068 203.619 276.625 203.447 276.26 203.103 cv
275.896 202.759 275.714 202.316 275.714 201.775 cv
f
287.394 208.4 mo
287.394 188.4 li
290.128 188.4 li
290.128 189.197 li
288.207 189.197 li
288.207 207.603 li
290.128 207.603 li
290.128 208.4 li
287.394 208.4 li
f
292.325 202.181 mo
292.689 202.796 293.408 203.103 294.481 203.103 cv
294.95 203.103 295.398 203.022 295.825 202.861 cv
296.252 202.7 296.603 202.46 296.879 202.142 cv
297.155 201.825 297.293 201.437 297.293 200.978 cv
297.293 200.634 297.168 200.35 296.918 200.126 cv
296.668 199.903 296.366 199.754 296.012 199.681 cv
294.934 199.462 li
294.434 199.337 294.025 199.106 293.707 198.767 cv
293.39 198.428 293.231 198.02 293.231 197.541 cv
293.231 196.947 293.392 196.423 293.715 195.97 cv
294.038 195.517 294.463 195.168 294.989 194.923 cv
295.515 194.678 296.059 194.556 296.621 194.556 cv
297.226 194.556 297.767 194.702 298.246 194.994 cv
298.725 195.285 298.965 195.712 298.965 196.275 cv
298.965 196.588 298.879 196.861 298.707 197.095 cv
298.536 197.33 298.299 197.447 297.996 197.447 cv
297.819 197.447 297.668 197.39 297.543 197.275 cv
297.418 197.16 297.356 197.014 297.356 196.837 cv
297.356 196.681 297.398 196.53 297.481 196.384 cv
297.564 196.239 297.681 196.122 297.832 196.033 cv
297.983 195.944 298.137 195.9 298.293 195.9 cv
298.168 195.608 297.944 195.397 297.621 195.267 cv
297.298 195.137 296.955 195.072 296.59 195.072 cv
296.247 195.072 295.906 195.142 295.567 195.283 cv
295.228 195.424 294.957 195.624 294.754 195.884 cv
294.551 196.145 294.45 196.457 294.45 196.822 cv
294.45 197.061 294.533 197.272 294.7 197.455 cv
294.867 197.637 295.075 197.764 295.325 197.837 cv
296.496 198.072 li
296.861 198.155 297.199 198.296 297.512 198.494 cv
297.825 198.692 298.069 198.942 298.246 199.244 cv
298.423 199.546 298.512 199.895 298.512 200.291 cv
298.512 200.78 298.374 201.267 298.098 201.751 cv
297.822 202.236 297.481 202.619 297.075 202.9 cv
296.366 203.379 295.496 203.619 294.465 203.619 cv
293.757 203.619 293.106 203.457 292.512 203.134 cv
291.918 202.811 291.621 202.327 291.621 201.681 cv
291.621 201.316 291.728 200.999 291.942 200.728 cv
292.155 200.457 292.444 200.322 292.809 200.322 cv
293.028 200.322 293.21 200.387 293.356 200.517 cv
293.502 200.647 293.575 200.822 293.575 201.041 cv
293.575 201.343 293.46 201.608 293.231 201.837 cv
293.002 202.066 292.736 202.181 292.434 202.181 cv
292.325 202.181 li
f
300.403 208.4 mo
300.403 207.603 li
302.356 207.603 li
302.356 189.197 li
300.403 189.197 li
300.403 188.4 li
303.153 188.4 li
303.153 208.4 li
300.403 208.4 li
f
73 165.5 mo
73 31.5 li
@
507 165.5 mo
507 31.5 li
@
73 157.618 mo
77.34 157.618 li
@
73 118.206 mo
77.34 118.206 li
@
73 78.794 mo
77.34 78.794 li
@
73 39.382 mo
77.34 39.382 li
@
507 157.618 mo
502.66 157.618 li
@
507 118.206 mo
502.66 118.206 li
@
507 78.794 mo
502.66 78.794 li
@
507 39.382 mo
502.66 39.382 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VJOHJQ+Helvetica gcheck setglobal} if
1 168 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>VJOHJQ+Helvetica AddT42Char 
1 964 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>VJOHJQ+Helvetica AddT42Char 
VJOHJQ+Helvetica /CharStrings get begin
/period 17 def
/five 24 def
end
VJOHJQ+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VJOHJQ+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]VJOHJQ+Helvetica nfVJOHJQ+Helvetica*1 [13 0 0 -13 0 0 ]msf60.4 162.618 mo(0)sh49.402 123.202 mo(0.5)[7.228 3.614 0 ]xsh60.4 83.7856 mo(1)sh49.402 44.3696 mo(1.5)[7.228 3.614 0 ]xsh35.901 91.519 mo
35.796 91.519 35.744 91.462 35.744 91.347 cv
35.744 91.274 35.755 91.227 35.776 91.206 cv
36.13 90.581 36.56 89.988 37.065 89.425 cv
37.57 88.862 38.142 88.295 38.783 87.722 cv
39.424 87.149 40.07 86.57 40.721 85.987 cv
41.372 85.404 41.9 84.888 42.307 84.441 cv
42.229 84.441 li
41.927 84.441 41.495 84.347 40.932 84.159 cv
40.369 83.972 39.921 83.878 39.588 83.878 cv
39.244 83.878 38.905 83.954 38.572 84.105 cv
38.239 84.256 38.025 84.493 37.932 84.816 cv
37.911 84.909 37.859 84.956 37.776 84.956 cv
37.541 84.956 li
37.437 84.956 37.385 84.888 37.385 84.753 cv
37.385 84.691 li
37.489 84.305 37.658 83.943 37.893 83.605 cv
38.127 83.266 38.419 82.99 38.768 82.776 cv
39.117 82.563 39.479 82.456 39.854 82.456 cv
40.125 82.456 40.349 82.516 40.526 82.636 cv
40.703 82.756 40.908 82.943 41.143 83.198 cv
41.377 83.453 41.567 83.636 41.713 83.745 cv
41.859 83.854 42.041 83.909 42.26 83.909 cv
42.551 83.909 42.814 83.776 43.049 83.511 cv
43.284 83.245 43.51 82.914 43.729 82.519 cv
43.77 82.477 43.822 82.456 43.885 82.456 cv
44.119 82.456 li
44.161 82.456 44.198 82.474 44.229 82.511 cv
44.26 82.548 44.276 82.592 44.276 82.644 cv
44.276 82.685 44.26 82.727 44.229 82.769 cv
43.874 83.384 43.458 83.959 42.979 84.495 cv
42.5 85.032 41.875 85.646 41.104 86.339 cv
40.333 87.032 39.682 87.618 39.151 88.097 cv
38.62 88.576 38.125 89.071 37.666 89.581 cv
37.77 89.55 37.911 89.534 38.088 89.534 cv
38.411 89.534 38.853 89.628 39.416 89.816 cv
39.979 90.003 40.411 90.097 40.713 90.097 cv
41.046 90.097 41.382 90.027 41.721 89.886 cv
42.06 89.745 42.354 89.545 42.604 89.284 cv
42.854 89.024 43.021 88.722 43.104 88.378 cv
43.135 88.284 43.187 88.237 43.26 88.237 cv
43.494 88.237 li
43.546 88.237 43.59 88.258 43.627 88.3 cv
43.664 88.341 43.682 88.388 43.682 88.441 cv
43.682 88.451 43.672 88.472 43.651 88.503 cv
43.536 89.003 43.325 89.482 43.018 89.941 cv
42.711 90.399 42.333 90.776 41.885 91.073 cv
41.437 91.37 40.958 91.519 40.447 91.519 cv
40.197 91.519 39.984 91.462 39.807 91.347 cv
39.63 91.232 39.424 91.045 39.19 90.784 cv
38.955 90.524 38.762 90.339 38.611 90.23 cv
38.46 90.121 38.276 90.066 38.057 90.066 cv
37.4 90.066 36.807 90.529 36.276 91.456 cv
36.234 91.498 36.187 91.519 36.135 91.519 cv
35.901 91.519 li
f
45.514 94.3 mo
45.514 93.8 li
46.681 93.8 47.264 93.654 47.264 93.362 cv
47.264 86.019 li
46.785 86.248 46.175 86.362 45.436 86.362 cv
45.436 85.878 li
46.582 85.878 47.447 85.576 48.03 84.972 cv
48.217 84.972 li
48.248 84.972 48.28 84.985 48.311 85.011 cv
48.342 85.037 48.358 85.066 48.358 85.097 cv
48.358 93.362 li
48.358 93.654 48.941 93.8 50.108 93.8 cv
50.108 94.3 li
45.514 94.3 li
f
0 lc
73.003 33.81 mo
73.085 33.81 li
85.759 33.756 100.633 77.763 104.767 87.255 cv
105.201 88.373 li
114.658 111.738 122.38 136.406 136.883 157.28 cv
137.1 157.569 li
137.317 157.855 li
1 /0 /CSD get_res sepcs
.729 sep
@
137.317 157.618 mo
137.534 157.429 li
137.751 157.244 li
137.968 157.06 li
138.185 156.878 li
156.762 141.682 175.117 149.228 195.679 153.603 cv
195.741 153.615 li
195.803 153.625 li
195.86 153.635 li
197.177 153.863 198.491 154.101 199.814 154.291 cv
200.161 154.339 li
200.215 154.346 li
200.613 154.395 201.01 154.451 201.407 154.508 cv
201.415 154.509 li
201.42 154.51 li
201.424 154.511 li
201.454 154.516 201.485 154.519 201.515 154.524 cv
201.517 154.524 li
201.521 154.525 li
201.59 154.534 201.662 154.545 201.732 154.554 cv
201.789 154.561 li
201.821 154.566 li
201.843 154.569 li
201.865 154.572 li
202.584 154.671 203.301 154.766 204.019 154.868 cv
204.027 154.869 li
204.042 154.871 li
204.057 154.873 li
204.062 154.873 li
204.065 154.874 li
204.067 154.874 li
206.58 155.219 209.115 155.48 211.642 155.693 cv
211.648 155.693 li
211.653 155.694 li
211.656 155.694 li
213.209 155.841 214.756 155.926 216.315 156.072 cv
216.329 156.073 li
216.4 156.078 li
216.482 156.083 li
217.148 156.136 217.813 156.154 218.479 156.196 cv
218.526 156.199 li
218.551 156.2 li
218.575 156.202 li
218.595 156.203 218.616 156.205 218.636 156.206 cv
218.642 156.206 li
218.644 156.207 li
218.649 156.207 li
218.658 156.206 218.662 156.209 218.672 156.208 cv
218.685 156.209 li
218.696 156.21 li
218.704 156.21 li
218.707 156.211 li
218.71 156.211 li
220.729 156.313 222.76 156.447 224.777 156.522 cv
224.935 156.529 li
224.946 156.529 li
224.952 156.53 li
224.96 156.53 li
262.809 157.99 301.111 157.368 338.989 157.613 cv
339.406 157.613 li
@
2 lj
[10 6 ] 0 dsh
137.317 157.855 mo
137.317 157.618 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
73.003 33.81 mo
73.085 33.81 li
85.691 33.758 100.445 77.264 104.55 86.697 cv
104.767 87.255 li
104.984 87.814 li
114.075 110.506 122.772 136.944 136.666 157.112 cv
136.883 157.413 li
137.1 157.712 li
1 /0 /CSD get_res sepcs
.148 sep
@
137.1 157.618 mo
137.317 157.303 li
137.534 156.991 li
148.077 142.12 158.784 136.673 176.377 142.772 cv
176.594 142.845 li
176.811 142.919 li
189.978 147.678 201.798 154.32 215.654 157.515 cv
216.088 157.619 li
@
2 lj
[10 6 ] 0 dsh
137.1 157.712 mo
137.1 157.618 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
216.088 157.618 mo
216.305 157.563 li
241.2 151.231 269.105 157.063 294.642 157.611 cv
294.859 157.619 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
216.088 157.619 mo
216.088 157.618 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
294.859 157.618 mo
295.076 157.608 li
321.14 156.501 347.327 157.528 373.413 157.616 cv
373.63 157.618 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
294.859 157.619 mo
294.859 157.618 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
373.63 157.618 mo
373.847 157.616 li
399.958 157.424 426.072 157.603 452.184 157.617 cv
452.401 157.618 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
373.63 157.618 mo
373.63 157.618 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
452.401 157.618 mo
452.618 157.617 li
469.182 157.596 485.747 157.601 502.311 157.608 cv
502.528 157.608 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
452.401 157.618 mo
452.401 157.618 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
73.003 33.81 mo
73.085 33.81 li
85.691 33.758 100.445 77.264 104.55 86.697 cv
104.767 87.255 li
104.984 87.814 li
114.075 110.506 122.772 136.944 136.666 157.112 cv
136.883 157.413 li
137.1 157.712 li
@
137.1 157.618 mo
137.317 157.185 li
160.753 109.413 184.466 148.263 216.305 157.613 cv
216.522 157.683 li
@
2 lj
[10 6 ] 0 dsh
137.1 157.712 mo
137.1 157.618 li
@
1 lj
[] 0 dsh
216.522 157.618 mo
216.739 157.516 li
216.956 157.415 li
229.574 151.512 242.009 151.298 255.582 152.804 cv
255.799 152.827 li
256.016 152.851 li
269 154.377 281.788 156.639 294.859 157.586 cv
295.293 157.62 li
@
2 lj
[10 6 ] 0 dsh
216.522 157.683 mo
216.522 157.618 li
@
1 lj
[] 0 dsh
295.293 157.618 mo
295.51 157.593 li
321.315 154.753 347.896 157.382 373.847 157.615 cv
374.064 157.619 li
@
2 lj
[10 6 ] 0 dsh
295.293 157.62 mo
295.293 157.618 li
@
1 lj
[] 0 dsh
374.064 157.618 mo
374.281 157.612 li
400.375 156.933 426.516 157.563 452.618 157.617 cv
452.835 157.618 li
@
2 lj
[10 6 ] 0 dsh
374.064 157.619 mo
374.064 157.618 li
@
1 lj
[] 0 dsh
452.835 157.618 mo
453.052 157.616 li
470.991 157.501 488.929 157.546 506.868 157.579 cv
507.052 157.579 li
@
2 lj
[10 6 ] 0 dsh
452.835 157.618 mo
452.835 157.618 li
@
395.5 96.5 mo
499 96.5 li
499 37.5 li
395.5 37.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
434.07 50.35 mo
434.07 50.141 434.096 49.902 434.148 49.631 cv
434.2 49.36 434.263 49.118 434.336 48.905 cv
434.409 48.691 434.526 48.365 434.687 47.928 cv
434.848 47.491 434.934 47.251 434.945 47.209 cv
435.08 46.844 435.148 46.542 435.148 46.303 cv
435.148 46.012 435.039 45.866 434.82 45.866 cv
434.424 45.866 434.098 46.069 433.843 46.475 cv
433.588 46.881 433.398 47.334 433.273 47.834 cv
433.252 47.897 433.211 47.928 433.148 47.928 cv
432.976 47.928 li
432.893 47.928 432.851 47.881 432.851 47.787 cv
432.851 47.756 li
433.008 47.152 433.253 46.621 433.586 46.162 cv
433.919 45.704 434.341 45.475 434.851 45.475 cv
435.206 45.475 435.505 45.592 435.75 45.827 cv
435.995 46.061 436.117 46.355 436.117 46.709 cv
436.117 46.897 436.075 47.095 435.992 47.303 cv
435.877 47.605 435.742 47.97 435.586 48.397 cv
435.429 48.824 435.307 49.209 435.218 49.553 cv
435.13 49.897 435.086 50.23 435.086 50.553 cv
435.086 50.949 435.187 51.267 435.39 51.506 cv
435.593 51.746 435.893 51.866 436.289 51.866 cv
436.82 51.866 437.258 51.465 437.601 50.662 cv
437.591 50.6 437.586 50.517 437.586 50.412 cv
437.586 50.141 437.628 49.834 437.711 49.491 cv
438.554 46.116 li
438.585 45.98 438.664 45.865 438.789 45.772 cv
438.914 45.678 439.044 45.631 439.179 45.631 cv
439.304 45.631 439.411 45.67 439.5 45.748 cv
439.589 45.827 439.633 45.928 439.633 46.053 cv
439.633 46.116 439.628 46.157 439.617 46.178 cv
438.773 49.522 li
438.68 49.918 438.633 50.277 438.633 50.6 cv
438.633 50.975 438.719 51.279 438.89 51.514 cv
439.062 51.749 439.336 51.866 439.711 51.866 cv
440.346 51.866 440.872 51.444 441.289 50.6 cv
441.445 50.298 441.619 49.85 441.812 49.256 cv
442.005 48.663 442.101 48.21 442.101 47.897 cv
442.101 47.616 442.054 47.389 441.961 47.217 cv
441.867 47.045 441.739 46.863 441.578 46.67 cv
441.417 46.477 441.336 46.334 441.336 46.241 cv
441.336 46.043 441.417 45.863 441.578 45.702 cv
441.739 45.54 441.919 45.459 442.117 45.459 cv
442.356 45.459 442.528 45.568 442.633 45.787 cv
442.737 46.006 442.789 46.256 442.789 46.537 cv
442.789 46.87 442.734 47.298 442.625 47.819 cv
442.516 48.34 442.375 48.863 442.203 49.389 cv
442.031 49.915 441.867 50.334 441.711 50.647 cv
441.169 51.73 440.492 52.272 439.679 52.272 cv
439.252 52.272 438.867 52.191 438.523 52.03 cv
438.18 51.868 437.925 51.61 437.758 51.256 cv
437.591 51.548 437.378 51.79 437.117 51.983 cv
436.856 52.176 436.57 52.272 436.258 52.272 cv
435.591 52.272 435.06 52.113 434.664 51.795 cv
434.268 51.478 434.07 50.996 434.07 50.35 cv
1 /0 /CSD get_res sepcs
1 sep
f
445.09 54.475 mo
444.631 54.475 444.269 54.3 444.004 53.951 cv
443.739 53.602 443.606 53.188 443.606 52.709 cv
443.606 52.24 443.728 51.753 443.973 51.248 cv
444.218 50.743 444.546 50.324 444.957 49.991 cv
445.368 49.658 445.814 49.491 446.293 49.491 cv
446.502 49.491 446.694 49.551 446.871 49.67 cv
447.048 49.79 447.184 49.949 447.277 50.147 cv
447.887 47.694 li
447.918 47.569 447.939 47.47 447.949 47.397 cv
447.949 47.282 447.71 47.225 447.231 47.225 cv
447.158 47.225 447.121 47.178 447.121 47.084 cv
447.121 47.063 447.129 47.03 447.145 46.983 cv
447.16 46.936 447.178 46.899 447.199 46.873 cv
447.22 46.847 447.246 46.834 447.277 46.834 cv
448.762 46.725 li
448.845 46.725 448.887 46.767 448.887 46.85 cv
447.309 53.178 li
447.257 53.303 447.231 53.48 447.231 53.709 cv
447.231 54.022 447.335 54.178 447.543 54.178 cv
447.772 54.178 447.949 54.032 448.074 53.741 cv
448.199 53.449 448.298 53.116 448.371 52.741 cv
448.392 52.688 448.423 52.662 448.465 52.662 cv
448.606 52.662 li
448.627 52.662 448.647 52.675 448.668 52.701 cv
448.689 52.728 448.699 52.751 448.699 52.772 cv
448.564 53.282 448.421 53.693 448.27 54.006 cv
448.119 54.319 447.871 54.475 447.527 54.475 cv
447.277 54.475 447.058 54.402 446.871 54.256 cv
446.684 54.11 446.564 53.917 446.512 53.678 cv
446.043 54.209 445.569 54.475 445.09 54.475 cv
cp
445.106 54.178 mo
445.377 54.178 445.634 54.079 445.879 53.881 cv
446.124 53.683 446.335 53.449 446.512 53.178 cv
446.522 53.178 446.527 53.168 446.527 53.147 cv
447.137 50.725 li
447.095 50.464 446.999 50.24 446.848 50.053 cv
446.697 49.866 446.501 49.772 446.262 49.772 cv
446.012 49.772 445.78 49.873 445.567 50.076 cv
445.353 50.279 445.173 50.516 445.027 50.787 cv
444.892 51.09 444.756 51.496 444.621 52.006 cv
444.486 52.517 444.418 52.913 444.418 53.194 cv
444.418 53.444 444.473 53.67 444.582 53.873 cv
444.691 54.076 444.866 54.178 445.106 54.178 cv
f
449.743 56.334 mo
449.743 56.303 449.758 56.272 449.789 56.241 cv
450.05 55.991 450.253 55.699 450.399 55.366 cv
450.545 55.033 450.618 54.678 450.618 54.303 cv
450.618 54.178 li
450.503 54.293 450.357 54.35 450.18 54.35 cv
450.013 54.35 449.87 54.29 449.75 54.17 cv
449.631 54.051 449.571 53.908 449.571 53.741 cv
449.571 53.574 449.631 53.434 449.75 53.319 cv
449.87 53.204 450.013 53.147 450.18 53.147 cv
450.441 53.147 450.626 53.267 450.735 53.506 cv
450.844 53.746 450.899 54.012 450.899 54.303 cv
450.899 54.709 450.818 55.097 450.657 55.467 cv
450.495 55.837 450.268 56.168 449.977 56.459 cv
449.946 56.47 449.92 56.475 449.899 56.475 cv
449.868 56.475 449.834 56.459 449.797 56.428 cv
449.761 56.397 449.743 56.365 449.743 56.334 cv
f
452.425 53.553 mo
452.425 53.418 452.456 53.277 452.519 53.131 cv
453.409 50.756 li
453.503 50.496 453.55 50.277 453.55 50.1 cv
453.55 49.881 453.467 49.772 453.3 49.772 cv
453.019 49.772 452.782 49.923 452.589 50.225 cv
452.396 50.527 452.258 50.86 452.175 51.225 cv
452.154 51.266 452.123 51.287 452.081 51.287 cv
451.956 51.287 li
451.893 51.287 451.862 51.256 451.862 51.194 cv
451.862 51.162 li
451.977 50.725 452.156 50.337 452.401 49.998 cv
452.646 49.66 452.956 49.491 453.331 49.491 cv
453.592 49.491 453.813 49.577 453.995 49.748 cv
454.178 49.92 454.269 50.136 454.269 50.397 cv
454.269 50.532 454.238 50.678 454.175 50.834 cv
453.284 53.194 li
453.18 53.433 453.128 53.652 453.128 53.85 cv
453.128 54.069 453.211 54.178 453.378 54.178 cv
453.67 54.178 453.91 54.027 454.097 53.725 cv
454.284 53.423 454.42 53.095 454.503 52.741 cv
454.514 52.688 454.545 52.662 454.597 52.662 cv
454.722 52.662 li
454.753 52.662 454.777 52.673 454.792 52.694 cv
454.808 52.715 454.816 52.741 454.816 52.772 cv
454.816 52.772 454.816 52.782 454.816 52.803 cv
454.711 53.22 454.534 53.602 454.284 53.951 cv
454.034 54.3 453.727 54.475 453.362 54.475 cv
453.102 54.475 452.881 54.386 452.698 54.209 cv
452.516 54.032 452.425 53.814 452.425 53.553 cv
cp
453.659 47.678 mo
453.659 47.532 453.724 47.397 453.855 47.272 cv
453.985 47.147 454.128 47.084 454.284 47.084 cv
454.409 47.084 454.511 47.121 454.589 47.194 cv
454.667 47.267 454.706 47.366 454.706 47.491 cv
454.706 47.647 454.641 47.787 454.511 47.912 cv
454.381 48.037 454.238 48.1 454.081 48.1 cv
453.966 48.1 453.867 48.061 453.784 47.983 cv
453.701 47.905 453.659 47.803 453.659 47.678 cv
f
461.224 50.1 mo
461.141 50.1 461.073 50.069 461.021 50.006 cv
460.969 49.943 460.943 49.876 460.943 49.803 cv
460.943 49.72 460.969 49.649 461.021 49.592 cv
461.073 49.535 461.141 49.506 461.224 49.506 cv
470.646 49.506 li
470.719 49.506 470.782 49.535 470.834 49.592 cv
470.886 49.649 470.912 49.72 470.912 49.803 cv
470.912 49.876 470.886 49.943 470.834 50.006 cv
470.782 50.069 470.719 50.1 470.646 50.1 cv
461.224 50.1 li
cp
461.224 47.194 mo
461.141 47.194 461.073 47.165 461.021 47.108 cv
460.969 47.051 460.943 46.98 460.943 46.897 cv
460.943 46.824 460.969 46.753 461.021 46.686 cv
461.073 46.618 461.141 46.584 461.224 46.584 cv
470.646 46.584 li
470.719 46.584 470.782 46.618 470.834 46.686 cv
470.886 46.753 470.912 46.824 470.912 46.897 cv
470.912 46.98 470.886 47.051 470.834 47.108 cv
470.782 47.165 470.719 47.194 470.646 47.194 cv
461.224 47.194 li
f
479.683 52.428 mo
478.454 52.428 477.62 51.923 477.183 50.912 cv
476.745 49.902 476.526 48.704 476.526 47.319 cv
476.526 46.444 476.604 45.623 476.761 44.858 cv
476.917 44.092 477.229 43.443 477.698 42.912 cv
478.167 42.381 478.828 42.116 479.683 42.116 cv
480.339 42.116 480.878 42.275 481.3 42.592 cv
481.722 42.91 482.042 43.324 482.261 43.834 cv
482.48 44.345 482.631 44.892 482.714 45.475 cv
482.797 46.058 482.839 46.673 482.839 47.319 cv
482.839 48.173 482.758 48.975 482.597 49.725 cv
482.436 50.475 482.123 51.113 481.659 51.639 cv
481.196 52.165 480.537 52.428 479.683 52.428 cv
cp
479.683 52.037 mo
480.235 52.037 480.649 51.753 480.925 51.186 cv
481.201 50.618 481.37 49.985 481.433 49.287 cv
481.495 48.59 481.526 47.85 481.526 47.069 cv
481.526 46.319 481.495 45.626 481.433 44.991 cv
481.37 44.355 481.204 43.779 480.933 43.264 cv
480.662 42.749 480.245 42.491 479.683 42.491 cv
479.12 42.491 478.701 42.751 478.425 43.272 cv
478.149 43.793 477.98 44.368 477.917 44.998 cv
477.854 45.629 477.823 46.319 477.823 47.069 cv
477.823 47.631 477.836 48.16 477.862 48.655 cv
477.888 49.15 477.961 49.657 478.081 50.178 cv
478.201 50.699 478.391 51.139 478.651 51.498 cv
478.912 51.857 479.256 52.037 479.683 52.037 cv
f
1 lj
[] 0 dsh
399.494 48.5 mo
429.449 48.5 li
1 /0 /CSD get_res sepcs
.729 sep
@
434.07 68.85 mo
434.07 68.641 434.096 68.402 434.148 68.131 cv
434.2 67.86 434.263 67.618 434.336 67.405 cv
434.409 67.191 434.526 66.865 434.687 66.428 cv
434.848 65.991 434.934 65.751 434.945 65.709 cv
435.08 65.344 435.148 65.042 435.148 64.803 cv
435.148 64.512 435.039 64.366 434.82 64.366 cv
434.424 64.366 434.098 64.569 433.843 64.975 cv
433.588 65.381 433.398 65.834 433.273 66.334 cv
433.252 66.397 433.211 66.428 433.148 66.428 cv
432.976 66.428 li
432.893 66.428 432.851 66.381 432.851 66.287 cv
432.851 66.256 li
433.008 65.652 433.253 65.121 433.586 64.662 cv
433.919 64.204 434.341 63.975 434.851 63.975 cv
435.206 63.975 435.505 64.092 435.75 64.327 cv
435.995 64.561 436.117 64.855 436.117 65.209 cv
436.117 65.397 436.075 65.595 435.992 65.803 cv
435.877 66.105 435.742 66.47 435.586 66.897 cv
435.429 67.324 435.307 67.709 435.218 68.053 cv
435.13 68.397 435.086 68.73 435.086 69.053 cv
435.086 69.449 435.187 69.767 435.39 70.006 cv
435.593 70.246 435.893 70.366 436.289 70.366 cv
436.82 70.366 437.258 69.965 437.601 69.162 cv
437.591 69.1 437.586 69.017 437.586 68.912 cv
437.586 68.641 437.628 68.334 437.711 67.991 cv
438.554 64.616 li
438.585 64.48 438.664 64.365 438.789 64.272 cv
438.914 64.178 439.044 64.131 439.179 64.131 cv
439.304 64.131 439.411 64.17 439.5 64.248 cv
439.589 64.327 439.633 64.428 439.633 64.553 cv
439.633 64.616 439.628 64.657 439.617 64.678 cv
438.773 68.022 li
438.68 68.418 438.633 68.777 438.633 69.1 cv
438.633 69.475 438.719 69.779 438.89 70.014 cv
439.062 70.249 439.336 70.366 439.711 70.366 cv
440.346 70.366 440.872 69.944 441.289 69.1 cv
441.445 68.798 441.619 68.35 441.812 67.756 cv
442.005 67.163 442.101 66.71 442.101 66.397 cv
442.101 66.116 442.054 65.889 441.961 65.717 cv
441.867 65.545 441.739 65.363 441.578 65.17 cv
441.417 64.977 441.336 64.834 441.336 64.741 cv
441.336 64.543 441.417 64.363 441.578 64.202 cv
441.739 64.04 441.919 63.959 442.117 63.959 cv
442.356 63.959 442.528 64.068 442.633 64.287 cv
442.737 64.506 442.789 64.756 442.789 65.037 cv
442.789 65.37 442.734 65.798 442.625 66.319 cv
442.516 66.84 442.375 67.363 442.203 67.889 cv
442.031 68.415 441.867 68.834 441.711 69.147 cv
441.169 70.23 440.492 70.772 439.679 70.772 cv
439.252 70.772 438.867 70.691 438.523 70.53 cv
438.18 70.368 437.925 70.11 437.758 69.756 cv
437.591 70.048 437.378 70.29 437.117 70.483 cv
436.856 70.676 436.57 70.772 436.258 70.772 cv
435.591 70.772 435.06 70.613 434.664 70.295 cv
434.268 69.978 434.07 69.496 434.07 68.85 cv
1 /0 /CSD get_res sepcs
1 sep
f
445.09 72.975 mo
444.631 72.975 444.269 72.8 444.004 72.451 cv
443.739 72.102 443.606 71.688 443.606 71.209 cv
443.606 70.74 443.728 70.253 443.973 69.748 cv
444.218 69.243 444.546 68.824 444.957 68.491 cv
445.368 68.158 445.814 67.991 446.293 67.991 cv
446.502 67.991 446.694 68.051 446.871 68.17 cv
447.048 68.29 447.184 68.449 447.277 68.647 cv
447.887 66.194 li
447.918 66.069 447.939 65.97 447.949 65.897 cv
447.949 65.782 447.71 65.725 447.231 65.725 cv
447.158 65.725 447.121 65.678 447.121 65.584 cv
447.121 65.563 447.129 65.53 447.145 65.483 cv
447.16 65.436 447.178 65.399 447.199 65.373 cv
447.22 65.347 447.246 65.334 447.277 65.334 cv
448.762 65.225 li
448.845 65.225 448.887 65.267 448.887 65.35 cv
447.309 71.678 li
447.257 71.803 447.231 71.98 447.231 72.209 cv
447.231 72.522 447.335 72.678 447.543 72.678 cv
447.772 72.678 447.949 72.532 448.074 72.241 cv
448.199 71.949 448.298 71.616 448.371 71.241 cv
448.392 71.188 448.423 71.162 448.465 71.162 cv
448.606 71.162 li
448.627 71.162 448.647 71.175 448.668 71.201 cv
448.689 71.228 448.699 71.251 448.699 71.272 cv
448.564 71.782 448.421 72.193 448.27 72.506 cv
448.119 72.819 447.871 72.975 447.527 72.975 cv
447.277 72.975 447.058 72.902 446.871 72.756 cv
446.684 72.61 446.564 72.417 446.512 72.178 cv
446.043 72.709 445.569 72.975 445.09 72.975 cv
cp
445.106 72.678 mo
445.377 72.678 445.634 72.579 445.879 72.381 cv
446.124 72.183 446.335 71.949 446.512 71.678 cv
446.522 71.678 446.527 71.668 446.527 71.647 cv
447.137 69.225 li
447.095 68.964 446.999 68.74 446.848 68.553 cv
446.697 68.366 446.501 68.272 446.262 68.272 cv
446.012 68.272 445.78 68.373 445.567 68.576 cv
445.353 68.779 445.173 69.016 445.027 69.287 cv
444.892 69.59 444.756 69.996 444.621 70.506 cv
444.486 71.017 444.418 71.413 444.418 71.694 cv
444.418 71.944 444.473 72.17 444.582 72.373 cv
444.691 72.576 444.866 72.678 445.106 72.678 cv
f
449.743 74.834 mo
449.743 74.803 449.758 74.772 449.789 74.741 cv
450.05 74.491 450.253 74.199 450.399 73.866 cv
450.545 73.533 450.618 73.178 450.618 72.803 cv
450.618 72.678 li
450.503 72.793 450.357 72.85 450.18 72.85 cv
450.013 72.85 449.87 72.79 449.75 72.67 cv
449.631 72.551 449.571 72.408 449.571 72.241 cv
449.571 72.074 449.631 71.934 449.75 71.819 cv
449.87 71.704 450.013 71.647 450.18 71.647 cv
450.441 71.647 450.626 71.767 450.735 72.006 cv
450.844 72.246 450.899 72.512 450.899 72.803 cv
450.899 73.209 450.818 73.597 450.657 73.967 cv
450.495 74.337 450.268 74.668 449.977 74.959 cv
449.946 74.97 449.92 74.975 449.899 74.975 cv
449.868 74.975 449.834 74.959 449.797 74.928 cv
449.761 74.897 449.743 74.865 449.743 74.834 cv
f
452.425 72.053 mo
452.425 71.918 452.456 71.777 452.519 71.631 cv
453.409 69.256 li
453.503 68.996 453.55 68.777 453.55 68.6 cv
453.55 68.381 453.467 68.272 453.3 68.272 cv
453.019 68.272 452.782 68.423 452.589 68.725 cv
452.396 69.027 452.258 69.36 452.175 69.725 cv
452.154 69.766 452.123 69.787 452.081 69.787 cv
451.956 69.787 li
451.893 69.787 451.862 69.756 451.862 69.694 cv
451.862 69.662 li
451.977 69.225 452.156 68.837 452.401 68.498 cv
452.646 68.16 452.956 67.991 453.331 67.991 cv
453.592 67.991 453.813 68.077 453.995 68.248 cv
454.178 68.42 454.269 68.636 454.269 68.897 cv
454.269 69.032 454.238 69.178 454.175 69.334 cv
453.284 71.694 li
453.18 71.933 453.128 72.152 453.128 72.35 cv
453.128 72.569 453.211 72.678 453.378 72.678 cv
453.67 72.678 453.91 72.527 454.097 72.225 cv
454.284 71.923 454.42 71.595 454.503 71.241 cv
454.514 71.188 454.545 71.162 454.597 71.162 cv
454.722 71.162 li
454.753 71.162 454.777 71.173 454.792 71.194 cv
454.808 71.215 454.816 71.241 454.816 71.272 cv
454.816 71.272 454.816 71.282 454.816 71.303 cv
454.711 71.72 454.534 72.102 454.284 72.451 cv
454.034 72.8 453.727 72.975 453.362 72.975 cv
453.102 72.975 452.881 72.886 452.698 72.709 cv
452.516 72.532 452.425 72.314 452.425 72.053 cv
cp
453.659 66.178 mo
453.659 66.032 453.724 65.897 453.855 65.772 cv
453.985 65.647 454.128 65.584 454.284 65.584 cv
454.409 65.584 454.511 65.621 454.589 65.694 cv
454.667 65.767 454.706 65.866 454.706 65.991 cv
454.706 66.147 454.641 66.287 454.511 66.412 cv
454.381 66.537 454.238 66.6 454.081 66.6 cv
453.966 66.6 453.867 66.561 453.784 66.483 cv
453.701 66.405 453.659 66.303 453.659 66.178 cv
f
461.224 68.6 mo
461.141 68.6 461.073 68.569 461.021 68.506 cv
460.969 68.443 460.943 68.376 460.943 68.303 cv
460.943 68.22 460.969 68.149 461.021 68.092 cv
461.073 68.035 461.141 68.006 461.224 68.006 cv
470.646 68.006 li
470.719 68.006 470.782 68.035 470.834 68.092 cv
470.886 68.149 470.912 68.22 470.912 68.303 cv
470.912 68.376 470.886 68.443 470.834 68.506 cv
470.782 68.569 470.719 68.6 470.646 68.6 cv
461.224 68.6 li
cp
461.224 65.694 mo
461.141 65.694 461.073 65.665 461.021 65.608 cv
460.969 65.551 460.943 65.48 460.943 65.397 cv
460.943 65.324 460.969 65.253 461.021 65.186 cv
461.073 65.118 461.141 65.084 461.224 65.084 cv
470.646 65.084 li
470.719 65.084 470.782 65.118 470.834 65.186 cv
470.886 65.253 470.912 65.324 470.912 65.397 cv
470.912 65.48 470.886 65.551 470.834 65.608 cv
470.782 65.665 470.719 65.694 470.646 65.694 cv
461.224 65.694 li
f
479.683 70.928 mo
478.454 70.928 477.62 70.423 477.183 69.412 cv
476.745 68.402 476.526 67.204 476.526 65.819 cv
476.526 64.944 476.604 64.123 476.761 63.358 cv
476.917 62.592 477.229 61.943 477.698 61.412 cv
478.167 60.881 478.828 60.616 479.683 60.616 cv
480.339 60.616 480.878 60.775 481.3 61.092 cv
481.722 61.41 482.042 61.824 482.261 62.334 cv
482.48 62.845 482.631 63.392 482.714 63.975 cv
482.797 64.558 482.839 65.173 482.839 65.819 cv
482.839 66.673 482.758 67.475 482.597 68.225 cv
482.436 68.975 482.123 69.613 481.659 70.139 cv
481.196 70.665 480.537 70.928 479.683 70.928 cv
cp
479.683 70.537 mo
480.235 70.537 480.649 70.253 480.925 69.686 cv
481.201 69.118 481.37 68.485 481.433 67.787 cv
481.495 67.09 481.526 66.35 481.526 65.569 cv
481.526 64.819 481.495 64.126 481.433 63.491 cv
481.37 62.855 481.204 62.279 480.933 61.764 cv
480.662 61.249 480.245 60.991 479.683 60.991 cv
479.12 60.991 478.701 61.251 478.425 61.772 cv
478.149 62.293 477.98 62.868 477.917 63.498 cv
477.854 64.129 477.823 64.819 477.823 65.569 cv
477.823 66.131 477.836 66.66 477.862 67.155 cv
477.888 67.65 477.961 68.157 478.081 68.678 cv
478.201 69.199 478.391 69.639 478.651 69.998 cv
478.912 70.357 479.256 70.537 479.683 70.537 cv
f
484.698 69.772 mo
484.698 69.543 484.781 69.35 484.948 69.194 cv
485.115 69.037 485.308 68.959 485.527 68.959 cv
485.662 68.959 485.795 68.996 485.925 69.069 cv
486.055 69.142 486.157 69.243 486.23 69.373 cv
486.303 69.504 486.339 69.637 486.339 69.772 cv
486.339 69.991 486.258 70.183 486.097 70.35 cv
485.936 70.517 485.746 70.6 485.527 70.6 cv
485.308 70.6 485.115 70.517 484.948 70.35 cv
484.781 70.183 484.698 69.991 484.698 69.772 cv
f
488.021 68.131 mo
488.021 67.6 li
492.646 60.678 li
492.688 60.637 492.74 60.616 492.803 60.616 cv
493.021 60.616 li
493.136 60.616 493.193 60.668 493.193 60.772 cv
493.193 67.6 li
494.662 67.6 li
494.662 68.131 li
493.193 68.131 li
493.193 69.6 li
493.193 69.798 493.339 69.926 493.631 69.983 cv
493.922 70.04 494.261 70.069 494.646 70.069 cv
494.646 70.6 li
490.521 70.6 li
490.521 70.069 li
490.906 70.069 491.245 70.04 491.537 69.983 cv
491.828 69.926 491.974 69.798 491.974 69.6 cv
491.974 68.131 li
488.021 68.131 li
cp
488.521 67.6 mo
492.068 67.6 li
492.068 62.287 li
488.521 67.6 li
f
399.494 67 mo
429.449 67 li
1 /0 /CSD get_res sepcs
.148 sep
@
434.07 87.35 mo
434.07 87.141 434.096 86.902 434.148 86.631 cv
434.2 86.36 434.263 86.118 434.336 85.905 cv
434.409 85.691 434.526 85.365 434.687 84.928 cv
434.848 84.491 434.934 84.251 434.945 84.209 cv
435.08 83.844 435.148 83.542 435.148 83.303 cv
435.148 83.012 435.039 82.866 434.82 82.866 cv
434.424 82.866 434.098 83.069 433.843 83.475 cv
433.588 83.881 433.398 84.334 433.273 84.834 cv
433.252 84.897 433.211 84.928 433.148 84.928 cv
432.976 84.928 li
432.893 84.928 432.851 84.881 432.851 84.787 cv
432.851 84.756 li
433.008 84.152 433.253 83.621 433.586 83.162 cv
433.919 82.704 434.341 82.475 434.851 82.475 cv
435.206 82.475 435.505 82.592 435.75 82.827 cv
435.995 83.061 436.117 83.355 436.117 83.709 cv
436.117 83.897 436.075 84.095 435.992 84.303 cv
435.877 84.605 435.742 84.97 435.586 85.397 cv
435.429 85.824 435.307 86.209 435.218 86.553 cv
435.13 86.897 435.086 87.23 435.086 87.553 cv
435.086 87.949 435.187 88.267 435.39 88.506 cv
435.593 88.746 435.893 88.866 436.289 88.866 cv
436.82 88.866 437.258 88.465 437.601 87.662 cv
437.591 87.6 437.586 87.517 437.586 87.412 cv
437.586 87.141 437.628 86.834 437.711 86.491 cv
438.554 83.116 li
438.585 82.98 438.664 82.865 438.789 82.772 cv
438.914 82.678 439.044 82.631 439.179 82.631 cv
439.304 82.631 439.411 82.67 439.5 82.748 cv
439.589 82.827 439.633 82.928 439.633 83.053 cv
439.633 83.116 439.628 83.157 439.617 83.178 cv
438.773 86.522 li
438.68 86.918 438.633 87.277 438.633 87.6 cv
438.633 87.975 438.719 88.279 438.89 88.514 cv
439.062 88.749 439.336 88.866 439.711 88.866 cv
440.346 88.866 440.872 88.444 441.289 87.6 cv
441.445 87.298 441.619 86.85 441.812 86.256 cv
442.005 85.663 442.101 85.21 442.101 84.897 cv
442.101 84.616 442.054 84.389 441.961 84.217 cv
441.867 84.045 441.739 83.863 441.578 83.67 cv
441.417 83.477 441.336 83.334 441.336 83.241 cv
441.336 83.043 441.417 82.863 441.578 82.702 cv
441.739 82.54 441.919 82.459 442.117 82.459 cv
442.356 82.459 442.528 82.568 442.633 82.787 cv
442.737 83.006 442.789 83.256 442.789 83.537 cv
442.789 83.87 442.734 84.298 442.625 84.819 cv
442.516 85.34 442.375 85.863 442.203 86.389 cv
442.031 86.915 441.867 87.334 441.711 87.647 cv
441.169 88.73 440.492 89.272 439.679 89.272 cv
439.252 89.272 438.867 89.191 438.523 89.03 cv
438.18 88.868 437.925 88.61 437.758 88.256 cv
437.591 88.548 437.378 88.79 437.117 88.983 cv
436.856 89.176 436.57 89.272 436.258 89.272 cv
435.591 89.272 435.06 89.113 434.664 88.795 cv
434.268 88.478 434.07 87.996 434.07 87.35 cv
1 /0 /CSD get_res sepcs
1 sep
f
445.09 91.475 mo
444.631 91.475 444.269 91.3 444.004 90.951 cv
443.739 90.602 443.606 90.188 443.606 89.709 cv
443.606 89.24 443.728 88.753 443.973 88.248 cv
444.218 87.743 444.546 87.324 444.957 86.991 cv
445.368 86.658 445.814 86.491 446.293 86.491 cv
446.502 86.491 446.694 86.551 446.871 86.67 cv
447.048 86.79 447.184 86.949 447.277 87.147 cv
447.887 84.694 li
447.918 84.569 447.939 84.47 447.949 84.397 cv
447.949 84.282 447.71 84.225 447.231 84.225 cv
447.158 84.225 447.121 84.178 447.121 84.084 cv
447.121 84.063 447.129 84.03 447.145 83.983 cv
447.16 83.936 447.178 83.899 447.199 83.873 cv
447.22 83.847 447.246 83.834 447.277 83.834 cv
448.762 83.725 li
448.845 83.725 448.887 83.767 448.887 83.85 cv
447.309 90.178 li
447.257 90.303 447.231 90.48 447.231 90.709 cv
447.231 91.022 447.335 91.178 447.543 91.178 cv
447.772 91.178 447.949 91.032 448.074 90.741 cv
448.199 90.449 448.298 90.116 448.371 89.741 cv
448.392 89.688 448.423 89.662 448.465 89.662 cv
448.606 89.662 li
448.627 89.662 448.647 89.675 448.668 89.701 cv
448.689 89.728 448.699 89.751 448.699 89.772 cv
448.564 90.282 448.421 90.693 448.27 91.006 cv
448.119 91.319 447.871 91.475 447.527 91.475 cv
447.277 91.475 447.058 91.402 446.871 91.256 cv
446.684 91.11 446.564 90.917 446.512 90.678 cv
446.043 91.209 445.569 91.475 445.09 91.475 cv
cp
445.106 91.178 mo
445.377 91.178 445.634 91.079 445.879 90.881 cv
446.124 90.683 446.335 90.449 446.512 90.178 cv
446.522 90.178 446.527 90.168 446.527 90.147 cv
447.137 87.725 li
447.095 87.464 446.999 87.24 446.848 87.053 cv
446.697 86.866 446.501 86.772 446.262 86.772 cv
446.012 86.772 445.78 86.873 445.567 87.076 cv
445.353 87.279 445.173 87.516 445.027 87.787 cv
444.892 88.09 444.756 88.496 444.621 89.006 cv
444.486 89.517 444.418 89.913 444.418 90.194 cv
444.418 90.444 444.473 90.67 444.582 90.873 cv
444.691 91.076 444.866 91.178 445.106 91.178 cv
f
449.743 93.334 mo
449.743 93.303 449.758 93.272 449.789 93.241 cv
450.05 92.991 450.253 92.699 450.399 92.366 cv
450.545 92.033 450.618 91.678 450.618 91.303 cv
450.618 91.178 li
450.503 91.293 450.357 91.35 450.18 91.35 cv
450.013 91.35 449.87 91.29 449.75 91.17 cv
449.631 91.051 449.571 90.908 449.571 90.741 cv
449.571 90.574 449.631 90.434 449.75 90.319 cv
449.87 90.204 450.013 90.147 450.18 90.147 cv
450.441 90.147 450.626 90.267 450.735 90.506 cv
450.844 90.746 450.899 91.012 450.899 91.303 cv
450.899 91.709 450.818 92.097 450.657 92.467 cv
450.495 92.837 450.268 93.168 449.977 93.459 cv
449.946 93.47 449.92 93.475 449.899 93.475 cv
449.868 93.475 449.834 93.459 449.797 93.428 cv
449.761 93.397 449.743 93.365 449.743 93.334 cv
f
452.425 90.553 mo
452.425 90.418 452.456 90.277 452.519 90.131 cv
453.409 87.756 li
453.503 87.496 453.55 87.277 453.55 87.1 cv
453.55 86.881 453.467 86.772 453.3 86.772 cv
453.019 86.772 452.782 86.923 452.589 87.225 cv
452.396 87.527 452.258 87.86 452.175 88.225 cv
452.154 88.266 452.123 88.287 452.081 88.287 cv
451.956 88.287 li
451.893 88.287 451.862 88.256 451.862 88.194 cv
451.862 88.162 li
451.977 87.725 452.156 87.337 452.401 86.998 cv
452.646 86.66 452.956 86.491 453.331 86.491 cv
453.592 86.491 453.813 86.577 453.995 86.748 cv
454.178 86.92 454.269 87.136 454.269 87.397 cv
454.269 87.532 454.238 87.678 454.175 87.834 cv
453.284 90.194 li
453.18 90.433 453.128 90.652 453.128 90.85 cv
453.128 91.069 453.211 91.178 453.378 91.178 cv
453.67 91.178 453.91 91.027 454.097 90.725 cv
454.284 90.423 454.42 90.095 454.503 89.741 cv
454.514 89.688 454.545 89.662 454.597 89.662 cv
454.722 89.662 li
454.753 89.662 454.777 89.673 454.792 89.694 cv
454.808 89.715 454.816 89.741 454.816 89.772 cv
454.816 89.772 454.816 89.782 454.816 89.803 cv
454.711 90.22 454.534 90.602 454.284 90.951 cv
454.034 91.3 453.727 91.475 453.362 91.475 cv
453.102 91.475 452.881 91.386 452.698 91.209 cv
452.516 91.032 452.425 90.814 452.425 90.553 cv
cp
453.659 84.678 mo
453.659 84.532 453.724 84.397 453.855 84.272 cv
453.985 84.147 454.128 84.084 454.284 84.084 cv
454.409 84.084 454.511 84.121 454.589 84.194 cv
454.667 84.267 454.706 84.366 454.706 84.491 cv
454.706 84.647 454.641 84.787 454.511 84.912 cv
454.381 85.037 454.238 85.1 454.081 85.1 cv
453.966 85.1 453.867 85.061 453.784 84.983 cv
453.701 84.905 453.659 84.803 453.659 84.678 cv
f
461.224 87.1 mo
461.141 87.1 461.073 87.069 461.021 87.006 cv
460.969 86.943 460.943 86.876 460.943 86.803 cv
460.943 86.72 460.969 86.649 461.021 86.592 cv
461.073 86.535 461.141 86.506 461.224 86.506 cv
470.646 86.506 li
470.719 86.506 470.782 86.535 470.834 86.592 cv
470.886 86.649 470.912 86.72 470.912 86.803 cv
470.912 86.876 470.886 86.943 470.834 87.006 cv
470.782 87.069 470.719 87.1 470.646 87.1 cv
461.224 87.1 li
cp
461.224 84.194 mo
461.141 84.194 461.073 84.165 461.021 84.108 cv
460.969 84.051 460.943 83.98 460.943 83.897 cv
460.943 83.824 460.969 83.753 461.021 83.686 cv
461.073 83.618 461.141 83.584 461.224 83.584 cv
470.646 83.584 li
470.719 83.584 470.782 83.618 470.834 83.686 cv
470.886 83.753 470.912 83.824 470.912 83.897 cv
470.912 83.98 470.886 84.051 470.834 84.108 cv
470.782 84.165 470.719 84.194 470.646 84.194 cv
461.224 84.194 li
f
479.683 89.428 mo
478.454 89.428 477.62 88.923 477.183 87.912 cv
476.745 86.902 476.526 85.704 476.526 84.319 cv
476.526 83.444 476.604 82.623 476.761 81.858 cv
476.917 81.092 477.229 80.443 477.698 79.912 cv
478.167 79.381 478.828 79.116 479.683 79.116 cv
480.339 79.116 480.878 79.275 481.3 79.592 cv
481.722 79.91 482.042 80.324 482.261 80.834 cv
482.48 81.345 482.631 81.892 482.714 82.475 cv
482.797 83.058 482.839 83.673 482.839 84.319 cv
482.839 85.173 482.758 85.975 482.597 86.725 cv
482.436 87.475 482.123 88.113 481.659 88.639 cv
481.196 89.165 480.537 89.428 479.683 89.428 cv
cp
479.683 89.037 mo
480.235 89.037 480.649 88.753 480.925 88.186 cv
481.201 87.618 481.37 86.985 481.433 86.287 cv
481.495 85.59 481.526 84.85 481.526 84.069 cv
481.526 83.319 481.495 82.626 481.433 81.991 cv
481.37 81.355 481.204 80.779 480.933 80.264 cv
480.662 79.749 480.245 79.491 479.683 79.491 cv
479.12 79.491 478.701 79.751 478.425 80.272 cv
478.149 80.793 477.98 81.368 477.917 81.998 cv
477.854 82.629 477.823 83.319 477.823 84.069 cv
477.823 84.631 477.836 85.16 477.862 85.655 cv
477.888 86.15 477.961 86.657 478.081 87.178 cv
478.201 87.699 478.391 88.139 478.651 88.498 cv
478.912 88.857 479.256 89.037 479.683 89.037 cv
f
484.698 88.272 mo
484.698 88.043 484.781 87.85 484.948 87.694 cv
485.115 87.537 485.308 87.459 485.527 87.459 cv
485.662 87.459 485.795 87.496 485.925 87.569 cv
486.055 87.642 486.157 87.743 486.23 87.873 cv
486.303 88.004 486.339 88.137 486.339 88.272 cv
486.339 88.491 486.258 88.683 486.097 88.85 cv
485.936 89.017 485.746 89.1 485.527 89.1 cv
485.308 89.1 485.115 89.017 484.948 88.85 cv
484.781 88.683 484.698 88.491 484.698 88.272 cv
f
488.224 86.819 mo
488.224 86.225 488.422 85.696 488.818 85.233 cv
489.214 84.769 489.724 84.381 490.349 84.069 cv
489.787 83.709 li
489.443 83.49 489.164 83.194 488.951 82.819 cv
488.738 82.444 488.631 82.053 488.631 81.647 cv
488.631 81.168 488.756 80.735 489.006 80.35 cv
489.256 79.965 489.592 79.663 490.013 79.444 cv
490.435 79.225 490.88 79.116 491.349 79.116 cv
491.797 79.116 492.227 79.204 492.638 79.381 cv
493.05 79.558 493.389 79.816 493.654 80.155 cv
493.92 80.493 494.053 80.897 494.053 81.366 cv
494.053 81.699 493.975 82.009 493.818 82.295 cv
493.662 82.582 493.446 82.84 493.17 83.069 cv
492.894 83.298 492.6 83.495 492.287 83.662 cv
493.131 84.209 li
493.526 84.47 493.847 84.808 494.092 85.225 cv
494.337 85.642 494.459 86.084 494.459 86.553 cv
494.459 87.095 494.313 87.587 494.021 88.03 cv
493.73 88.473 493.344 88.816 492.865 89.061 cv
492.386 89.306 491.88 89.428 491.349 89.428 cv
490.828 89.428 490.328 89.324 489.849 89.116 cv
489.37 88.907 488.98 88.603 488.678 88.202 cv
488.375 87.801 488.224 87.34 488.224 86.819 cv
cp
489.037 86.819 mo
489.037 87.214 489.146 87.576 489.365 87.905 cv
489.584 88.233 489.873 88.491 490.232 88.678 cv
490.591 88.865 490.964 88.959 491.349 88.959 cv
491.932 88.959 492.461 88.787 492.935 88.444 cv
493.409 88.1 493.646 87.652 493.646 87.1 cv
493.646 86.902 493.607 86.709 493.529 86.522 cv
493.451 86.335 493.344 86.165 493.209 86.014 cv
493.074 85.863 492.923 85.735 492.756 85.631 cv
490.756 84.334 li
490.443 84.501 490.154 84.712 489.888 84.967 cv
489.623 85.222 489.414 85.506 489.263 85.819 cv
489.112 86.131 489.037 86.464 489.037 86.819 cv
cp
490.068 82.241 mo
491.896 83.412 li
492.313 83.173 492.657 82.879 492.928 82.53 cv
493.199 82.181 493.334 81.793 493.334 81.366 cv
493.334 81.022 493.238 80.709 493.045 80.428 cv
492.852 80.147 492.605 79.928 492.303 79.772 cv
492 79.615 491.677 79.537 491.334 79.537 cv
491.032 79.537 490.727 79.597 490.42 79.717 cv
490.113 79.837 489.86 80.012 489.662 80.241 cv
489.464 80.47 489.365 80.74 489.365 81.053 cv
489.365 81.522 489.599 81.918 490.068 82.241 cv
f
399.494 85.5 mo
429.449 85.5 li
1 /0 /CSD get_res sepcs
.477 sep
@
0 lj
499 96.5 mo
395.5 96.5 li
395.5 37.5 li
499 37.5 li
cp
395.5 96.5 mo
cp
1 /0 /CSD get_res sepcs
.851 sep
@
73 364.5 mo
507 364.5 li
507 230.5 li
73 230.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lj
73 364.5 mo
73 230.5 li
1 /0 /CSD get_res sepcs
.127 sep
@
116.4 364.5 mo
116.4 230.5 li
@
159.8 364.5 mo
159.8 230.5 li
@
203.2 364.5 mo
203.2 230.5 li
@
246.6 364.5 mo
246.6 230.5 li
@
290 364.5 mo
290 230.5 li
@
333.4 364.5 mo
333.4 230.5 li
@
376.8 364.5 mo
376.8 230.5 li
@
420.2 364.5 mo
420.2 230.5 li
@
463.6 364.5 mo
463.6 230.5 li
@
507 364.5 mo
507 230.5 li
@
507 339.375 mo
73 339.375 li
@
507 297.5 mo
73 297.5 li
@
507 255.625 mo
73 255.625 li
@
2 lc
73 364.5 mo
507 364.5 li
1 /0 /CSD get_res sepcs
.851 sep
@
73 230.5 mo
507 230.5 li
@
73 364.5 mo
73 360.16 li
@
116.4 364.5 mo
116.4 360.16 li
@
159.8 364.5 mo
159.8 360.16 li
@
203.2 364.5 mo
203.2 360.16 li
@
246.6 364.5 mo
246.6 360.16 li
@
290 364.5 mo
290 360.16 li
@
333.4 364.5 mo
333.4 360.16 li
@
376.8 364.5 mo
376.8 360.16 li
@
420.2 364.5 mo
420.2 360.16 li
@
463.6 364.5 mo
463.6 360.16 li
@
507 364.5 mo
507 360.16 li
@
73 230.5 mo
73 234.84 li
@
116.4 230.5 mo
116.4 234.84 li
@
159.8 230.5 mo
159.8 234.84 li
@
203.2 230.5 mo
203.2 234.84 li
@
246.6 230.5 mo
246.6 234.84 li
@
290 230.5 mo
290 234.84 li
@
333.4 230.5 mo
333.4 234.84 li
@
376.8 230.5 mo
376.8 234.84 li
@
420.2 230.5 mo
420.2 234.84 li
@
463.6 230.5 mo
463.6 234.84 li
@
507 230.5 mo
507 234.84 li
@
VJOHJQ+Helvetica*1 [13 0 0 -13 0 0 ]msf69 382.1 mo(02468101214161820)[43.3979 43.3979 43.3979 43.3979 39.8983 7.22803 36.1686 7.228 36.1686 7.228 36.1686 7.228 36.1686 7.228 36.1686 7.22803 0 ]xsh275.714 400.775 mo
275.714 400.577 275.735 400.395 275.776 400.228 cv
277.229 394.478 li
275.12 394.478 li
274.985 394.478 274.917 394.389 274.917 394.212 cv
274.969 393.921 275.057 393.775 275.182 393.775 cv
277.401 393.775 li
278.198 390.509 li
278.25 390.332 278.354 390.184 278.51 390.064 cv
278.667 389.944 278.844 389.884 279.042 389.884 cv
279.209 389.884 279.349 389.934 279.464 390.033 cv
279.578 390.132 279.635 390.264 279.635 390.431 cv
279.635 390.473 279.633 390.504 279.628 390.525 cv
279.623 390.546 279.62 390.572 279.62 390.603 cv
278.823 393.775 li
280.87 393.775 li
281.016 393.775 281.089 393.864 281.089 394.041 cv
281.078 394.072 281.063 394.126 281.042 394.205 cv
281.021 394.283 280.995 394.348 280.964 394.4 cv
280.933 394.452 280.886 394.478 280.823 394.478 cv
278.635 394.478 li
277.198 400.259 li
277.104 400.634 277.057 400.963 277.057 401.244 cv
277.057 401.817 277.255 402.103 277.651 402.103 cv
278.234 402.103 278.753 401.827 279.206 401.275 cv
279.659 400.723 280.005 400.119 280.245 399.462 cv
280.297 399.379 280.349 399.337 280.401 399.337 cv
280.635 399.337 li
280.688 399.337 280.732 399.355 280.768 399.392 cv
280.805 399.429 280.823 399.473 280.823 399.525 cv
280.823 399.546 280.813 399.561 280.792 399.572 cv
280.5 400.385 280.075 401.096 279.518 401.705 cv
278.961 402.314 278.318 402.619 277.589 402.619 cv
277.068 402.619 276.625 402.447 276.26 402.103 cv
275.896 401.759 275.714 401.316 275.714 400.775 cv
f
287.394 407.4 mo
287.394 387.4 li
290.128 387.4 li
290.128 388.197 li
288.207 388.197 li
288.207 406.603 li
290.128 406.603 li
290.128 407.4 li
287.394 407.4 li
f
292.325 401.181 mo
292.689 401.796 293.408 402.103 294.481 402.103 cv
294.95 402.103 295.398 402.022 295.825 401.861 cv
296.252 401.7 296.603 401.46 296.879 401.142 cv
297.155 400.825 297.293 400.437 297.293 399.978 cv
297.293 399.634 297.168 399.35 296.918 399.126 cv
296.668 398.903 296.366 398.754 296.012 398.681 cv
294.934 398.462 li
294.434 398.337 294.025 398.106 293.707 397.767 cv
293.39 397.428 293.231 397.02 293.231 396.541 cv
293.231 395.947 293.392 395.423 293.715 394.97 cv
294.038 394.517 294.463 394.168 294.989 393.923 cv
295.515 393.678 296.059 393.556 296.621 393.556 cv
297.226 393.556 297.767 393.702 298.246 393.994 cv
298.725 394.285 298.965 394.712 298.965 395.275 cv
298.965 395.588 298.879 395.861 298.707 396.095 cv
298.536 396.33 298.299 396.447 297.996 396.447 cv
297.819 396.447 297.668 396.39 297.543 396.275 cv
297.418 396.16 297.356 396.014 297.356 395.837 cv
297.356 395.681 297.398 395.53 297.481 395.384 cv
297.564 395.239 297.681 395.122 297.832 395.033 cv
297.983 394.944 298.137 394.9 298.293 394.9 cv
298.168 394.608 297.944 394.397 297.621 394.267 cv
297.298 394.137 296.955 394.072 296.59 394.072 cv
296.247 394.072 295.906 394.142 295.567 394.283 cv
295.228 394.424 294.957 394.624 294.754 394.884 cv
294.551 395.145 294.45 395.457 294.45 395.822 cv
294.45 396.061 294.533 396.272 294.7 396.455 cv
294.867 396.637 295.075 396.764 295.325 396.837 cv
296.496 397.072 li
296.861 397.155 297.199 397.296 297.512 397.494 cv
297.825 397.692 298.069 397.942 298.246 398.244 cv
298.423 398.546 298.512 398.895 298.512 399.291 cv
298.512 399.78 298.374 400.267 298.098 400.751 cv
297.822 401.236 297.481 401.619 297.075 401.9 cv
296.366 402.379 295.496 402.619 294.465 402.619 cv
293.757 402.619 293.106 402.457 292.512 402.134 cv
291.918 401.811 291.621 401.327 291.621 400.681 cv
291.621 400.316 291.728 399.999 291.942 399.728 cv
292.155 399.457 292.444 399.322 292.809 399.322 cv
293.028 399.322 293.21 399.387 293.356 399.517 cv
293.502 399.647 293.575 399.822 293.575 400.041 cv
293.575 400.343 293.46 400.608 293.231 400.837 cv
293.002 401.066 292.736 401.181 292.434 401.181 cv
292.325 401.181 li
f
300.403 407.4 mo
300.403 406.603 li
302.356 406.603 li
302.356 388.197 li
300.403 388.197 li
300.403 387.4 li
303.153 387.4 li
303.153 407.4 li
300.403 407.4 li
f
73 364.5 mo
73 230.5 li
@
507 364.5 mo
507 230.5 li
@
73 339.375 mo
77.34 339.375 li
@
73 297.5 mo
77.34 297.5 li
@
73 255.625 mo
77.34 255.625 li
@
507 339.375 mo
502.66 339.375 li
@
507 297.5 mo
502.66 297.5 li
@
507 255.625 mo
502.66 255.625 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VJOHJQ+Helvetica gcheck setglobal} if
1 108 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>VJOHJQ+Helvetica AddT42Char 
VJOHJQ+Helvetica /CharStrings get begin
/hyphen 16 def
end
VJOHJQ+Helvetica /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VJOHJQ+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]VJOHJQ+Helvetica nfVJOHJQ+Helvetica*1 [13 0 0 -13 0 0 ]msf44.4 344.375 mo(-0.5)[4.3289 7.228 3.614 0 ]xsh60.403 302.502 mo(0)sh49.405 260.629 mo(0.5)[7.228 3.614 0 ]xsh30.901 290.519 mo
30.796 290.519 30.744 290.462 30.744 290.347 cv
30.744 290.274 30.755 290.227 30.776 290.206 cv
31.13 289.581 31.56 288.988 32.065 288.425 cv
32.57 287.862 33.142 287.295 33.783 286.722 cv
34.424 286.149 35.07 285.57 35.721 284.987 cv
36.372 284.404 36.9 283.888 37.307 283.441 cv
37.229 283.441 li
36.927 283.441 36.495 283.347 35.932 283.159 cv
35.369 282.972 34.921 282.878 34.588 282.878 cv
34.244 282.878 33.905 282.954 33.572 283.105 cv
33.239 283.256 33.025 283.493 32.932 283.816 cv
32.911 283.909 32.859 283.956 32.776 283.956 cv
32.541 283.956 li
32.437 283.956 32.385 283.888 32.385 283.753 cv
32.385 283.691 li
32.489 283.305 32.658 282.943 32.893 282.605 cv
33.127 282.266 33.419 281.99 33.768 281.776 cv
34.117 281.563 34.479 281.456 34.854 281.456 cv
35.125 281.456 35.349 281.516 35.526 281.636 cv
35.703 281.756 35.908 281.943 36.143 282.198 cv
36.377 282.453 36.567 282.636 36.713 282.745 cv
36.859 282.854 37.041 282.909 37.26 282.909 cv
37.551 282.909 37.814 282.776 38.049 282.511 cv
38.284 282.245 38.51 281.914 38.729 281.519 cv
38.77 281.477 38.822 281.456 38.885 281.456 cv
39.119 281.456 li
39.161 281.456 39.198 281.474 39.229 281.511 cv
39.26 281.548 39.276 281.592 39.276 281.644 cv
39.276 281.685 39.26 281.727 39.229 281.769 cv
38.874 282.384 38.458 282.959 37.979 283.495 cv
37.5 284.032 36.875 284.646 36.104 285.339 cv
35.333 286.032 34.682 286.618 34.151 287.097 cv
33.62 287.576 33.125 288.071 32.666 288.581 cv
32.77 288.55 32.911 288.534 33.088 288.534 cv
33.411 288.534 33.853 288.628 34.416 288.816 cv
34.979 289.003 35.411 289.097 35.713 289.097 cv
36.046 289.097 36.382 289.027 36.721 288.886 cv
37.06 288.745 37.354 288.545 37.604 288.284 cv
37.854 288.024 38.021 287.722 38.104 287.378 cv
38.135 287.284 38.187 287.237 38.26 287.237 cv
38.494 287.237 li
38.546 287.237 38.59 287.258 38.627 287.3 cv
38.664 287.341 38.682 287.388 38.682 287.441 cv
38.682 287.451 38.672 287.472 38.651 287.503 cv
38.536 288.003 38.325 288.482 38.018 288.941 cv
37.711 289.399 37.333 289.776 36.885 290.073 cv
36.437 290.37 35.958 290.519 35.447 290.519 cv
35.197 290.519 34.984 290.462 34.807 290.347 cv
34.63 290.232 34.424 290.045 34.19 289.784 cv
33.955 289.524 33.762 289.339 33.611 289.23 cv
33.46 289.121 33.276 289.066 33.057 289.066 cv
32.4 289.066 31.807 289.529 31.276 290.456 cv
31.234 290.498 31.187 290.519 31.135 290.519 cv
30.901 290.519 li
f
39.92 293.3 mo
39.92 292.925 li
39.92 292.904 39.925 292.878 39.936 292.847 cv
42.123 290.441 li
42.446 290.086 42.709 289.789 42.912 289.55 cv
43.115 289.311 43.319 289.032 43.522 288.714 cv
43.725 288.396 43.884 288.076 43.998 287.753 cv
44.113 287.43 44.17 287.087 44.17 286.722 cv
44.17 286.337 44.1 285.969 43.959 285.62 cv
43.818 285.271 43.608 284.993 43.327 284.784 cv
43.046 284.576 42.707 284.472 42.311 284.472 cv
41.905 284.472 41.54 284.594 41.217 284.839 cv
40.894 285.084 40.665 285.399 40.53 285.784 cv
40.571 285.774 40.623 285.769 40.686 285.769 cv
40.894 285.769 41.074 285.839 41.225 285.98 cv
41.376 286.121 41.452 286.3 41.452 286.519 cv
41.452 286.738 41.376 286.92 41.225 287.066 cv
41.074 287.211 40.894 287.284 40.686 287.284 cv
40.467 287.284 40.285 287.209 40.139 287.058 cv
39.993 286.907 39.92 286.727 39.92 286.519 cv
39.92 286.175 39.985 285.849 40.116 285.542 cv
40.246 285.235 40.436 284.961 40.686 284.722 cv
40.936 284.482 41.217 284.297 41.53 284.167 cv
41.842 284.037 42.17 283.972 42.514 283.972 cv
43.056 283.972 43.556 284.087 44.014 284.316 cv
44.473 284.545 44.837 284.865 45.108 285.276 cv
45.379 285.688 45.514 286.17 45.514 286.722 cv
45.514 287.128 45.423 287.513 45.241 287.878 cv
45.058 288.243 44.829 288.573 44.553 288.87 cv
44.277 289.167 43.923 289.506 43.491 289.886 cv
43.058 290.266 42.774 290.519 42.639 290.644 cv
41.045 292.159 li
42.389 292.159 li
43.056 292.159 43.61 292.154 44.053 292.144 cv
44.496 292.133 44.733 292.118 44.764 292.097 cv
44.868 291.982 44.977 291.55 45.092 290.8 cv
45.514 290.8 li
45.108 293.3 li
39.92 293.3 li
f
0 lc
73.003 297.511 mo
73.017 297.564 li
73.085 297.829 li
76.714 311.831 88.078 352.125 104.767 356.837 cv
104.984 356.894 li
105.201 356.946 li
117.912 360.32 131.533 336.986 136.883 328.396 cv
137.1 328.049 li
137.317 327.704 li
1 /0 /CSD get_res sepcs
.729 sep
@
137.317 277.383 mo
137.534 277.625 li
137.751 277.866 li
144.926 286.025 153.809 292.84 163.574 297.609 cv
163.791 297.711 li
164.008 297.812 li
164.225 297.912 li
168.252 299.765 172.462 301.144 176.811 302.003 cv
177.245 302.087 li
181.326 302.867 185.414 303.169 189.564 303.188 cv
189.636 303.201 li
189.705 303.186 li
189.773 303.18 li
189.846 302.808 li
189.911 302.809 li
190.128 302.822 li
190.345 302.867 li
190.493 303.015 li
190.608 303.001 li
190.723 303.2 li
190.843 303.142 li
191.06 303.01 li
191.277 302.683 li
191.439 302.541 li
191.555 302.658 li
191.596 302.538 li
191.636 302.575 li
191.839 302.209 li
192.03 302.265 li
192.247 302.381 li
192.317 302.477 li
192.387 302.451 li
192.448 302.14 li
192.506 302.163 li
192.723 302.31 li
192.891 302.778 li
193.059 302.651 li
193.18 302.528 li
193.267 302.366 li
193.293 302.821 li
193.318 302.806 li
193.447 302.726 li
193.664 302.572 li
193.881 302.348 li
194.098 301.942 li
194.299 302.212 li
194.463 302.838 li
194.594 302.771 li
194.928 302.594 195.622 302.22 195.741 301.852 cv
195.803 301.381 li
195.86 301.426 li
195.935 301.504 li
195.976 301.569 li
196.017 301.808 li
196.047 301.981 li
196.077 301.943 li
196.153 301.812 li
196.177 301.738 li
196.2 301.608 li
196.225 301.24 li
196.247 301.254 li
196.358 301.34 li
196.473 301.499 li
196.588 301.203 li
196.712 301.309 li
196.846 301.627 li
196.851 301.603 li
196.854 301.576 li
196.858 301.523 li
196.861 301.598 li
196.865 301.559 li
196.87 301.515 li
196.875 301.606 li
196.879 301.579 li
196.883 301.563 li
196.886 301.573 li
196.891 301.504 li
196.898 301.577 li
196.907 301.862 li
196.915 301.853 li
196.956 301.801 li
197.015 301.709 li
197.043 301.651 li
197.07 301.548 li
197.089 301.552 li
197.109 301.636 li
197.134 301.544 li
197.158 301.566 li
197.183 301.453 li
197.192 301.386 li
197.202 301.424 li
197.236 301.373 li
197.249 301.428 li
197.262 301.708 li
197.275 301.688 li
197.339 301.535 li
197.399 301.583 li
197.42 301.511 li
197.442 301.395 li
197.462 301.374 li
197.482 301.59 li
197.505 301.528 li
197.59 301.691 li
197.658 301.583 li
197.709 301.419 li
197.76 301.149 li
197.831 301.307 li
197.843 301.326 li
197.854 301.196 li
197.867 301.224 li
197.888 301.29 li
197.909 301.405 li
197.929 301.495 li
197.951 301.428 li
197.959 301.379 li
197.967 301.511 li
197.976 301.489 li
197.999 301.418 li
198.007 301.367 li
198.015 301.415 li
198.021 301.384 li
198.024 301.359 li
198.027 301.32 li
198.028 301.305 li
198.03 301.37 li
198.031 301.352 li
198.036 301.351 li
198.042 301.345 li
198.045 301.335 li
198.049 301.536 li
198.052 301.53 li
198.07 301.494 li
198.101 301.41 li
198.11 301.362 li
198.119 301.271 li
198.13 301.608 li
198.141 301.593 li
198.193 301.512 li
198.41 300.95 li
198.512 301.086 li
198.54 301.161 li
198.568 301.271 li
198.576 301.302 li
198.58 301.278 li
198.582 301.251 li
198.584 301.255 li
198.586 301.289 li
198.588 301.277 li
198.589 301.258 li
198.601 301.256 li
198.606 301.257 li
198.612 301.268 li
198.618 301.141 li
198.627 301.182 li
198.65 301.163 li
198.672 301.562 li
198.692 301.538 li
198.792 301.381 li
198.939 301.018 li
198.97 301.121 li
198.994 301.094 li
199.018 301.248 li
199.023 301.219 li
199.027 301.185 li
199.031 301.309 li
199.036 301.298 li
199.058 301.216 li
199.1 301.211 li
199.134 301.263 li
199.146 301.216 li
199.152 301.176 li
199.159 301.098 li
199.167 301.264 li
199.176 301.232 li
199.224 300.896 li
199.275 300.992 li
199.405 300.809 li
199.547 301.179 li
199.638 301.269 li
199.671 301.197 li
199.689 301.138 li
199.695 301.106 li
199.699 301.07 li
199.702 301.077 li
199.707 300.497 li
199.71 300.499 li
199.727 300.509 li
199.814 300.563 li
200.031 300.761 li
200.096 300.892 li
200.161 300.356 li
200.215 300.383 li
200.432 300.517 li
200.649 300.773 li
200.799 300.5 li
200.949 300.67 li
200.986 300.752 li
200.999 300.809 li
201.013 300.922 li
201.029 300.72 li
201.048 300.785 li
201.096 300.735 li
201.109 300.786 li
201.114 300.827 li
201.118 300.824 li
201.123 300.809 li
201.129 300.873 li
201.135 300.886 li
201.143 300.799 li
201.152 300.951 li
201.164 300.894 li
201.193 300.903 li
201.205 300.886 li
201.217 300.734 li
201.229 300.802 li
201.238 300.795 li
201.246 300.722 li
201.258 300.786 li
201.274 300.767 li
201.29 301.001 li
201.307 300.959 li
201.391 300.657 li
201.407 300.701 li
201.415 300.74 li
201.42 300.776 li
201.424 300.698 li
201.43 300.721 li
201.458 300.935 li
201.472 300.889 li
201.479 300.852 li
201.482 300.831 li
201.484 300.728 li
201.487 300.745 li
201.491 300.895 li
201.495 300.879 li
201.502 300.838 li
201.509 300.805 li
201.512 300.828 li
201.513 300.806 li
201.515 300.705 li
201.517 300.716 li
201.521 300.737 li
201.523 300.76 li
201.525 300.779 li
201.527 300.83 li
201.531 300.746 li
201.535 300.744 li
201.538 300.679 li
201.542 300.695 li
201.55 300.74 li
201.558 300.847 li
201.577 300.7 li
201.601 300.823 li
201.623 300.84 li
201.644 300.66 li
201.732 300.49 li
201.789 300.583 li
201.821 300.694 li
201.843 300.669 li
201.865 300.835 li
201.874 300.791 li
201.883 300.771 li
201.89 300.451 li
201.897 300.46 li
201.932 300.51 li
201.99 300.665 li
202.01 300.529 li
202.029 300.571 li
202.125 301.099 li
202.215 300.99 li
202.332 300.744 li
202.391 300.765 li
202.451 300.196 li
202.503 300.236 li
202.616 300.35 li
202.664 300.421 li
202.712 300.559 li
202.743 300.548 li
202.773 300.484 li
202.784 300.523 li
202.795 300.641 li
202.81 300.638 li
202.824 300.643 li
202.838 300.793 li
202.852 300.76 li
202.878 300.681 li
202.887 300.625 li
202.896 300.716 li
202.908 300.673 li
202.963 300.807 li
203.026 300.637 li
203.069 300.668 li
203.077 300.632 li
203.085 300.545 li
203.097 300.732 li
203.111 300.695 li
203.124 300.65 li
203.133 300.605 li
203.141 300.574 li
203.147 300.573 li
203.152 300.571 li
203.157 300.564 li
203.162 300.536 li
203.166 300.574 li
203.171 300.639 li
203.177 300.607 li
203.206 300.667 li
203.218 300.623 li
203.229 300.462 li
203.234 300.492 li
203.239 300.455 li
203.243 300.475 li
203.263 301.006 li
203.28 300.989 li
203.364 300.899 li
203.443 300.796 li
203.523 300.647 li
203.7 300.838 li
203.789 300.718 li
203.877 300.492 li
203.908 300.482 li
203.927 300.499 li
203.946 300.29 li
203.97 300.387 li
203.987 300.38 li
204.004 300.338 li
204.012 300.383 li
204.019 300.569 li
204.027 300.545 li
204.042 300.482 li
204.057 300.391 li
204.062 300.359 li
204.065 300.385 li
204.067 300.374 li
204.069 300.411 li
204.071 300.357 li
204.074 300.378 li
204.086 300.356 li
204.098 300.447 li
204.111 300.456 li
204.12 300.346 li
204.129 300.323 li
204.137 300.368 li
204.153 300.372 li
204.163 300.365 li
204.173 300.293 li
204.193 300.514 li
204.21 300.416 li
204.226 300.291 li
204.238 300.357 li
204.25 300.344 li
204.259 300.419 li
204.268 300.42 li
204.276 300.444 li
204.284 300.467 li
204.291 300.412 li
204.298 300.418 li
204.305 300.782 li
204.311 300.775 li
204.34 300.74 li
204.489 300.486 li
204.615 300.653 li
204.713 300.478 li
204.811 300.146 li
204.839 300.232 li
204.868 300.532 li
204.897 300.471 li
204.924 300.388 li
204.932 300.34 li
204.94 300.231 li
204.956 300.327 li
204.968 300.333 li
204.979 300.429 li
204.995 300.375 li
205.051 300.485 li
205.121 300.142 li
205.198 300.565 li
205.276 300.429 li
205.493 300.863 li
205.696 300.694 li
205.913 300.455 li
205.977 300.348 li
206 300.295 li
206.023 300.213 li
206.072 300.231 li
206.114 299.909 li
206.161 300.01 li
206.269 299.882 li
206.313 299.967 li
206.338 300.067 li
206.349 300.001 li
206.36 300.055 li
206.384 300.051 li
206.405 300.012 li
206.413 300.064 li
206.422 300.017 li
206.428 300.056 li
206.434 300.119 li
206.44 300.12 li
206.447 300.136 li
206.454 300.063 li
206.462 300.05 li
206.47 300.324 li
206.479 300.31 li
206.52 300.215 li
206.644 300.441 li
206.821 300.119 li
206.871 300.15 li
206.922 299.944 li
206.958 300.206 li
206.994 300.089 li
207.032 300.127 li
207.043 300.069 li
207.055 299.947 li
207.068 299.949 li
207.081 299.977 li
207.091 299.932 li
207.105 299.781 li
207.118 299.802 li
207.149 299.866 li
207.167 299.927 li
207.174 299.975 li
207.18 299.959 li
207.188 300.038 li
207.197 300.14 li
207.208 300.104 li
207.263 299.589 li
207.312 299.632 li
207.529 300.198 li
207.565 300.125 li
207.6 299.98 li
207.63 299.747 li
207.673 299.849 li
207.717 300.068 li
207.728 300.028 li
207.735 299.987 li
207.74 300.024 li
207.745 299.997 li
207.769 300.077 li
207.793 299.98 li
207.816 299.972 li
207.831 299.981 li
207.842 299.874 li
207.85 299.85 li
207.857 299.905 li
207.861 299.886 li
207.866 299.868 li
207.869 299.899 li
207.878 299.903 li
207.882 299.885 li
207.887 299.884 li
207.89 299.853 li
207.894 299.872 li
207.905 299.971 li
207.916 299.804 li
207.93 299.861 li
207.964 299.839 li
207.994 300.228 li
208.022 300.189 li
208.102 300.031 li
208.183 299.617 li
208.272 299.787 li
208.346 299.672 li
208.397 299.812 li
208.424 299.755 li
208.433 299.79 li
208.438 299.82 li
208.443 299.799 li
208.447 299.831 li
208.459 299.828 li
208.47 299.81 li
208.482 299.919 li
208.497 299.796 li
208.515 299.968 li
208.523 299.931 li
208.528 299.904 li
208.531 299.87 li
208.534 299.868 li
208.536 299.868 li
208.538 299.867 li
208.54 299.864 li
208.542 299.848 li
208.544 300.025 li
208.546 300.02 li
208.557 299.993 li
208.576 299.927 li
208.583 299.877 li
208.59 299.896 li
208.592 299.866 li
208.595 299.901 li
208.598 299.876 li
208.601 299.856 li
208.603 299.833 li
208.605 299.84 li
208.608 299.911 li
208.612 299.883 li
208.625 299.896 li
208.639 299.629 li
208.653 299.653 li
208.686 299.731 li
208.698 299.787 li
208.71 299.993 li
208.724 299.956 li
208.791 299.641 li
208.824 299.722 li
208.836 299.779 li
208.847 299.469 li
208.858 299.479 li
208.912 299.537 li
209.045 299.935 li
209.179 300.133 li
209.386 299.493 li
209.464 299.627 li
209.542 299.958 li
209.582 299.866 li
209.596 299.81 li
209.602 299.764 li
209.607 299.766 li
209.613 299.791 li
209.621 299.782 li
209.623 299.761 li
209.625 299.733 li
209.626 299.821 li
209.629 299.81 li
209.633 299.785 li
209.637 299.727 li
209.644 299.952 li
209.652 299.937 li
209.691 299.837 li
209.787 299.927 li
209.819 299.856 li
209.837 299.792 li
209.844 299.743 li
209.851 299.766 li
209.86 299.734 li
209.865 299.734 li
209.871 299.735 li
209.876 299.744 li
209.882 299.414 li
209.888 299.421 li
209.916 299.455 li
209.988 299.591 li
210.01 299.81 li
210.031 299.659 li
210.044 299.624 li
210.053 299.782 li
210.062 299.725 li
210.072 299.732 li
210.082 300.091 li
210.092 300.082 li
210.137 300.03 li
210.261 299.836 li
210.385 299.436 li
210.432 299.526 li
210.449 299.586 li
210.455 299.634 li
210.458 299.63 li
210.462 299.589 li
210.465 299.611 li
210.468 299.643 li
210.47 299.678 li
210.473 299.642 li
210.475 299.683 li
210.479 299.659 li
210.482 299.616 li
210.485 299.637 li
210.489 299.658 li
210.492 299.612 li
210.496 299.618 li
210.499 299.659 li
210.503 299.624 li
210.507 299.544 li
210.511 299.561 li
210.52 299.612 li
210.529 299.549 li
210.545 299.707 li
210.565 299.486 li
210.589 299.551 li
210.656 299.451 li
210.684 299.513 li
210.698 299.571 li
210.713 299.667 li
210.727 299.688 li
210.743 299.592 li
210.757 299.603 li
210.769 299.652 li
210.779 299.65 li
210.789 299.648 li
210.798 299.647 li
210.806 299.645 li
210.814 299.645 li
210.822 299.651 li
210.83 299.762 li
210.839 299.736 li
210.855 299.668 li
210.871 299.362 li
210.887 299.383 li
210.923 299.445 li
210.96 299.576 li
210.993 299.714 li
211.004 299.666 li
211.016 299.668 li
211.021 299.629 li
211.027 299.405 li
211.032 299.415 li
211.059 299.474 li
211.168 299.187 li
211.283 299.293 li
211.347 299.381 li
211.411 299.602 li
211.478 299.29 li
211.577 299.48 li
211.627 299.436 li
211.636 299.469 li
211.642 299.503 li
211.648 299.533 li
211.653 299.574 li
211.654 299.5 li
211.656 299.515 li
211.665 299.502 li
211.673 299.677 li
211.684 299.646 li
211.734 299.402 li
211.755 299.47 li
211.775 299.634 li
211.849 299.913 li
211.923 299.827 li
212.054 299.561 li
212.185 299.273 li
212.224 299.343 li
212.264 299.584 li
212.307 299.387 li
212.353 299.642 li
212.389 299.516 li
212.411 299.505 li
212.419 299.651 li
212.427 299.635 li
212.465 299.494 li
212.498 299.328 li
212.523 299.427 li
212.532 299.293 li
212.54 299.31 li
212.582 299.555 li
212.63 299.298 li
212.758 299.884 li
212.874 299.764 li
213 299.572 li
213.126 299.066 li
213.256 299.225 li
213.473 298.673 li
213.654 298.749 li
213.871 298.858 li
214.088 299.009 li
214.305 299.434 li
214.396 299.651 li
214.487 299.528 li
214.704 299.116 li
214.882 299.874 li
215.03 299.761 li
215.247 299.555 li
215.339 299.426 li
215.384 299.321 li
215.429 299.131 li
215.475 299.449 li
215.524 299.36 li
215.697 299.688 li
215.872 299.528 li
215.969 299.409 li
216.019 299.32 li
216.052 299.219 li
216.084 299.249 li
216.092 299.208 li
216.101 299.175 li
216.108 299.142 li
216.113 299.15 li
216.117 299.24 li
216.125 299.199 li
216.146 299.203 li
216.165 299.278 li
216.195 299.109 li
216.217 299.09 li
216.239 299.357 li
216.261 299.317 li
216.292 299.238 li
216.304 299.181 li
216.315 299.29 li
216.329 299.254 li
216.4 298.91 li
216.482 299.086 li
216.554 299.222 li
216.598 299.059 li
216.643 299.024 li
216.651 299.054 li
216.656 299.089 li
216.661 299.283 li
216.667 299.271 li
216.695 299.192 li
216.761 299.222 li
216.819 299.045 li
216.868 299.044 li
216.908 299.021 li
216.944 299.325 li
216.981 299.262 li
217.038 299.002 li
217.096 298.414 li
217.142 298.432 li
217.359 298.522 li
217.576 298.636 li
217.793 298.808 li
217.862 298.907 li
217.886 298.972 li
217.894 299.022 li
217.902 299.029 li
217.909 299.061 li
217.911 298.617 li
217.914 298.619 li
217.925 298.625 li
217.979 298.661 li
218.196 298.885 li
218.413 298.74 li
218.479 298.816 li
218.526 298.904 li
218.551 299.13 li
218.575 299.036 li
218.586 299.055 li
218.59 299.022 li
218.593 299.041 li
218.599 299.025 li
218.604 299.055 li
218.606 299.038 li
218.608 299.02 li
218.609 298.997 li
218.611 299.045 li
218.615 298.981 li
218.622 298.986 li
218.628 299.012 li
218.633 298.971 li
218.636 298.967 li
218.637 298.981 li
218.638 298.983 li
218.639 298.984 li
218.64 298.994 li
218.641 299.008 li
218.642 299.004 li
218.644 298.976 li
218.645 298.975 li
218.647 298.96 li
218.649 298.976 li
218.656 298.972 li
218.663 298.942 li
218.667 298.968 li
218.67 298.928 li
218.672 298.94 li
218.685 298.966 li
218.696 298.943 li
218.7 298.975 li
218.704 298.936 li
218.707 298.956 li
218.71 299.017 li
218.717 299.02 li
218.724 299.053 li
218.727 299.032 li
218.731 298.922 li
218.734 298.936 li
218.738 298.969 li
218.743 298.851 li
218.748 298.862 li
218.775 298.951 li
218.79 298.878 li
218.805 298.926 li
218.849 298.877 li
218.866 298.937 li
218.878 299.025 li
218.883 299.043 li
218.889 299.003 li
218.894 299.008 li
218.899 299.114 li
218.906 299.098 li
218.926 299.02 li
218.946 299.024 li
218.964 299.115 li
218.992 299.023 li
219.019 299.039 li
219.046 298.727 li
219.073 298.758 li
219.137 298.871 li
219.186 299.033 li
219.234 299.106 li
219.265 299.014 li
219.295 299.115 li
219.349 298.886 li
219.41 298.883 li
219.46 298.836 li
219.493 298.646 li
219.527 298.677 li
219.633 298.828 li
219.739 298.553 li
219.847 298.634 li
219.95 298.751 li
219.985 298.823 li
219.998 298.878 li
220.011 298.798 li
220.03 298.86 li
220.07 298.853 li
220.105 298.771 li
220.135 298.862 li
220.166 298.861 li
220.192 298.85 li
220.216 298.539 li
220.238 298.555 li
220.35 298.649 li
220.417 298.735 li
220.44 298.78 li
220.452 298.816 li
220.465 298.906 li
220.492 298.255 li
220.52 298.265 li
220.659 298.319 li
220.876 298.417 li
221.093 298.551 li
221.186 298.638 li
221.237 298.708 li
221.288 298.918 li
221.337 298.959 li
221.355 298.896 li
221.36 298.815 li
221.363 298.789 li
221.367 298.809 li
221.385 298.779 li
221.392 298.824 li
221.4 298.824 li
221.407 298.826 li
221.412 298.827 li
221.418 298.832 li
221.423 298.861 li
221.428 298.854 li
221.432 298.816 li
221.438 298.947 li
221.444 298.928 li
221.455 298.875 li
221.466 298.927 li
221.478 298.863 li
221.486 298.861 li
221.494 298.855 li
221.501 298.83 li
221.506 298.931 li
221.515 298.899 li
221.556 298.955 li
221.571 298.91 li
221.577 298.881 li
221.581 298.857 li
221.584 298.808 li
221.588 298.978 li
221.593 298.967 li
221.618 298.895 li
221.673 298.902 li
221.72 299.306 li
221.761 299.275 li
221.968 299.092 li
222.018 299.033 li
222.068 298.957 li
222.236 298.323 li
222.403 298.412 li
222.62 298.598 li
222.837 299.204 li
223.037 299.03 li
223.13 298.913 li
223.185 298.775 li
223.205 298.823 li
223.225 298.691 li
223.251 298.694 li
223.274 298.703 li
223.28 298.63 li
223.287 298.648 li
223.294 298.675 li
223.301 298.794 li
223.307 298.76 li
223.325 298.76 li
223.342 298.773 li
223.359 298.538 li
223.378 298.563 li
223.406 298.614 li
223.434 298.743 li
223.479 298.452 li
223.532 298.502 li
223.598 298.598 li
223.616 298.647 li
223.634 298.671 li
223.649 298.491 li
223.664 298.508 li
223.741 298.648 li
223.775 298.521 li
223.809 298.573 li
223.978 298.165 li
224.126 298.227 li
224.343 298.34 li
224.56 298.542 li
224.777 298.385 li
224.935 298.587 li
224.94 298.611 li
224.946 298.714 li
224.952 298.679 li
224.96 298.679 li
224.969 298.676 li
224.978 298.666 li
224.985 298.614 li
224.991 298.575 li
224.997 298.596 li
225.018 298.699 li
225.039 298.89 li
225.061 298.863 li
225.114 298.781 li
225.131 298.742 li
225.148 298.671 li
225.157 298.696 li
225.164 298.604 li
225.171 298.614 li
225.178 298.724 li
225.186 298.692 li
225.218 298.721 li
225.225 298.693 li
225.233 298.579 li
225.24 298.622 li
225.25 298.651 li
225.259 298.581 li
225.27 298.444 li
225.279 298.454 li
225.324 298.521 li
225.475 298.289 li
225.642 298.418 li
225.708 298.511 li
225.73 298.581 li
225.752 298.567 li
225.774 299.13 li
225.793 299.118 li
225.884 299.057 li
226.101 298.883 li
226.25 298.675 li
226.352 298.761 li
226.397 298.681 li
226.414 298.629 li
226.431 298.559 li
226.445 298.619 li
226.459 298.49 li
226.471 298.531 li
226.482 298.602 li
226.495 298.62 li
226.509 298.551 li
226.519 298.56 li
226.528 298.658 li
226.536 298.631 li
226.542 298.602 li
226.546 298.614 li
226.551 298.574 li
226.555 298.788 li
226.559 298.783 li
226.579 298.757 li
226.645 298.628 li
226.711 298.631 li
226.766 298.798 li
226.831 298.714 li
226.868 298.643 li
226.882 298.593 li
226.896 298.455 li
226.914 298.52 li
226.93 298.521 li
226.945 298.532 li
226.958 298.583 li
226.971 298.815 li
226.984 298.801 li
227.048 298.726 li
227.265 298.385 li
227.451 299.064 li
227.608 298.969 li
227.825 298.81 li
227.911 298.728 li
227.998 298.611 li
228.207 298.715 li
228.284 298.619 li
228.324 298.53 li
228.365 298.951 li
228.4 298.929 li
228.576 298.809 li
228.793 298.598 li
228.961 298.34 li
229.129 298.321 li
229.264 297.822 li
229.375 297.853 li
229.592 297.919 li
229.809 297.996 li
230.026 298.096 li
230.243 298.27 li
230.286 298.375 li
230.329 298.493 li
230.346 298.442 li
230.364 298.303 li
230.378 298.339 li
230.388 298.459 li
230.396 298.427 li
230.403 298.38 li
230.408 298.386 li
230.413 298.424 li
230.42 298.381 li
230.427 298.399 li
230.432 298.809 li
230.437 298.806 li
230.46 298.791 li
230.574 298.709 li
230.791 298.469 li
230.932 298.524 li
230.975 298.445 li
230.991 298.379 li
231.006 298.284 li
231.028 298.385 li
231.058 298.292 li
231.07 298.336 li
231.081 298.319 li
231.095 298.379 li
231.107 298.348 li
231.118 298.396 li
231.129 298.272 li
231.144 298.313 li
231.185 298.298 li
231.214 298.413 li
231.244 298.177 li
231.276 298.212 li
231.304 298.253 li
231.319 298.286 li
231.334 298.402 li
231.352 298.332 li
231.358 298.315 li
231.364 298.288 li
231.37 298.307 li
231.397 298.219 li
231.438 298.301 li
231.481 298.283 li
231.524 298.832 li
231.561 298.811 li
231.743 298.699 li
231.96 298.519 li
232.03 298.423 li
232.051 298.368 li
232.073 298.266 li
232.099 298.557 li
232.124 298.533 li
232.182 298.466 li
232.24 298.346 li
232.265 298.364 li
232.29 298.279 li
232.307 298.276 li
232.324 298.259 li
232.343 298.345 li
232.364 298.489 li
232.388 298.46 li
232.468 298.231 li
232.548 298.147 li
232.595 298.217 li
232.611 298.27 li
232.626 298.275 li
232.635 298.279 li
232.642 298.286 li
232.649 298.353 li
232.66 298.277 li
232.677 298.334 li
232.695 298.091 li
232.713 298.106 li
232.803 298.228 li
232.878 298.199 li
232.952 298.44 li
233.008 298.338 li
233.063 298.383 li
233.086 298.327 li
233.108 298.197 li
233.124 298.243 li
233.139 298.097 li
233.156 298.113 li
233.203 298.17 li
233.216 298.194 li
233.229 298.23 li
233.268 298.211 li
233.307 298.421 li
233.352 298.344 li
233.459 298.365 li
233.555 298.057 li
233.663 298.174 li
233.797 298.097 li
233.839 298.148 li
233.881 298.31 li
233.943 298.341 li
233.961 298.29 li
233.98 297.959 li
233.997 297.967 li
234.084 298.017 li
234.243 298.189 li
234.297 298.141 li
234.335 298.314 li
234.349 298.269 li
234.362 298.371 li
234.378 298.346 li
234.403 298.287 li
234.428 298.143 li
234.446 298.182 li
234.464 298.196 li
234.479 298.301 li
234.505 298.293 li
234.526 298.283 li
234.54 298.301 li
234.553 298.241 li
234.566 297.917 li
234.579 297.923 li
234.64 297.952 li
234.857 298.116 li
235.074 297.969 li
235.177 298.038 li
235.252 298.12 li
235.289 298.347 li
235.326 298.281 li
235.421 298.3 li
235.507 297.991 li
235.598 298.065 li
235.815 298.448 li
235.984 298.241 li
236.154 298.081 li
236.258 298.239 li
236.328 298.257 li
236.398 297.903 li
236.465 297.937 li
236.578 298.015 li
236.653 298.116 li
236.727 298.102 li
236.778 298.282 li
236.83 298.057 li
236.85 298.09 li
236.863 298.121 li
236.875 298.125 li
236.887 298.137 li
236.897 298.569 li
236.905 298.564 li
236.949 298.54 li
237.166 298.397 li
237.383 298.109 li
237.564 298.533 li
237.76 298.415 li
237.977 298.213 li
238.141 298.312 li
238.252 298.168 li
238.331 298.191 li
238.409 297.99 li
238.487 297.78 li
238.565 297.809 li
238.782 297.917 li
238.905 298.061 li
239.028 298.212 li
239.064 298.15 li
239.1 298.052 li
239.136 298.032 li
239.173 298.145 li
239.217 297.777 li
239.258 297.791 li
239.459 297.884 li
239.581 297.985 li
239.704 298.285 li
239.84 298.113 li
239.967 297.979 li
240.08 298.265 li
240.207 298.098 li
240.323 297.956 li
240.363 298.034 li
240.378 298.015 li
240.394 298.031 li
240.407 297.942 li
240.424 297.961 li
240.454 298.018 li
240.485 297.937 li
240.528 297.998 li
240.623 297.984 li
240.708 297.461 li
240.778 297.473 li
241.206 297.565 241.953 297.661 242.297 297.919 cv
242.514 298.275 li
242.626 298.184 li
242.702 298.074 li
242.757 298.082 li
242.812 298.261 li
242.871 298.218 li
242.97 298.115 li
243.07 297.957 li
243.162 297.859 li
243.249 297.943 li
243.319 298.087 li
243.388 297.9 li
243.441 297.991 li
243.494 298.111 li
243.532 298.024 li
243.571 297.811 li
243.615 297.836 li
243.832 297.503 li
244.049 297.546 li
244.339 297.61 244.789 297.692 245.034 297.858 cv
245.11 297.947 li
245.186 297.933 li
245.242 298.127 li
245.298 298.051 li
245.415 298.039 li
245.487 298.063 li
245.559 297.928 li
245.631 297.777 li
245.709 297.818 li
245.831 297.945 li
245.954 298.039 li
246.055 298.071 li
246.09 297.998 li
246.112 297.993 li
246.125 297.998 li
246.137 298.244 li
246.15 298.236 li
246.21 298.198 li
246.328 298.108 li
246.377 298.052 li
246.406 297.988 li
246.423 297.995 li
246.436 297.941 li
246.448 297.891 li
246.468 297.932 li
246.509 297.943 li
246.542 297.992 li
246.573 297.992 li
246.602 298.002 li
246.633 297.577 li
246.661 297.583 li
246.797 297.616 li
247.014 297.675 li
247.231 297.754 li
247.318 297.798 li
247.405 297.868 li
247.622 297.778 li
247.728 297.852 li
247.766 297.909 li
247.804 297.833 li
247.86 297.904 li
247.923 297.891 li
247.987 297.336 li
248.038 297.344 li
248.558 297.447 249.654 297.553 250.062 297.844 cv
250.092 297.883 li
250.123 297.864 li
250.148 297.914 li
250.175 297.911 li
250.202 297.889 li
250.218 297.974 li
250.233 297.922 li
250.243 297.92 li
250.253 297.897 li
250.268 297.875 li
250.281 297.901 li
250.328 297.882 li
250.378 298.014 li
250.458 297.887 li
250.532 297.855 li
250.548 297.88 li
250.56 297.911 li
250.571 297.846 li
250.586 297.866 li
250.663 298.06 li
250.724 297.98 li
250.784 298.097 li
250.858 298.029 li
251.032 297.606 li
251.206 297.653 li
251.423 297.73 li
251.542 297.795 li
251.596 297.845 li
251.617 297.881 li
251.638 297.939 li
251.66 297.929 li
251.678 297.864 li
251.691 297.905 li
251.705 297.931 li
251.714 297.926 li
251.723 297.894 li
251.734 297.665 li
251.744 297.668 li
251.796 297.685 li
252.013 297.786 li
252.082 297.853 li
252.152 298.176 li
252.218 298.138 li
252.435 297.938 li
252.615 297.727 li
252.832 297.965 li
252.976 297.987 li
253.121 297.685 li
253.269 297.752 li
253.344 297.809 li
253.373 297.855 li
253.403 297.586 li
253.431 297.592 li
253.569 297.629 li
253.786 297.701 li
253.891 297.753 li
253.959 297.806 li
253.985 297.847 li
254.012 297.949 li
254.058 297.913 li
254.096 297.911 li
254.131 297.903 li
254.152 297.893 li
254.174 297.817 li
254.186 297.836 li
254.194 297.861 li
254.203 298.094 li
254.212 298.089 li
254.255 298.061 li
254.364 297.971 li
254.422 297.758 li
254.479 297.81 li
254.635 297.761 li
254.696 297.824 li
254.758 297.583 li
254.816 297.598 li
255.033 297.661 li
255.25 297.765 li
255.467 298.039 li
255.549 297.976 li
255.605 297.905 li
255.661 298.011 li
255.73 297.95 li
255.947 298.21 li
256.158 298.116 li
256.375 297.994 li
256.445 297.938 li
256.515 297.752 li
256.55 297.795 li
256.585 297.902 li
256.603 297.871 li
256.621 297.843 li
256.636 297.787 li
256.649 297.822 li
256.659 297.83 li
256.669 297.798 li
256.679 297.868 li
256.683 297.855 li
256.685 297.847 li
256.686 297.945 li
256.688 297.944 li
256.694 297.938 li
256.727 297.901 li
256.889 297.94 li
256.947 297.868 li
257.005 297.889 li
257.068 297.79 li
257.131 297.775 li
257.195 298.17 li
257.254 298.146 li
257.858 297.929 257.629 297.749 258.046 297.748 cv
258.093 297.743 li
258.119 297.791 li
258.146 297.817 li
258.168 297.762 li
258.197 297.775 li
258.215 297.83 li
258.234 298.074 li
258.252 298.066 li
258.341 298.023 li
258.558 297.88 li
258.775 298.031 li
258.992 297.907 li
259.028 297.877 li
259.064 297.835 li
259.175 297.834 li
259.275 297.866 li
259.298 297.84 li
259.315 297.809 li
259.331 297.743 li
259.363 297.798 li
259.394 297.766 li
259.421 297.792 li
259.444 297.737 li
259.474 297.744 li
259.501 297.788 li
259.523 297.651 li
259.55 297.663 li
259.684 297.805 li
259.864 297.543 li
260.055 297.591 li
260.272 297.674 li
260.337 297.725 li
260.401 297.871 li
260.449 297.818 li
260.496 297.688 li
260.525 297.712 li
260.553 297.766 li
260.577 297.698 li
260.605 297.726 li
260.707 297.692 li
260.75 297.741 li
260.793 297.718 li
260.809 297.743 li
260.824 297.785 li
260.841 297.778 li
260.857 297.735 li
260.878 297.756 li
260.89 297.761 li
260.902 297.799 li
260.915 297.801 li
260.925 297.753 li
260.934 297.727 li
260.958 297.71 li
260.982 297.751 li
260.996 297.738 li
261.01 297.743 li
261.024 297.782 li
261.039 297.775 li
261.053 297.726 li
261.061 297.74 li
261.063 297.748 li
261.066 297.768 li
261.068 297.777 li
261.072 297.902 li
261.076 297.899 li
261.097 297.885 li
261.15 297.841 li
261.17 297.817 li
261.185 297.788 li
261.199 297.701 li
261.219 297.724 li
261.304 297.692 li
261.34 297.738 li
261.377 297.733 li
261.415 297.682 li
261.456 297.721 li
261.496 297.797 li
261.544 297.872 li
261.61 297.806 li
261.712 297.822 li
261.815 297.615 li
261.927 297.666 li
262.144 297.816 li
262.341 297.811 li
262.511 297.825 li
262.675 297.382 li
263.032 297.438 li
263.249 297.474 li
263.466 297.514 li
263.683 297.562 li
263.9 297.63 li
264.016 297.707 li
264.131 297.706 li
264.236 297.696 li
264.341 297.452 li
264.439 297.468 li
264.656 297.507 li
264.873 297.553 li
265.09 297.618 li
265.208 297.681 li
265.325 297.842 li
265.542 297.656 li
265.759 297.836 li
265.976 297.657 li
266.193 298.037 li
266.394 297.96 li
266.611 297.857 li
266.733 297.755 li
266.788 297.806 li
266.843 297.74 li
266.913 297.69 li
266.979 297.692 li
267.04 297.701 li
267.092 297.739 li
267.127 297.736 li
267.154 297.731 li
267.181 297.709 li
267.203 297.933 li
267.225 297.923 li
267.339 297.871 li
267.458 297.8 li
267.504 297.757 li
267.518 297.732 li
267.532 297.679 li
267.56 297.73 li
267.591 297.721 li
267.619 297.679 li
267.651 297.786 li
267.694 297.737 li
267.747 297.734 li
267.8 297.724 li
267.846 297.687 li
267.89 297.695 li
267.926 297.744 li
267.968 297.66 li
268.03 297.729 li
268.063 297.74 li
268.095 297.688 li
268.118 297.691 li
268.134 297.694 li
268.151 297.712 li
268.167 297.678 li
268.187 297.717 li
268.203 297.711 li
268.219 297.662 li
268.23 297.679 li
268.242 297.68 li
268.253 297.687 li
268.261 297.713 li
268.269 297.71 li
268.278 297.693 li
268.287 297.697 li
268.297 297.732 li
268.311 297.737 li
268.325 297.69 li
268.339 297.695 li
268.353 297.731 li
268.365 297.762 li
268.378 297.748 li
268.442 297.633 li
268.549 297.635 li
268.582 297.665 li
268.593 297.686 li
268.604 297.652 li
268.621 297.674 li
268.677 297.669 li
268.736 297.63 li
268.783 297.676 li
268.83 297.676 li
268.877 297.68 li
268.905 297.682 li
268.934 297.688 li
268.958 297.731 li
268.989 297.682 li
269.005 297.675 li
269.021 297.725 li
269.049 297.621 li
269.084 297.645 li
269.254 297.576 li
269.471 297.76 li
269.688 297.818 li
269.817 297.714 li
269.947 297.628 li
270.087 297.76 li
270.268 297.443 li
270.433 297.469 li
270.808 297.493 270.976 297.642 271.183 297.67 cv
271.231 297.7 li
271.272 297.662 li
271.314 297.658 li
271.36 297.62 li
271.466 297.633 li
271.552 297.7 li
271.625 297.634 li
271.708 297.718 li
271.797 297.727 li
271.89 298.313 li
271.965 298.292 li
272.182 298.233 li
272.833 298.053 li
273.05 297.991 li
273.267 297.927 li
273.484 297.858 li
273.701 297.782 li
273.918 297.669 li
274.073 297.66 li
274.182 297.652 li
274.209 297.611 li
274.235 297.598 li
274.273 297.632 li
274.305 297.767 li
274.338 297.754 li
274.502 297.663 li
274.654 297.654 li
274.753 297.648 li
274.829 297.639 li
274.905 297.607 li
274.973 297.631 li
275.029 297.543 li
275.109 297.576 li
275.326 297.518 li
275.473 297.561 li
275.621 297.575 li
275.742 297.676 li
275.923 297.231 li
276.078 297.255 li
276.295 297.288 li
276.656 297.344 277.019 297.392 277.38 297.445 cv
277.597 297.479 li
277.814 297.52 li
278.031 297.599 li
278.183 297.61 li
278.336 297.665 li
278.476 297.649 li
278.594 297.602 li
278.68 297.606 li
278.744 297.614 li
278.807 297.66 li
278.842 297.647 li
278.878 297.685 li
278.938 297.578 li
278.965 297.598 li
278.992 297.611 li
279.017 297.614 li
279.034 297.617 li
279.051 297.633 li
279.068 297.618 li
279.086 297.648 li
279.11 297.617 li
279.133 297.656 li
279.165 297.639 li
279.196 297.633 li
279.226 297.608 li
279.258 297.607 li
279.294 297.61 li
279.313 297.607 li
279.333 297.565 li
279.36 297.58 li
279.458 297.645 li
279.504 297.672 li
279.55 297.595 li
279.632 297.583 li
279.733 297.878 li
279.829 297.849 li
280.046 297.778 li
280.263 297.688 li
280.48 297.591 li
280.549 297.594 li
280.602 297.602 li
280.654 297.658 li
280.726 297.639 li
280.79 297.73 li
280.866 297.698 li
280.951 297.646 li
281.037 297.496 li
281.13 297.514 li
281.266 297.553 li
281.403 297.56 li
281.493 297.548 li
281.554 297.58 li
281.615 297.263 li
281.67 297.272 li
281.887 297.305 li
282.104 297.337 li
282.972 297.461 li
283.189 297.497 li
283.406 297.548 li
283.49 297.598 li
283.535 297.596 li
283.579 297.588 li
283.606 297.593 li
283.633 297.635 li
283.669 297.656 li
283.728 297.63 li
283.753 297.644 li
283.772 297.564 li
283.791 297.575 li
283.887 297.671 li
284.104 297.988 li
284.3 297.936 li
284.517 297.877 li
284.734 297.816 li
284.951 297.749 li
285.168 297.667 li
285.279 297.567 li
285.391 297.564 li
285.513 297.549 li
285.681 297.868 li
285.838 297.826 li
286.055 297.764 li
286.272 297.695 li
286.41 297.639 li
286.547 297.609 li
286.664 297.617 li
286.798 297.851 li
286.927 297.818 li
287.144 297.759 li
287.361 297.696 li
287.578 297.613 li
287.795 297.722 li
288.012 297.655 li
288.174 297.571 li
288.253 297.092 li
288.331 297.106 li
288.548 297.146 li
288.909 297.21 289.271 297.27 289.633 297.326 cv
289.85 297.358 li
290.067 297.389 li
290.284 297.419 li
290.501 297.45 li
290.718 297.482 li
290.935 297.525 li
291.152 297.508 li
291.327 297.574 li
291.492 297.656 li
291.603 297.516 li
291.713 297.554 li
291.93 297.556 li
292.092 297.551 li
292.254 297.477 li
292.433 297.509 li
292.65 297.666 li
292.728 297.626 li
292.807 297.598 li
292.833 297.62 li
292.86 297.59 li
292.897 297.553 li
292.953 297.575 li
292.999 297.624 li
293.069 297.613 li
293.133 297.554 li
293.223 297.275 li
293.305 297.288 li
293.756 297.386 294.574 297.416 294.959 297.578 cv
295.093 297.681 li
295.194 297.63 li
295.294 297.562 li
295.408 297.548 li
295.565 297.947 li
295.703 297.912 li
295.993 297.825 296.491 297.737 296.743 297.594 cv
296.804 297.352 li
296.863 297.361 li
297.08 297.393 li
297.514 297.453 li
297.731 297.485 li
297.948 297.533 li
298.07 297.552 li
298.192 297.561 li
298.292 297.595 li
298.396 297.585 li
298.491 297.549 li
298.597 297.539 li
298.743 297.229 li
298.874 297.251 li
299.091 297.286 li
299.308 297.32 li
299.525 297.353 li
299.742 297.385 li
300.176 297.445 li
300.393 297.477 li
300.691 297.581 300.794 297.502 300.958 297.568 cv
301.014 297.574 li
301.064 297.608 li
301.124 297.308 li
301.18 297.317 li
301.612 297.387 302.052 297.432 302.482 297.511 cv
302.699 297.687 li
302.818 297.63 li
302.937 297.535 li
303.075 297.519 li
303.166 297.549 li
303.194 297.57 li
303.222 297.49 li
303.255 297.496 li
303.419 297.534 li
303.59 297.551 li
303.76 297.499 li
303.961 297.56 li
304.042 297.499 li
304.124 297.516 li
304.258 297.573 li
304.393 297.664 li
304.607 297.635 li
304.781 297.523 li
304.998 297.523 li
305.132 297.688 li
305.266 297.63 li
305.483 298.098 li
305.664 298.055 li
305.881 298.003 li
306.315 297.898 306.75 297.8 307.183 297.691 cv
307.4 297.632 li
307.552 297.58 li
307.703 297.518 li
307.92 297.508 li
308.137 297.571 li
308.354 297.555 li
308.552 297.504 li
308.719 297.498 li
308.804 297.518 li
308.889 297.555 li
308.991 297.546 li
309.075 297.335 li
309.161 297.349 li
309.378 297.383 li
309.684 297.444 310.126 297.456 310.403 297.566 cv
310.56 297.553 li
310.698 297.459 li
310.859 297.481 li
311.076 297.528 li
311.243 297.532 li
311.41 297.555 li
311.56 297.497 li
311.635 297.513 li
311.663 297.523 li
311.69 297.598 li
311.715 297.589 li
311.841 297.583 li
311.954 297.565 li
312.058 297.59 li
312.27 297.529 li
312.346 297.534 li
312.422 297.563 li
312.516 297.604 li
312.609 297.567 li
312.702 297.499 li
312.764 297.513 li
312.798 297.529 li
312.832 297.498 li
312.88 297.508 li
313.097 297.589 li
313.163 297.559 li
313.23 297.387 li
313.299 297.398 li
313.516 297.43 li
313.95 297.49 li
314.167 297.631 li
314.352 297.565 li
314.569 297.552 li
314.76 297.472 li
314.977 297.506 li
315.194 297.56 li
315.289 297.584 li
315.384 297.472 li
315.47 297.484 li
315.62 297.511 li
315.77 297.559 li
315.911 297.547 li
316.052 297.406 li
316.204 297.428 li
316.421 297.458 li
317.138 297.589 316.603 297.59 317.403 297.531 cv
317.523 297.574 li
317.687 297.488 li
318.458 297.721 317.839 297.307 318.639 297.494 cv
318.713 297.509 li
318.787 297.64 li
318.847 297.623 li
318.999 297.573 li
319.15 297.519 li
319.343 297.527 li
319.518 297.558 li
319.704 297.546 li
319.87 297.461 li
320.066 297.489 li
320.283 297.628 li
320.467 297.57 li
320.684 297.722 li
320.901 297.671 li
321.118 297.617 li
321.335 297.548 li
321.488 297.536 li
321.641 297.366 li
321.801 297.392 li
322.018 297.426 li
322.235 297.457 li
322.452 297.486 li
322.669 297.577 li
322.718 297.559 li
322.767 297.434 li
322.807 297.439 li
323.005 297.467 li
323.222 297.498 li
323.439 297.502 li
323.58 297.492 li
323.678 297.512 li
323.776 297.57 li
323.887 297.572 li
323.958 297.533 li
324.012 297.534 li
324.067 297.59 li
324.133 297.569 li
324.35 297.468 li
324.567 297.5 li
324.74 297.498 li
324.914 297.471 li
325.064 297.492 li
325.221 297.553 li
325.378 297.545 li
325.541 297.521 li
325.604 297.524 li
325.666 297.543 li
325.743 297.536 li
325.82 297.496 li
325.884 297.509 li
325.947 297.49 li
326.007 297.5 li
326.098 297.536 li
326.188 297.421 li
326.291 297.436 li
326.508 297.466 li
326.725 297.497 li
326.942 297.497 li
327.138 297.484 li
327.312 297.52 li
327.436 297.523 li
327.559 297.542 li
327.684 297.516 li
327.836 297.521 li
327.969 297.534 li
328.078 297.57 li
328.219 297.551 li
328.35 297.566 li
328.567 297.467 li
329.286 297.65 329.972 297.344 330.678 297.499 cv
330.743 297.515 li
330.808 297.604 li
330.886 297.581 li
331.103 297.549 li
331.292 297.539 li
331.468 297.47 li
331.68 297.501 li
331.897 297.556 li
332.114 297.55 li
332.331 297.537 li
332.527 297.432 li
332.744 297.463 li
332.961 297.493 li
333.178 297.462 li
333.36 297.487 li
333.577 297.64 li
333.752 297.595 li
333.969 297.482 li
334.084 297.499 li
334.174 297.543 li
334.265 297.545 li
334.385 297.541 li
334.488 297.532 li
334.592 297.414 li
334.708 297.432 li
335.231 297.566 335.708 297.382 336.16 297.533 cv
336.353 297.558 li
336.549 297.925 li
336.721 297.888 li
336.938 297.841 li
337.155 297.795 li
337.806 297.66 li
338.023 297.616 li
338.24 297.571 li
338.457 297.525 li
338.674 297.472 li
338.832 297.495 li
338.989 297.53 li
339.206 297.513 li
339.406 297.5 li
@
2 lj
[10 6 ] 0 dsh
137.317 327.704 mo
137.317 277.383 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
73.003 297.511 mo
73.017 297.564 li
73.085 297.829 li
76.742 311.92 87.989 351.755 104.55 356.776 cv
104.767 356.837 li
104.984 356.894 li
117.688 360.463 130.538 337.94 136.666 329.67 cv
137.1 329.038 li
1 /0 /CSD get_res sepcs
.148 sep
@
137.1 263.868 mo
137.534 264.54 li
147.1 279.116 159.146 298.982 176.377 305.243 cv
176.594 305.321 li
176.811 305.398 li
189.563 309.945 203.051 306.194 215.654 303.074 cv
215.871 303.02 li
216.088 302.965 li
@
2 lj
[10 6 ] 0 dsh
137.1 329.038 mo
137.1 263.868 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
216.088 291.671 mo
216.522 291.787 li
229.378 295.349 241.784 298.062 255.148 298.84 cv
255.365 298.853 li
255.582 298.867 li
268.509 299.662 281.5 299.019 294.425 298.467 cv
294.642 298.458 li
294.859 298.448 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
216.088 302.965 mo
216.088 291.671 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
294.859 296.488 mo
295.076 296.499 li
321.269 297.918 347.2 297.945 373.413 297.666 cv
373.63 297.665 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
294.859 298.448 mo
294.859 296.488 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
373.63 297.324 mo
373.847 297.326 li
399.962 297.573 426.069 297.577 452.184 297.529 cv
452.401 297.529 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
373.63 297.665 mo
373.63 297.324 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
452.401 297.47 mo
452.618 297.47 li
469.182 297.495 485.747 297.509 502.311 297.509 cv
502.528 297.509 li
1 /0 /CSD get_res sepcs
.148 sep
@
2 lj
[10 6 ] 0 dsh
452.401 297.529 mo
452.401 297.47 li
1 /0 /CSD get_res sepcs
.477 sep
@
1 lj
[] 0 dsh
73.003 297.511 mo
73.017 297.564 li
73.085 297.829 li
76.742 311.92 87.989 351.755 104.55 356.776 cv
104.767 356.837 li
104.984 356.894 li
117.688 360.463 130.538 337.94 136.666 329.67 cv
137.1 329.038 li
@
137.1 251.253 mo
137.317 251.715 li
137.534 252.178 li
146.006 269.557 158.304 299.104 176.594 308.171 cv
176.811 308.278 li
177.028 308.382 li
189.908 314.604 203.534 309.33 216.088 305.077 cv
216.522 304.927 li
@
2 lj
[10 6 ] 0 dsh
137.1 329.038 mo
137.1 251.253 li
@
1 lj
[] 0 dsh
216.522 286.609 mo
216.739 286.718 li
246.049 302.29 263.009 302.093 295.076 299.291 cv
295.293 299.273 li
@
2 lj
[10 6 ] 0 dsh
216.522 304.927 mo
216.522 286.609 li
@
1 lj
[] 0 dsh
295.293 294.9 mo
295.51 294.926 li
322.119 298.594 347.101 298.634 373.847 297.927 cv
374.064 297.923 li
@
2 lj
[10 6 ] 0 dsh
295.293 299.273 mo
295.293 294.9 li
@
1 lj
[] 0 dsh
374.064 296.88 mo
374.281 296.886 li
400.424 297.756 426.468 297.773 452.618 297.602 cv
452.835 297.601 li
@
2 lj
[10 6 ] 0 dsh
374.064 297.923 mo
374.064 296.88 li
@
1 lj
[] 0 dsh
452.835 297.352 mo
453.052 297.353 li
470.991 297.487 488.928 297.553 506.868 297.544 cv
507.052 297.544 li
@
2 lj
[10 6 ] 0 dsh
452.835 297.601 mo
452.835 297.352 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/VJOHJQ+Helvetica*1 uf/VJOHJQ+Helvetica uf/BBAAAA+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
