%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: PlanarSolutionsUnderPerturbationsWd.pdf
%%Creator: (Adobe Acrobat 20.12.0)
%%For: Ricardo
%%CreationDate: 9/15/20, 11:59 AM
%%BoundingBox: 0 0 560 420
%%HiResBoundingBox: 0 0 560 420
%%CropBox: 0 0 560 420
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1030 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2020-09-15T11:49:49-07:00"
   xmp:CreatorTool="MATLAB, The Mathworks, Inc. Version 9.7.0.1216025 (R2019b) Update 1. Operating System: Mac OS X"
   xmp:ModifyDate="2020-09-15T11:49:49-07:00"
   pdf:Producer="Acrobat Distiller 20.0 (Macintosh)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:03984879-0b72-8f40-a8b6-fd03f966b8e6"
   xmpMM:InstanceID="uuid:40b3512c-9306-7f41-8277-4c0bd2d33392">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">./PlanarSolutionsUnderPerturbationsWd.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -420 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 420 li
560 420 li
560 0 li
cp
clp
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.06 419.94 mo
560 419.94 li
560 0 li
.06 0 li
cp
f
73 374 mo
507 374 li
507 31.5 li
73 31.5 li
cp
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
73 374 mo
73 31.5 li
1 /0 /CSD get_res sepcs
.127 sep
@
121.222 374 mo
121.222 31.5 li
@
169.444 374 mo
169.444 31.5 li
@
217.667 374 mo
217.667 31.5 li
@
265.889 374 mo
265.889 31.5 li
@
314.111 374 mo
314.111 31.5 li
@
362.333 374 mo
362.333 31.5 li
@
410.556 374 mo
410.556 31.5 li
@
458.778 374 mo
458.778 31.5 li
@
507 374 mo
507 31.5 li
@
507 374 mo
73 374 li
@
507 325.071 mo
73 325.071 li
@
507 276.143 mo
73 276.143 li
@
507 227.214 mo
73 227.214 li
@
507 178.286 mo
73 178.286 li
@
507 129.357 mo
73 129.357 li
@
507 80.429 mo
73 80.429 li
@
507 31.5 mo
73 31.5 li
@
2 lc
73 374 mo
507 374 li
1 /0 /CSD get_res sepcs
.851 sep
@
73 31.5 mo
507 31.5 li
@
73 374 mo
73 369.66 li
@
121.222 374 mo
121.222 369.66 li
@
169.444 374 mo
169.444 369.66 li
@
217.667 374 mo
217.667 369.66 li
@
265.889 374 mo
265.889 369.66 li
@
314.111 374 mo
314.111 369.66 li
@
362.333 374 mo
362.333 369.66 li
@
410.556 374 mo
410.556 369.66 li
@
458.778 374 mo
458.778 369.66 li
@
507 374 mo
507 369.66 li
@
73 31.5 mo
73 35.84 li
@
121.222 31.5 mo
121.222 35.84 li
@
169.444 31.5 mo
169.444 35.84 li
@
217.667 31.5 mo
217.667 35.84 li
@
265.889 31.5 mo
265.889 35.84 li
@
314.111 31.5 mo
314.111 35.84 li
@
362.333 31.5 mo
362.333 35.84 li
@
410.556 31.5 mo
410.556 35.84 li
@
458.778 31.5 mo
458.778 35.84 li
@
507 31.5 mo
507 35.84 li
@
%ADOBeginSubsetFont: BBAAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /BBAAAA+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f321047244e000000cc000000606376
7420982241db0000012c0000038c6670676d52c5ad27000004b800000b90
676c7966d8a7875a00005d5800000654686561649b207bba000010480000
0036686865610a220fe40000108000000024686d747845be3289000010a4
000023306c6f6361003724d8000033d4000023346d61787011400c7d0000
5708000000206e616d653eaf194300005728000001be70726570c412718a
000058e80000046e67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a002a0093007600a000ac00b800ab00c50000002bfe55001a
042f002105be002740292a292827262524232221201f1e1d1c1b1a191817
161514131211100d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b000
43617d6818b0004360442d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2c20b0032552582359212d2c69b04061b0
008b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0
112bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb01745
8cb0172344b0177ae5182d2cb002254661658a46b040608b482d2cb00225
46608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b003
2545b019236a4445b01a23444565234520b00325606a20b009234223688a
6a606120b0005258b21a401a4523614459b0005058b21940194523614459
2d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7
830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c456920b00943b0022660b00325b00525
4961b0805358b21940194523616844b21a401a4523606a44b209191a4565
2345604259b00943608a103a2d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c764520b003
254523616818236860442d2c7645b00325452361682318456860442d2c76
45b0032545616823452361442d2c4569b014b0324b505821b0205961442d
b8002b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db8002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db8002f2c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db800302c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db800312c2020456944
b001602020457d691844b001602db800322cb800312a2db800332c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db800342c4b535845441b2121592db800352c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800362c20
20456944b001602db800372cb800362a212db800382c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800392c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db8003b2c2020456944b00160202045
7d691844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db800402c2020456944b001
602db800412cb800402a212db800422c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db800432c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db800442c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db800452c2020456944b001602020457d691844b001
602db800462cb800452a2db800472c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
482c4b535845441b2121592db800492c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db8004a2c2020456944b001602db8004b2c
b8004a2a212db8004c2c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db8004d2c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db8004f2c2020456944b001602020457d691844b001602db800502c
b8004f2a2db800512c4b20b003265358b0801bb040598a8a20b003265358
2321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b003
2653582321b801408a8a1b8a235920b80003265358b0032545b801805058
2321b8018023211bb003254523212321591b2159442db800522c4b535845
441b2121592db800532c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db800542c2020456944b001602db800552cb800542a212d
b800562c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800572c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800582c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80059
2c2020456944b001602020457d691844b001602db8005a2cb800592a2db8
005b2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a
1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db8005c2c4b535845441b2121592db8005d2c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db8005e2c2020456944b00160
2db8005f2cb8005e2a212db800602c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800612c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800622c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800632c2020456944b001602020457d691844b00160
2db800642cb800632a2db800652c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800662c4b535845441b2121592d0001
000000000000330fc8a65f0f3cf500110800000000005f4d8f0000000000
d8b9a29bf865fc270b9108f9000000090001000100000000000100000629
fe2900000c01f865fced0b910001000000000000000000000000000008cc
05120042000000000239000002390000023900ed02d70052047300000473
0040071d0042055600590187009c02aa008e02aa0044031d004e04ac005c
023900aa02aa0055023900af0239000004730040047300c4047300400473
003104730034047300420473004d0473004b0473004204730049023900e3
023900e304ac001c04ac005c04ac001c0473009c081f00e10556001e0556
009705c7005a05c700a5055600af04e300af0639006305c700a1023900c9
040000230556009c0473009c06aa009705c7009c06390050055600af0639
005005c700b40556006004e3002105c700aa05560034078d00250556002a
0556002a04e3002f023900800239ffbb0239002f03c100780473000002aa
002604730052047300760400003b04730038047300480239001c0473003d
0473008401c7008401c7ffda0400008001c7008906aa0084047300840473
003b047300760473003c02aa00890400004202390017047300800400000b
05c700120400000b040000150400003402acffd50214009002ac002a04ac
00120556001e0556001e05c7005a055600af05c7009c0639005005c700aa
0473005204730052047300520473005204730052047300520400003b0473
004804730048047300480473004802390067023900080239000002390025
047300840473003b0473003b0473003b0473003b0473003b047300800473
00800473008004730080047300500333006f04730068047300380473004b
02cd0095044cfff504e300c705e5001505e50012080000ed02aa008a02aa
00520464005c080000100639004205b4002a0464005c0464005a0464005c
0473ffe1049cffb403f4006a05b400280696001c0464002f0231ff7902f6
003b02ec00310625005e071d004904e3005c04e300ba02aa00e804ac005c
0464ffef047300280464005c04e50071047300c2047300c2080000ed0239
00000556001e0556001e0639005008000049078d00470473fffb080000f1
02aa004e02aa004e01c7008401c700aa0464005c03f40042040000150556
002a0156feaa05f4006002aa00b402aa00aa0400001c0400001c04730050
0239009701c700aa02aa004e0800000e0556001e055600af0556001e0556
00af055600af0239006b0239fff902390020023900020639005006390050
065200690639005005c700aa05c700aa05c700aa023900bd02aa002a02aa
fff702aa001502aa001902aa00f702aa008402aa007902aaffff02aa00a1
02aa002a0473ffe801c7ffd7055600600400004204e3002f040000340214
009005c700210473003d0556002a04000015055600800473008004ac005c
04ac007402aa005702aa000b02aa000706ac005a06ac00a306ac004b0473
0000063900630473003d023900c9055600600400004205c7005a0400003b
05c7005a0400003b047300380556001e047300520556001e047300520556
001e0473005205c7005a0400003b05c7005a0400003b05c700a505480038
055600af04730048055600af04730048055600af04730048055600af0473
0048055600af04730048063900630473003d063900630473003d06390063
0473003d0473003d05c700a10473008405c700350473003e038f00690371
004403330059031f00650239003501c7ffdf063900c9038e008404000023
01c7ffa3055600320400fff10473009c021f00830473009c01c7000c0473
009c021a004e0473009c027b008905c7009c0473008405c7002a0473000a
05c7009c047300840473000e063900500473003b063900500473003b0639
00500473003b05c700b402aa008905c7004902aa001705c700b402aa0042
0556006004000042055600600400004204e300210239001704e3002102e1
001704e30021028fffe205c700aa0473008005c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa04730080078d
002505c700120556002a0400001504e3002f0400003404e3002f04000034
055600600400004204e30021023900170473004b0000fcfc0000fcfc0000
fc9c0000fc680000fc860000fc8a0000fd690000fcc40000fcf60000fc70
0000fc9c0000fd5b0000fcea0000fd120000fc9105c70021063900630473
003d0473009c01c700890556009c0400008005c7009c0473008405c700b4
02aa008901aaffdb023700e102aa005501c7ffda040000800239001c0473
0048047300480400003a047300510000fd3c0000fc660000fc8a0239fffb
0239fffb05c7009c047300840000fcc4056d0024054c0098055600980427
0098059c00250556009807f0000a0554004505c7009805c7009805560098
057e002506aa009805c700980639005005c700980556009805c7005004e3
001d0556002f06d800410556002505db009805360060078d009807a10098
06aa001d070900980536009805c700640800009805b7006a047300560473
0048046200870339008704d9001c04730050063d00170400003304ab0087
04ab0087046200870498001b055400870473008704730048047300870473
007d04000048040000330400001706a800460400001404910087044e005c
063900870657008704e3001b05c7008703ff00870414002f063900870477
005005560098047300500427009803390087023900ba01c7008704000023
05c70050040000480239001d020300290800002506c3001b07e10098067c
008701c7ffdd055600620639004e0473001b055600980462008704000048
0617001b0473001b0556002f0400001705c700980473008704730098031d
00870000fd5b0000fd5b0000fd5b0000fd5b0000fc700000fd930000fd2a
0000fc8a0000fcfc0000fcfc0000fc860000fd690000fcc40000fcf60000
fd930000fc9c0000fc9c0000fc8a0000fc8a0000fc680000fc860000fc66
0000fc680000fc860000fc660000fc660000fd500000fc660000fd5b0000
fc8a0000fc8d0000fd2a000000000239001b0473008306aa008302aa0088
06aa008302aa008902aa0088042b0052042b005302020087033afffd0239
0017023900170400000a05c70011040000140473009c0473009d0473009c
0400008004b2003904b2003905c7005905c7002104890049055600af0556
0060040000420498003906e600aa05950080060a0052021400b6037300b6
023900c3048c002b0400003b0134005102aa00c102aa00c20b06000e0556
00ed029600ed02aa004e01c700aa02aa0055044cfff5042f00c1042f00c2
056500c1056500c202aa0055029600ed02aa0055080000f102d500a4011d
000000000000000000000000000000000000000000000000000000000000
023900000239000002390000023900000239000002390000023900000239
0000023900000000000000000000000000000000000000000000011d0000
008f000002aafff7037000b60473009c02aa005502aa0006044c0072044c
00730556001e04e300ae04730048071c00500568003b0000fd5e0000fd5e
0000fd5e0000fd5e0000fcc90000fcd20000fd980000fccd0000fcef0000
fce10000fcd90000fcec0000fc5e0000fd440000fd4a0000fccf0000fcd1
0000fc860000fc910000fcc10000fcc10000fcc10000fcc20000fcc20000
fc8a01550061027b00610155006101550061046400320464002b03f4002d
03f4002f05b4011305b400280231006b0231fe830464ff330464ffef0464
002b0464002d08fa006f0816006f0556009c023900c9047200c906ab00c9
078f00c905560034078f003409c800340c010034078f00c90556002a078f
002a09c8002a0473009c05c7005a05c700a506aa009701c70084038e0084
0555008405c700840400000b05c7000b078e000b0955000b05c700840400
000b05c7000b078e000b01c700890400003b0473003806aa008409e20074
08c1004f07db003807da006b05a7007102f7005808e7007106f0006b05a1
00530556001e047300520239001e0239ffff063900500473003b05c700aa
0473008005c700aa0473008005c700aa0473008005c700aa0473008005c7
00aa047300800556001e047300520556001e0473005208000010071d0049
063900630473003d0556009c04000080063900500473003b063900500473
003b01c7ffbe09cd005408fc006f07fb00380639006305c7009c04730084
0556001e0473005208000010071d00490639004204e3005c0556001e0473
00520556001e04730052055600af04730048055600af047300480239ff71
01c7ff350239fff801c7ffaa063900500473003b063900500473003b05c7
00b402aaffd605c700b402aa004f05c700aa0473008005c700aa04730080
05c700a1047300840556001e04730052055600af04730048063900500473
003b063900500473003b063900500473003b063900500473003b0556002a
0400001502aa004e023900c90556001e0473005205560097047300760556
009704730076055600970473007605c7005a0400003b05c700a504730038
05c700a50473003805c700a50473003805c700a50473003805c700a50473
0038055600af04730048055600af04730048055600af04730048055600af
04730048055600af0473004804e300af0239001c063900630473003d05c7
00a10473008405c700a10473008405c700a10473008405c700390473001b
05c700a1047300840239ffec01c7ff9e02390027023900160556009c0400
00800556009c040000800556009c040000800473009c01c700890473009c
01c7ff9d0473009c01c7ffb50473009c01c7ffc006aa009706aa008406aa
009706aa008406aa009706aa008405c7009c0473008405c7009c04730084
05c7009c0473008405c7009c04730084063900500473003b063900500473
003b063900500473003b063900500473003b055600af04730076055600af
0473007605c700b402aa008905c700b402aa008305c700b402aa004a05c7
00b402aa0018055600600400004205560060040000420556006004000042
0556006004000042055600600400004204e300210239001704e300210239
001704e300210239ffe204e300210239ffe705c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa047300800556
00340400000b055600340400000b078d002505c70012078d002505c70012
078d002505c70012078d002505c70012078d002505c700120556002a0400
000b0556002a0400000b0556002a0400001504e3002f0400003404e3002f
0400003404e3002f04000034047300840239001005c70012040000150239
001c0556001e047300520556001e047300520556001e047300520556001e
0473ffcb0556001e047300520556001e047300520556001e047300520556
001e047300520556001e047300520556001e047300520556001e04730052
0556001e04730052055600af04730048055600af04730048055600af0473
0048055600af047300480556008c0473fff0055600af04730048055600af
04730048055600af04730048023900ae02390099023900c701c700840639
00500473003b063900500473003b063900500473003b063900500473ffd8
063900500473003b063900500473003b063900500473003b071c00500568
003b071c00500568003b071c00500568003b071c00500568003b071c0050
0568003b05c700aa0473008005c700aa0473008006e600aa0595008006e6
00aa0595008006e600aa0595008006e600aa0595008006e600aa05950080
0556002a040000150556002a040000150556002a040000150556002a0400
0015055600af04730048055600af04730048056d007505df009604860052
048600870723000a05890017056d002404860043056d002404860043056d
00750486005208d9001006dd0012054f0043040a003005df009604860087
05df009604860087065500500486005205df006004120037056d00100412
0019056d001004120019056d00100412001905ac005e047a006907480098
0600008d08000010071d004906aa009706aa008405c700b402aa004c0222
ffc50556001b05c700c504e300d505c70029055600c504e3004805c700b0
06390071023900ba055600b00556002f071d00be05c700b004e300620639
007105c700b0055600c504e3005804e1002f0556002905c700500558003d
06a8007f063900640239000a0556002904e3005a04e300b40473001204e3
006804730077038d004a04e3003b04e5008f023900b0047300b004730025
04e300b8047300420400007104e3006f04e300aa0473004c04e3006f0400
003b04e300b805c700770473000e05c7008f0610006a0239000a04e300b8
0239009a0222000b0000fd19023900b0016c0088016c00880000fcfc0000
fcfc016c008802ca001a02b5001a03050088031200880222002e0222002f
031e00880362006f033300880362006f0735007f0625005e0639ffef01c7
008401c700aa047200ed06ac009c06ac00ed04730048047300480556001e
0473005204730052055600af04730048055600af04730048055600af0473
00480239fff00239ffdb01c70079063900500473003b063900500473003b
063900500473003b055600600400004205c700aa047300800400000b06e6
00aa05950080060200610473ffd605c7fff20473008406aa008403f0009c
0460009a03a6005a03e9000c02cf00020448005c06020061047300500655
004e0486004c0639005002aa001e07c6002407c6002408e6ffca0000f920
0000fa0b0000fa0b0000fa060000fa0606020061047300500655004e0486
004c0222002f02b5001a0473002504e3002f040000340473003b04d20084
04dc00380473007204bd003804d7003d0473008204d7008202220086078d
00470387008802aa008604d2003c04b80032052b00320772003805600017
043a001705ce001c04c2008904b8008901a9008a01a9008a01c700aa0187
007802aa000802aa00c102aa003a0187007802aa000802aa00c102aa003a
01a9008a01a9008a02aa001e02aafff7023a0042023a004100e4ffed0155
00450155004401c4004402e400090200000b023a004e023a004f0256000e
0256000e025600240256002402aa00550256002e0256002e0256002e0200
00210200000600e300440256003a023a000902560024025600240256000e
0256000e02aa0078023a004f0000fccd0000fca20000fca20000fd6f0000
fd6f0000fc490000fc490000fb9e0000fca20000fc490000fccd0000fcc2
0000fcc20000000002390000000000000000000000000000031d004e031d
004e06da00c107c60024023900e308e6009c07c60024071d00d00703001b
023900800239008000000000000000000000000000000000000000000000
0000067b003a023a00200239001a02390021023a002702390025023a0021
023900240256002e0155002b0256002e0155004701550022023a0042023a
0020023a006202390020023900180239001a02390021023a002702390025
023a0021023900240256002e0155002b0256002e0155004701550022063c
0011063900630473009c0473009c0556002a06ab00280600003007560011
0473007207c8005806ac005a05c7005a0556005904e500710696001c06ab
003406ab0028055600af04730076055600af0473007604e3000206390050
04c400a1024100230369001105c7005002bb0023033afffd0473009c0473
009c01c7002a01c7002a0473003d04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a05c1005b05b3005b076c00880776
008807760088078d008807ca006f07a0006f047300770473007704730077
04730077047300770473007706c2008806c200880874008808890088085b
00880868008804e3003b04e3003b04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b073300880733008808e5008808fa008808cc008808d9
00880929006f0929006f023900b0023900b002390041023900390239003d
0239003d023900230239002303a5008803a5008805570088056c0088053e
0088054b0088059b006f059b006f04e3006f04e3006f04e3006f04e3006f
04e3006f04e3006f07a5008807a5008809570088096c0088093e0088094b
008804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b806c20088088900880868008808b8006f0610006a0610006a0610
006a0610006a0610006a0610006a0610006a0610006a0791008807910088
0943008809580088092a0088093700880987006f0987006f04e3005a04e3
005a047300770473007704e3003b04e3003b023900b0023900b004e3006f
04e3006f04e300b804e300b80610006a0610006a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a0811005b080c005b
0991008809d80088097f0088099b008809d3006f09ce006f04e3003b04e3
003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b096c0088
096c00880b1e00880b3300880b0500880b1200880b62006f0b62006f0610
006a0610006a0610006a0610006a0610006a0610006a0610006a0610006a
09ca008809ca00880b7c00880b9100880b6300880b7000880bc0006f0bc0
006f04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
0556001b0556001b0666002e0661002f07a9001b04e3003b04e3003b04e3
003b04e3003b04e3003b06ac002e06a7002f06d2002e06ba002f083100b0
0239ffcf0239ffce0239ffcc0239ffda0239ffdc0239ffc50239ffe10239
ffee0343002e0348002f04e300b804e300b804e300b804e300b804e300aa
04e300aa04e300b804e300b8055600290556002906b1002e0713002f06c2
00880610006a0610006a0610006a0610006a0610006a075a002e0789002f
0792002e07a9002f0878005e04e3005a0473007704e3003b023900b004e3
006f04e300b80610006a05d5007206a7002f06ba002f0348002f0789002f
0713002f07a9002f0239ffcb04e300b804ac002504ea011704f700a102f3
001b02bb00230473002504e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a0239ffd70239ffe40239ffd20239ffd7
0239ffdb0239ffdb0239ffcd0239ffe00239ffc80239ffc30239ffdc0239
ffdc0239ffd70239ffd70239ffd20239ffcd0239ffd20239ffd704e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b80666002e0661002f05c1005b076c00880776008805b3
005b07760088078d00880666002e0661002f05c1005b076c008807760088
05b3005b07760088078d00880343002e0348002f0348002f03a500880557
0088053e008803a50088056c0088054b00880343002e0348002f0348002f
03a5008805570088053e008803a50088056c0088054b008806b1002e0713
002f0713002f06c20088088900880868008806c200880889008808680088
06b1002e0713002f0713002f06c20088088900880868008806c200880889
00880868008805c700b405c7005a0639005001c70020051d0029055600af
05c700a10000fd31055200680473003806390050047300480772005b0738
004505e5001306ac003d06ac003d06ac003a06ac003a066d001d04e3001b
082200d005e1008a06a8007f05c7008f0556001e0400000b079900d005cf
008a04da003802ca002405d900160588003805c700b404730052031f0000
04da00a103eb00a1064900a104cf00840556009c0400008004e3002f0400
003408d9001406dd0030054f0072040a0047056d00a50412007a05df00ac
0486009105df00630412003f04f8002b0412003a056d002e0412002405ac
00ac047a007705ac00ac047a00770556002a0556002a04d900bc037c0091
05ac00ac047a0077063200a504df007a075f00ac059b00910556002a0556
002a06fe0028054e00350748003a059400260748003a0594002607720048
05b3003805df00ac0486009104730052054f00ac054f00ac06a8007f04dc
005d0855004405e0002605560025040000040556003404b6000b0400003b
054f0072040a004705f10026049c0024023900bd056d002e041200240556
00340556001e05c7005a0400003b0473ffe804e3002101c7003e02bb0023
04e30021055600af0473009c0473009c055600af047300480456002301c7
ffda05c700aa01a9002101a9002102aa003302aa003302aa003a02aaffe9
023900e302aa003c02aa003c057f005b04ac002504ac0074023900e304ac
0025057c004c04ac0074023900e3023900e3063900710412003f0412003f
055600ae0473008005c7005a06aa009705dd0097059b004605c7005a05c7
005a05c7005a0400003b0400003b0400003b0473003805ca003006c6002e
063f002f031f001a062e001904e900310488004502aa00be02aa00be02aa
00be02aa00be0277003b0277003b034b0000034b0000034b0000034b0000
034b00000487001203f7001e045e0054043600830436008302fd005d034f
0012069900390655003e052900300000f86506e1002204e9002001e0004b
01e9004b015d0025015d000a0199002a0198001202fb0017030400170267
0013025700120257001202c8004b01d8000701d8000707e9003a097c004b
0931004909310002013c004b04570022058900050589000d04be00150442
001801d8000701d8000703fe003d03fe003d0404003a036f000b0467003c
0000fb760000fcc10000fc080000fc730000fc730000fa630000fce00000
fe950000fc8e0000fc510000fa0b0000fc9f046500360465002204010034
0401002407760017044c001b03ea001d051a00340653003204c8003306c2
008808890088086800880556001b0556001b0239ffdf0239ffe105560029
055600290404001505e5001405e5001405e500140800ffeb0800ffeb0800
03b40800038c080003b40800038c0800ffe90800ffe9080003b40800038c
0800ffe90800ffe9080000000404001500e40042023a0029023a0024023a
001e02000006023a002405c7005a0639006305c7005a0471002205520029
04e300210556001e04d0002805c2004e04d9004e05c7005a06aa008405d0
003106640037082d00350552006805520068039c003f0380003b039c003f
0380003b039c00530381003c039c00530381003c02eb005302e3005302e3
005302e3005302eb005302eb000802e3000002e3000002e3000002eb0008
0363005303630053036300530363005303630053027f00010330004503b2
002603c3000b050b0031069c00290390007f0000fc4f0000fc4f0000fc42
0000fc420000fc420000fc420000fc010000fc010000fd44046500220401
00240a3900500873003b0436008304360083043600830329003a0329003a
03550028050d00340329005403290028032900330329003302f6003a02f6
003a0329002b0143005e02d7005b04bb005e0329005e0329002a02d70029
032900270329002a03290054019400100329005b0373003704bb005e02d7
0008037800800329000d0378004a04dc004d0632002a04be003304730039
0473003b04e6003804e1003a04fa0039076e003e0329000a0143005e01e4
00610329005b02d70008037800800329000d037800790329000a042b0052
05c5001001c70084045e0054070a002e06cb003504d6001b04fa001a02d8
000d04e9001b0330000d02d9000a02db000c01c700aa02aa004e01c700aa
02aa004e01c700aa02aa004e01c700aa02aa004e053d007a0708003b0310
008f0574009708c000220473004002e00034047300400473003104730034
047300420473004d0430002b047300420473004903cc000903cc000903cc
0009042800580425004e048d00560437003d06a600560450004804460048
04f8001f06c70056044e0056042d003d07c7005a049c0056049e007505e3
00560446003f0475005205e9005c046a0075054e00560475003106660056
0448003b05e300560468005604a400560487007504b40058049a005604a4
007504d1003d049a007504250044043d003d04be0056043d004e0458004e
0458004e04ba005605df0056044c00aa04d500b10473005e0473002f0425
00330473007b0437003d04250056049e0050048b003d04b8005604b80056
072b005204a20048048f004804db001f074c007104c10071047d003d085c
005604dd005604dd007b06a20071046f003d04b4004e0619005604ba0085
05d5005604ee0056068b004804a80048063f005204cd005604dd005604c3
007b053b005604e7005604e70085051d005604e70085049600480493003d
0521004e04c50056049300480491004804e7005606060056049c004804c3
007b049c004804ae00560527004c02f6007b044e0056048d005604c50056
05ae005605ee006f000000000000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c000000a8000000e8000000e80000
01c4000002100000032800000328000003c4000003c4000004f0000004f0
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
000006540000065400000654000006540000065400000654000006540000
065400000654000006540000065400000654000006540000065400000654
00000654000006540000065400000654000006540001000008cc006f0009
006b00070002001000100067000007e80b90000400010000000a007e0001
000000000000005000000001000000000003001000500001000000000004
001000600001000000000006001000700001000000000007003200800003
000104090001002000b20003000104090002000e00d20003000104090003
002000e0000300010409000400200100000300010409000600200120a920
313939302d32303036204170706c6520436f6d707574657220496e632e20
a92031393831204c696e6f7479706520414720a920313939302d39312054
79706520536f6c7574696f6e7320496e632e414143444d4d2b48656c7665
74696361414143444d4d2b48656c766574696361414143444d4d2b48656c
76657469636148656c766574696361206973206120726567697374657265
642074726164656d61726b206f66204c696e6f7479706520414700410041
00430044004d004d002b00480065006c0076006500740069006300610052
006500670075006c006100720041004100430044004d004d002b00480065
006c0076006500740069006300610041004100430044004d004d002b0048
0065006c0076006500740069006300610041004100430044004d004d002b
00480065006c0076006500740069006300610000b8005d2b01ba000501b9
005f2b01bf01bb003e00340029001d0012000000652bbf01bc0042003400
29001d0012000000652bbf01bd003a00340029001d0012000000652b00bf
01b7004d003d003700280012000000652bbf01b80060004f00370028001b
000000652bbf01b90047003d0029001d0012000000652bbf01ba00420034
0029001d0012000000652b00ba01be000400642bb801b620457d691844b8
00532bb800492bb8003f2bb800352bb8002b2b4118008001a6009001a600
a001a600030069018b0079018b0089018b0099018b00040089018b009901
8b00a9018b00b9018bb2040840ba0179001a014a400b041f5414191f180a
0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a001
9f0064001f01a50025017a00480028019ab3296c1f60410a01a9007001a9
008001a90003008001a9000101a9b21e321fbe012c00250401001f012600
1e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f
1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c
1f931eb8019ab21f921db80101b21f911db80101b21f751db80201b61f6d
29961f6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f35
1de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801
2540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2
254a1fba019b0025017ab349293896b8017bb348283125b8017a40364828
9629482725294c1f252946272729482756c80784075b07410732072b0728
07260721071b071408120810080e080c080a08080807b801acb23f1f06bb
01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7
0804080208000814b8ffe0b40000010014b801abb41000000100b801abb6
06100000010006b801adb300000100b801ad401f04000001000410000001
001002000001000200000001000002010802004a00b0018db80600851676
3f183f123e113946443e113946443e113946443e113946443e113946443e
11394660443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b53
58b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b3
76706a66456523456023456560234560b08b766818b080622020b16a7045
65234520b003266062636820b003266165b070236544b06a234420b17666
4565234520b003266062636820b003266165b066236544b0762344b10066
455458b166406544b27640764523614459b36242725d4565234560234565
60234560b089766818b080622020b172424565234520b003266062636820
b003266165b042236544b072234420b1625d4565234520b0032660626368
20b003266165b05d236544b0622344b1005d455458b15d406544b2624062
45236144592b2b2b2b456953427374b8019a2045694b20b02853b049515a
58b020615944b801a62045694475000000>
[1621 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 108 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>BBAAAA+Helvetica AddT42Char 
1 168 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>BBAAAA+Helvetica AddT42Char 
1 232 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>BBAAAA+Helvetica AddT42Char 
1 452 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>BBAAAA+Helvetica AddT42Char 
1 528 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>BBAAAA+Helvetica AddT42Char 
1 808 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>BBAAAA+Helvetica AddT42Char 
1 964 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>BBAAAA+Helvetica AddT42Char 
1 1264 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>BBAAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>BBAAAA+Helvetica AddT42Char 
BBAAAA+Helvetica /CharStrings get begin
/hyphen 16 def
/period 17 def
/zero 19 def
/one 20 def
/two 21 def
/four 23 def
/six 25 def
/eight 27 def
end
BBAAAA+Helvetica /Encoding get
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
pop
end
%ADOEndSubsetFont
/VJOHJT+Helvetica /BBAAAA+Helvetica findfont ct_VMDictPut/VJOHJT+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]VJOHJT+Helvetica nfVJOHJT+Helvetica*1 [13 0 0 -13 0 0 ]msf61 391.6 mo(-0.200.20.40.60.811.21.41.6)[4.3289 7.228 3.614 41.0488 42.7206 7.228 3.61398 37.3789 7.228 3.61398 37.3789 7.228 3.61398 37.3789 7.228 3.61398 42.8779 42.7206 7.228 3.61398 37.3789 7.228 3.61398 37.3789 7.228 3.61398 0 ]xsh282.334 412.119 mo
282.23 412.119 282.178 412.062 282.178 411.947 cv
282.178 411.874 282.188 411.827 282.209 411.806 cv
282.563 411.181 282.993 410.588 283.498 410.025 cv
284.003 409.462 284.576 408.895 285.217 408.322 cv
285.858 407.749 286.503 407.17 287.154 406.587 cv
287.805 406.004 288.334 405.488 288.74 405.041 cv
288.662 405.041 li
288.36 405.041 287.928 404.947 287.365 404.759 cv
286.802 404.572 286.354 404.478 286.021 404.478 cv
285.678 404.478 285.339 404.554 285.006 404.705 cv
284.673 404.856 284.459 405.093 284.365 405.416 cv
284.344 405.509 284.292 405.556 284.209 405.556 cv
283.975 405.556 li
283.87 405.556 283.818 405.488 283.818 405.353 cv
283.818 405.291 li
283.923 404.905 284.092 404.543 284.326 404.205 cv
284.561 403.866 284.852 403.59 285.201 403.376 cv
285.55 403.163 285.912 403.056 286.287 403.056 cv
286.558 403.056 286.782 403.116 286.959 403.236 cv
287.136 403.356 287.342 403.543 287.576 403.798 cv
287.811 404.053 288.001 404.236 288.146 404.345 cv
288.292 404.454 288.474 404.509 288.693 404.509 cv
288.985 404.509 289.248 404.376 289.482 404.111 cv
289.717 403.845 289.943 403.514 290.162 403.119 cv
290.204 403.077 290.256 403.056 290.318 403.056 cv
290.553 403.056 li
290.594 403.056 290.631 403.074 290.662 403.111 cv
290.693 403.148 290.709 403.192 290.709 403.244 cv
290.709 403.285 290.693 403.327 290.662 403.369 cv
290.308 403.984 289.891 404.559 289.412 405.095 cv
288.933 405.632 288.308 406.246 287.537 406.939 cv
286.766 407.632 286.115 408.218 285.584 408.697 cv
285.053 409.176 284.558 409.671 284.1 410.181 cv
284.204 410.15 284.344 410.134 284.521 410.134 cv
284.844 410.134 285.287 410.228 285.85 410.416 cv
286.412 410.603 286.844 410.697 287.146 410.697 cv
287.479 410.697 287.815 410.627 288.154 410.486 cv
288.493 410.345 288.787 410.145 289.037 409.884 cv
289.287 409.624 289.454 409.322 289.537 408.978 cv
289.568 408.884 289.62 408.837 289.693 408.837 cv
289.928 408.837 li
289.98 408.837 290.024 408.858 290.06 408.9 cv
290.097 408.941 290.115 408.988 290.115 409.041 cv
290.115 409.051 290.105 409.072 290.084 409.103 cv
289.969 409.603 289.758 410.082 289.451 410.541 cv
289.144 410.999 288.766 411.376 288.318 411.673 cv
287.87 411.97 287.391 412.119 286.881 412.119 cv
286.631 412.119 286.417 412.062 286.24 411.947 cv
286.063 411.832 285.858 411.645 285.623 411.384 cv
285.388 411.124 285.196 410.939 285.045 410.83 cv
284.894 410.721 284.709 410.666 284.49 410.666 cv
283.834 410.666 283.24 411.129 282.709 412.056 cv
282.667 412.098 282.62 412.119 282.568 412.119 cv
282.334 412.119 li
f
291.947 414.9 mo
291.947 414.4 li
293.114 414.4 293.697 414.254 293.697 413.962 cv
293.697 406.619 li
293.218 406.848 292.609 406.962 291.869 406.962 cv
291.869 406.478 li
293.015 406.478 293.88 406.176 294.463 405.572 cv
294.651 405.572 li
294.682 405.572 294.713 405.585 294.744 405.611 cv
294.775 405.637 294.791 405.666 294.791 405.697 cv
294.791 413.962 li
294.791 414.254 295.374 414.4 296.541 414.4 cv
296.541 414.9 li
291.947 414.9 li
f
73 374 mo
73 31.5 li
@
507 374 mo
507 31.5 li
@
73 374 mo
77.34 374 li
@
73 325.071 mo
77.34 325.071 li
@
73 276.143 mo
77.34 276.143 li
@
73 227.214 mo
77.34 227.214 li
@
73 178.286 mo
77.34 178.286 li
@
73 129.357 mo
77.34 129.357 li
@
73 80.429 mo
77.34 80.429 li
@
73 31.5 mo
77.34 31.5 li
@
507 374 mo
502.66 374 li
@
507 325.071 mo
502.66 325.071 li
@
507 276.143 mo
502.66 276.143 li
@
507 227.214 mo
502.66 227.214 li
@
507 178.286 mo
502.66 178.286 li
@
507 129.357 mo
502.66 129.357 li
@
507 80.429 mo
502.66 80.429 li
@
507 31.5 mo
502.66 31.5 li
@
VJOHJT+Helvetica*1 [13 0 0 -13 0 0 ]msf44.4 379 mo(-0.8)[4.3289 7.228 3.614 0 ]xsh44.4 330.068 mo(-0.6)[4.3289 7.228 3.614 0 ]xsh44.4 281.136 mo(-0.4)[4.3289 7.228 3.614 0 ]xsh44.4 232.204 mo(-0.2)[4.3289 7.228 3.614 0 ]xsh60.403 183.272 mo(0)sh49.405 134.34 mo(0.2)[7.228 3.614 0 ]xsh49.405 85.408 mo(0.4)[7.228 3.614 0 ]xsh49.405 36.476 mo(0.6)[7.228 3.614 0 ]xsh34.234 195.769 mo
34.13 195.769 34.078 195.712 34.078 195.597 cv
34.078 195.524 34.088 195.477 34.109 195.456 cv
34.463 194.831 34.893 194.238 35.398 193.675 cv
35.903 193.112 36.476 192.545 37.117 191.972 cv
37.758 191.399 38.403 190.82 39.054 190.237 cv
39.705 189.654 40.234 189.138 40.64 188.691 cv
40.562 188.691 li
40.26 188.691 39.828 188.597 39.265 188.409 cv
38.702 188.222 38.254 188.128 37.921 188.128 cv
37.578 188.128 37.239 188.204 36.906 188.355 cv
36.573 188.506 36.359 188.743 36.265 189.066 cv
36.244 189.159 36.192 189.206 36.109 189.206 cv
35.875 189.206 li
35.77 189.206 35.718 189.138 35.718 189.003 cv
35.718 188.941 li
35.823 188.555 35.992 188.193 36.226 187.855 cv
36.461 187.516 36.752 187.24 37.101 187.026 cv
37.45 186.813 37.812 186.706 38.187 186.706 cv
38.458 186.706 38.682 186.766 38.859 186.886 cv
39.036 187.006 39.242 187.193 39.476 187.448 cv
39.711 187.703 39.901 187.886 40.046 187.995 cv
40.192 188.104 40.374 188.159 40.593 188.159 cv
40.885 188.159 41.148 188.026 41.382 187.761 cv
41.617 187.495 41.843 187.164 42.062 186.769 cv
42.104 186.727 42.156 186.706 42.218 186.706 cv
42.453 186.706 li
42.494 186.706 42.531 186.724 42.562 186.761 cv
42.593 186.798 42.609 186.842 42.609 186.894 cv
42.609 186.935 42.593 186.977 42.562 187.019 cv
42.208 187.634 41.791 188.209 41.312 188.745 cv
40.833 189.282 40.208 189.896 39.437 190.589 cv
38.666 191.282 38.015 191.868 37.484 192.347 cv
36.953 192.826 36.458 193.321 36 193.831 cv
36.104 193.8 36.244 193.784 36.421 193.784 cv
36.744 193.784 37.187 193.878 37.75 194.066 cv
38.312 194.253 38.744 194.347 39.046 194.347 cv
39.379 194.347 39.715 194.277 40.054 194.136 cv
40.393 193.995 40.687 193.795 40.937 193.534 cv
41.187 193.274 41.354 192.972 41.437 192.628 cv
41.468 192.534 41.52 192.487 41.593 192.487 cv
41.828 192.487 li
41.88 192.487 41.924 192.508 41.96 192.55 cv
41.997 192.591 42.015 192.638 42.015 192.691 cv
42.015 192.701 42.005 192.722 41.984 192.753 cv
41.869 193.253 41.658 193.732 41.351 194.191 cv
41.044 194.649 40.666 195.026 40.218 195.323 cv
39.77 195.62 39.291 195.769 38.781 195.769 cv
38.531 195.769 38.317 195.712 38.14 195.597 cv
37.963 195.482 37.758 195.295 37.523 195.034 cv
37.288 194.774 37.096 194.589 36.945 194.48 cv
36.794 194.371 36.609 194.316 36.39 194.316 cv
35.734 194.316 35.14 194.779 34.609 195.706 cv
34.567 195.748 34.52 195.769 34.468 195.769 cv
34.234 195.769 li
f
43.254 198.55 mo
43.254 198.175 li
43.254 198.154 43.259 198.128 43.269 198.097 cv
45.457 195.691 li
45.78 195.336 46.043 195.039 46.246 194.8 cv
46.449 194.561 46.652 194.282 46.855 193.964 cv
47.058 193.646 47.217 193.326 47.332 193.003 cv
47.447 192.68 47.504 192.337 47.504 191.972 cv
47.504 191.587 47.434 191.219 47.293 190.87 cv
47.152 190.521 46.941 190.243 46.66 190.034 cv
46.379 189.826 46.04 189.722 45.644 189.722 cv
45.238 189.722 44.874 189.844 44.551 190.089 cv
44.228 190.334 43.998 190.649 43.863 191.034 cv
43.905 191.024 43.957 191.019 44.019 191.019 cv
44.228 191.019 44.407 191.089 44.558 191.23 cv
44.709 191.371 44.785 191.55 44.785 191.769 cv
44.785 191.988 44.709 192.17 44.558 192.316 cv
44.407 192.461 44.228 192.534 44.019 192.534 cv
43.8 192.534 43.618 192.459 43.472 192.308 cv
43.327 192.157 43.254 191.977 43.254 191.769 cv
43.254 191.425 43.319 191.099 43.449 190.792 cv
43.579 190.485 43.769 190.211 44.019 189.972 cv
44.269 189.732 44.55 189.547 44.863 189.417 cv
45.176 189.287 45.504 189.222 45.847 189.222 cv
46.389 189.222 46.889 189.337 47.347 189.566 cv
47.806 189.795 48.17 190.115 48.441 190.526 cv
48.712 190.938 48.847 191.42 48.847 191.972 cv
48.847 192.378 48.756 192.763 48.574 193.128 cv
48.392 193.493 48.163 193.823 47.886 194.12 cv
47.61 194.417 47.256 194.756 46.824 195.136 cv
46.392 195.516 46.108 195.769 45.972 195.894 cv
44.379 197.409 li
45.722 197.409 li
46.389 197.409 46.943 197.404 47.386 197.394 cv
47.829 197.383 48.066 197.368 48.097 197.347 cv
48.202 197.232 48.311 196.8 48.426 196.05 cv
48.847 196.05 li
48.441 198.55 li
43.254 198.55 li
f
0 lc
499.935 178.286 mo
499.935 178.317 li
499.934 178.472 li
499.933 179.245 li
499.804 226.478 485.771 269.528 450.92 302.434 cv
449.691 303.581 li
448.451 304.715 li
418.654 331.63 379.439 346.688 339.865 351.247 cv
338.159 351.438 li
336.452 351.616 li
334.742 351.781 li
333.032 351.934 li
292.811 355.382 252.171 348.397 214.87 333.174 cv
213.347 332.548 li
211.83 331.913 li
210.319 331.271 li
193.836 324.205 178.033 315.546 163.181 305.496 cv
161.932 304.645 li
160.69 303.791 li
147.165 294.433 135.022 282.781 124.054 270.565 cv
123.149 269.549 li
122.255 268.536 li
121.37 267.524 li
120.496 266.515 li
1 /0 /CSD get_res sepcs
.729 sep
@
121.222 119.523 mo
121.798 120.228 li
122.367 120.932 li
134.038 136.321 150.836 157.99 151.195 178.301 cv
151.193 178.603 li
151.188 178.901 li
151.181 179.197 li
151.053 183.491 149.936 188.017 146.865 191.182 cv
146.737 191.312 li
146.608 191.438 li
144.205 193.77 141.077 194.846 137.764 194.88 cv
137.701 194.899 li
137.638 194.901 li
137.583 194.938 li
137.531 194.896 li
137.48 194.878 li
137.428 193.791 li
137.382 193.794 li
137.229 193.832 li
137.075 193.962 li
136.969 194.395 li
136.884 194.353 li
136.798 194.937 li
136.708 194.766 li
136.547 194.381 li
136.393 193.426 li
136.283 193.01 li
136.205 193.351 li
136.178 193.001 li
136.151 193.11 li
136.021 192.042 li
135.901 192.204 li
135.762 192.543 li
135.717 192.823 li
135.671 192.747 li
135.632 191.839 li
135.596 191.906 li
135.46 192.335 li
135.345 193.703 li
135.229 193.331 li
135.147 192.974 li
135.09 192.499 li
135.073 193.828 li
135.054 193.784 li
134.964 193.552 li
134.816 193.1 li
134.673 192.447 li
134.542 191.26 li
134.417 192.051 li
134.306 193.878 li
134.213 193.683 li
133.829 192.846 133.526 191.919 133.467 190.997 cv
133.434 189.623 li
133.404 189.754 li
133.365 189.982 li
133.343 190.173 li
133.32 190.869 li
133.303 191.376 li
133.285 191.263 li
133.241 190.882 li
133.228 190.666 li
133.215 190.286 li
133.202 189.21 li
133.191 189.252 li
133.135 189.503 li
133.076 189.967 li
133.018 189.104 li
132.956 189.411 li
132.885 190.341 li
132.883 190.271 li
132.881 190.191 li
132.879 190.038 li
132.877 190.255 li
132.875 190.142 li
132.873 190.015 li
132.87 190.279 li
132.868 190.2 li
132.866 190.154 li
132.864 190.183 li
132.862 189.982 li
132.858 190.194 li
132.853 191.028 li
132.848 191 li
132.824 190.848 li
132.791 190.581 li
132.776 190.412 li
132.761 190.111 li
132.75 190.122 li
132.74 190.366 li
132.726 190.099 li
132.713 190.162 li
132.7 189.833 li
132.695 189.638 li
132.69 189.749 li
132.673 189.598 li
132.666 189.759 li
132.659 190.579 li
132.652 190.519 li
132.617 190.074 li
132.584 190.213 li
132.573 190.002 li
132.562 189.663 li
132.551 189.602 li
132.54 190.232 li
132.528 190.051 li
132.481 190.529 li
132.444 190.214 li
132.417 189.733 li
132.392 188.945 li
132.356 189.407 li
132.351 189.462 li
132.345 189.082 li
132.338 189.164 li
132.328 189.356 li
132.318 189.692 li
132.307 189.955 li
132.296 189.761 li
132.291 189.616 li
132.287 190.002 li
132.282 189.939 li
132.27 189.73 li
132.266 189.582 li
132.262 189.721 li
132.259 189.632 li
132.257 189.557 li
132.256 189.443 li
132.255 189.4 li
132.254 189.591 li
132.254 189.539 li
132.251 189.534 li
132.248 189.518 li
132.246 189.489 li
132.245 190.076 li
132.243 190.057 li
132.233 189.953 li
132.217 189.707 li
132.212 189.567 li
132.208 189.302 li
132.202 190.284 li
132.196 190.243 li
132.168 190.004 li
132.064 188.364 li
132.017 188.76 li
132.003 188.981 li
131.989 189.301 li
131.985 189.391 li
131.983 189.321 li
131.982 189.244 li
131.981 189.254 li
131.98 189.354 li
131.979 189.318 li
131.979 189.264 li
131.976 189.261 li
131.973 189.259 li
131.97 189.261 li
131.967 189.292 li
131.964 188.922 li
131.96 189.042 li
131.949 188.984 li
131.937 190.151 li
131.927 190.08 li
131.874 189.624 li
131.803 188.563 li
131.789 188.863 li
131.777 188.784 li
131.766 189.235 li
131.763 189.15 li
131.761 189.05 li
131.759 189.413 li
131.757 189.379 li
131.746 189.139 li
131.725 189.124 li
131.708 189.278 li
131.702 189.142 li
131.699 189.025 li
131.696 188.796 li
131.692 189.281 li
131.687 189.189 li
131.665 188.205 li
131.642 188.487 li
131.584 187.953 li
131.518 189.033 li
131.473 189.297 li
131.457 189.084 li
131.448 188.912 li
131.445 188.82 li
131.444 188.713 li
131.442 188.735 li
131.44 187.04 li
131.439 187.046 li
131.432 187.075 li
131.397 187.232 li
131.306 187.812 li
131.277 188.195 li
131.251 186.628 li
131.231 186.708 li
131.146 187.1 li
131.056 187.847 li
130.995 187.05 li
130.934 187.546 li
130.918 187.785 li
130.912 187.952 li
130.906 188.281 li
130.899 187.693 li
130.891 187.882 li
130.87 187.735 li
130.864 187.885 li
130.862 188.005 li
130.86 187.997 li
130.858 187.952 li
130.855 188.137 li
130.853 188.177 li
130.849 187.923 li
130.845 188.365 li
130.84 188.199 li
130.827 188.226 li
130.821 188.177 li
130.816 187.732 li
130.811 187.931 li
130.807 187.912 li
130.804 187.698 li
130.798 187.883 li
130.791 187.829 li
130.784 188.512 li
130.776 188.39 li
130.74 187.507 li
130.734 187.637 li
130.73 187.749 li
130.728 187.856 li
130.726 187.629 li
130.724 187.695 li
130.711 188.319 li
130.705 188.185 li
130.702 188.077 li
130.7 188.016 li
130.699 187.716 li
130.698 187.764 li
130.696 188.202 li
130.695 188.156 li
130.691 188.035 li
130.688 187.941 li
130.687 188.008 li
130.686 187.943 li
130.686 187.649 li
130.685 187.679 li
130.683 187.743 li
130.682 187.807 li
130.681 187.865 li
130.68 188.013 li
130.679 187.768 li
130.677 187.761 li
130.676 187.573 li
130.674 187.618 li
130.671 187.749 li
130.667 188.064 li
130.659 187.634 li
130.648 187.991 li
130.639 188.042 li
130.63 187.515 li
130.594 187.021 li
130.571 187.291 li
130.558 187.617 li
130.549 187.543 li
130.539 188.028 li
130.535 187.898 li
130.531 187.841 li
130.528 186.905 li
130.526 186.931 li
130.512 187.078 li
130.488 187.532 li
130.48 187.133 li
130.472 187.256 li
130.428 188.8 li
130.386 188.48 li
130.334 187.762 li
130.308 187.824 li
130.285 186.16 li
130.266 186.279 li
130.225 186.611 li
130.206 186.819 li
130.187 187.223 li
130.175 187.19 li
130.163 187.003 li
130.158 187.117 li
130.154 187.46 li
130.147 187.451 li
130.142 187.468 li
130.136 187.906 li
130.13 187.808 li
130.119 187.577 li
130.115 187.415 li
130.111 187.681 li
130.106 187.553 li
130.082 187.947 li
130.055 187.449 li
130.037 187.541 li
130.034 187.434 li
130.03 187.181 li
130.025 187.727 li
130.019 187.618 li
130.014 187.487 li
130.01 187.357 li
130.007 187.264 li
130.005 187.261 li
130.002 187.255 li
130 187.236 li
129.998 187.155 li
129.997 187.264 li
129.995 187.455 li
129.992 187.361 li
129.98 187.538 li
129.975 187.409 li
129.971 186.938 li
129.969 187.026 li
129.967 186.916 li
129.965 186.976 li
129.956 188.526 li
129.948 188.478 li
129.91 188.216 li
129.875 187.915 li
129.84 187.479 li
129.763 188.038 li
129.725 187.686 li
129.688 187.027 li
129.676 186.997 li
129.669 187.045 li
129.661 186.437 li
129.652 186.72 li
129.646 186.699 li
129.639 186.576 li
129.636 186.709 li
129.633 187.251 li
129.63 187.179 li
129.624 186.995 li
129.618 186.732 li
129.617 186.638 li
129.615 186.714 li
129.615 186.682 li
129.614 186.788 li
129.613 186.632 li
129.612 186.692 li
129.607 186.628 li
129.603 186.894 li
129.598 186.919 li
129.594 186.6 li
129.591 186.531 li
129.588 186.664 li
129.582 186.674 li
129.578 186.653 li
129.574 186.445 li
129.566 187.089 li
129.56 186.803 li
129.554 186.439 li
129.549 186.631 li
129.545 186.592 li
129.541 186.811 li
129.538 186.815 li
129.535 186.885 li
129.532 186.954 li
129.529 186.791 li
129.526 186.81 li
129.523 187.871 li
129.521 187.852 li
129.508 187.75 li
129.446 187.009 li
129.394 187.497 li
129.354 186.985 li
129.319 186.014 li
129.309 186.265 li
129.298 187.142 li
129.286 186.964 li
129.276 186.722 li
129.272 186.581 li
129.269 186.262 li
129.263 186.544 li
129.259 186.56 li
129.255 186.841 li
129.249 186.683 li
129.227 187.005 li
129.2 186.005 li
129.17 187.24 li
129.139 186.843 li
129.046 188.109 li
128.958 187.617 li
128.869 186.917 li
128.844 186.604 li
128.836 186.45 li
128.827 186.212 li
128.81 186.265 li
128.795 185.323 li
128.78 185.617 li
128.745 185.244 li
128.731 185.492 li
128.723 185.783 li
128.719 185.591 li
128.716 185.75 li
128.707 185.737 li
128.7 185.623 li
128.698 185.775 li
128.695 185.639 li
128.693 185.751 li
128.691 185.936 li
128.688 185.94 li
128.686 185.986 li
128.684 185.772 li
128.681 185.736 li
128.678 186.536 li
128.675 186.493 li
128.66 186.217 li
128.612 186.876 li
128.547 185.935 li
128.529 186.026 li
128.512 185.425 li
128.5 186.19 li
128.487 185.849 li
128.474 185.959 li
128.47 185.792 li
128.466 185.433 li
128.462 185.439 li
128.457 185.521 li
128.454 185.391 li
128.45 184.95 li
128.446 185.01 li
128.436 185.198 li
128.43 185.375 li
128.428 185.517 li
128.426 185.468 li
128.423 185.698 li
128.42 185.996 li
128.416 185.893 li
128.4 184.387 li
128.386 184.514 li
128.319 186.165 li
128.306 185.954 li
128.294 185.531 li
128.285 184.849 li
128.272 185.146 li
128.257 185.786 li
128.254 185.671 li
128.251 185.552 li
128.25 185.66 li
128.248 185.581 li
128.24 185.813 li
128.232 185.529 li
128.224 185.505 li
128.219 185.534 li
128.216 185.22 li
128.213 185.15 li
128.211 185.312 li
128.21 185.255 li
128.208 185.203 li
128.207 185.293 li
128.204 185.305 li
128.203 185.252 li
128.202 185.25 li
128.2 185.158 li
128.199 185.213 li
128.196 185.504 li
128.192 185.015 li
128.188 185.184 li
128.178 185.118 li
128.167 186.256 li
128.157 186.14 li
128.129 185.678 li
128.105 184.471 li
128.079 184.966 li
128.058 184.63 li
128.042 185.04 li
128.034 184.872 li
128.032 184.974 li
128.03 185.062 li
128.028 185.002 li
128.027 185.095 li
128.024 185.087 li
128.02 185.033 li
128.017 185.352 li
128.012 184.993 li
128.006 185.494 li
128.003 185.388 li
128.002 185.307 li
128.001 185.209 li
128 185.202 li
127.999 185.202 li
127.999 185.201 li
127.998 185.192 li
127.997 185.145 li
127.997 185.662 li
127.996 185.648 li
127.992 185.568 li
127.986 185.375 li
127.984 185.229 li
127.982 185.284 li
127.981 185.198 li
127.98 185.299 li
127.979 185.227 li
127.978 185.169 li
127.978 185.101 li
127.977 185.121 li
127.976 185.329 li
127.975 185.247 li
127.971 185.285 li
127.967 184.504 li
127.963 184.574 li
127.953 184.802 li
127.949 184.967 li
127.945 185.569 li
127.941 185.46 li
127.921 184.539 li
127.912 184.776 li
127.908 184.944 li
127.905 184.038 li
127.902 184.068 li
127.888 184.237 li
127.849 185.398 li
127.803 185.978 li
127.738 184.108 li
127.716 184.498 li
127.692 185.467 li
127.679 185.197 li
127.675 185.032 li
127.673 184.898 li
127.671 184.906 li
127.669 184.979 li
127.667 184.951 li
127.667 184.889 li
127.666 184.809 li
127.665 185.067 li
127.665 185.033 li
127.664 184.962 li
127.662 184.79 li
127.66 185.447 li
127.657 185.403 li
127.645 185.114 li
127.614 185.376 li
127.604 185.168 li
127.599 184.982 li
127.597 184.837 li
127.595 184.904 li
127.592 184.813 li
127.59 184.812 li
127.589 184.814 li
127.587 184.84 li
127.586 183.878 li
127.584 183.896 li
127.577 183.997 li
127.558 184.395 li
127.551 185.035 li
127.545 184.591 li
127.541 184.49 li
127.539 184.951 li
127.536 184.784 li
127.533 184.807 li
127.53 185.855 li
127.527 185.827 li
127.511 185.675 li
127.471 185.109 li
127.437 183.94 li
127.425 184.204 li
127.42 184.379 li
127.419 184.518 li
127.418 184.507 li
127.417 184.388 li
127.416 184.453 li
127.415 184.547 li
127.414 184.647 li
127.414 184.544 li
127.413 184.661 li
127.412 184.591 li
127.411 184.466 li
127.41 184.529 li
127.409 184.588 li
127.408 184.455 li
127.407 184.473 li
127.406 184.591 li
127.405 184.491 li
127.404 184.255 li
127.403 184.307 li
127.4 184.456 li
127.398 184.27 li
127.393 184.733 li
127.388 184.086 li
127.382 184.277 li
127.364 183.984 li
127.357 184.167 li
127.353 184.335 li
127.349 184.617 li
127.344 184.677 li
127.34 184.397 li
127.336 184.429 li
127.333 184.573 li
127.33 184.567 li
127.327 184.561 li
127.325 184.556 li
127.322 184.552 li
127.32 184.552 li
127.318 184.569 li
127.315 184.894 li
127.313 184.817 li
127.308 184.62 li
127.304 183.724 li
127.3 183.786 li
127.291 183.968 li
127.281 184.35 li
127.271 184.754 li
127.268 184.612 li
127.265 184.618 li
127.263 184.506 li
127.262 183.85 li
127.26 183.878 li
127.253 184.053 li
127.228 183.213 li
127.201 183.523 li
127.186 183.781 li
127.169 184.425 li
127.152 183.514 li
127.128 184.069 li
127.115 183.94 li
127.112 184.036 li
127.111 184.138 li
127.109 184.224 li
127.108 184.345 li
127.107 184.127 li
127.107 184.173 li
127.105 184.134 li
127.102 184.646 li
127.099 184.555 li
127.086 183.841 li
127.081 184.041 li
127.075 184.52 li
127.052 185.334 li
127.029 185.084 li
126.991 184.306 li
126.959 183.464 li
126.949 183.67 li
126.939 184.373 li
126.928 183.796 li
126.915 184.543 li
126.905 184.175 li
126.899 184.142 li
126.897 184.569 li
126.895 184.522 li
126.885 184.11 li
126.876 183.625 li
126.87 183.916 li
126.868 183.522 li
126.866 183.573 li
126.855 184.29 li
126.844 183.538 li
126.806 185.25 li
126.77 184.9 li
126.734 184.338 li
126.705 182.862 li
126.677 183.325 li
126.638 181.712 li
126.609 181.933 li
126.572 182.251 li
126.531 182.692 li
126.482 183.936 li
126.457 184.57 li
126.431 184.21 li
126.382 183.007 li
126.331 185.22 li
126.285 184.89 li
126.223 184.288 li
126.198 183.912 li
126.187 183.606 li
126.177 183.049 li
126.166 183.98 li
126.153 183.719 li
126.105 184.678 li
126.056 184.208 li
126.031 183.861 li
126.019 183.603 li
126.011 183.306 li
126.003 183.395 li
126.001 183.275 li
126 183.179 li
125.998 183.083 li
125.997 183.106 li
125.996 183.369 li
125.994 183.249 li
125.99 183.259 li
125.985 183.48 li
125.978 182.985 li
125.974 182.931 li
125.969 183.709 li
125.963 183.593 li
125.956 183.362 li
125.953 183.196 li
125.95 183.515 li
125.947 183.411 li
125.933 182.403 li
125.917 182.92 li
125.901 183.315 li
125.891 182.84 li
125.882 182.736 li
125.881 182.825 li
125.879 182.926 li
125.878 183.493 li
125.877 183.459 li
125.87 183.227 li
125.856 183.315 li
125.843 182.8 li
125.833 182.797 li
125.825 182.73 li
125.817 183.616 li
125.808 183.432 li
125.795 182.673 li
125.787 180.956 li
125.781 181.007 li
125.715 181.59 125.673 182.164 125.667 182.751 cv
125.666 182.846 li
125.665 181.549 li
125.665 181.553 li
125.663 181.573 li
125.655 181.677 li
125.619 182.331 li
125.582 181.908 li
125.571 182.129 li
125.562 182.387 li
125.557 183.048 li
125.552 182.771 li
125.55 182.828 li
125.549 182.732 li
125.549 182.787 li
125.547 182.739 li
125.546 182.828 li
125.546 182.727 li
125.545 182.658 li
125.545 182.799 li
125.544 182.61 li
125.543 182.626 li
125.542 182.703 li
125.541 182.584 li
125.54 182.572 li
125.54 182.617 li
125.539 182.621 li
125.539 182.69 li
125.539 182.597 li
125.538 182.593 li
125.538 182.55 li
125.537 182.597 li
125.536 182.585 li
125.535 182.497 li
125.534 182.574 li
125.533 182.457 li
125.533 182.491 li
125.53 182.568 li
125.528 182.5 li
125.528 182.593 li
125.527 182.481 li
125.526 182.538 li
125.526 182.717 li
125.524 182.727 li
125.523 182.823 li
125.522 182.762 li
125.521 182.44 li
125.521 182.479 li
125.52 182.576 li
125.519 182.232 li
125.518 182.264 li
125.513 182.524 li
125.51 182.31 li
125.508 182.451 li
125.499 182.308 li
125.496 182.482 li
125.494 182.741 li
125.493 182.793 li
125.492 182.678 li
125.491 182.691 li
125.49 182.999 li
125.488 182.954 li
125.484 182.725 li
125.48 182.738 li
125.476 183.003 li
125.47 182.734 li
125.465 182.781 li
125.46 181.87 li
125.456 181.96 li
125.445 182.29 li
125.435 182.762 li
125.425 182.976 li
125.418 182.71 li
125.412 183.002 li
125.401 182.335 li
125.39 182.325 li
125.381 182.189 li
125.375 181.633 li
125.37 181.723 li
125.352 182.164 li
125.336 181.363 li
125.321 181.599 li
125.305 181.94 li
125.299 182.152 li
125.296 182.312 li
125.294 182.078 li
125.291 182.258 li
125.283 182.238 li
125.277 181.999 li
125.272 182.263 li
125.267 182.262 li
125.262 182.228 li
125.258 181.322 li
125.255 181.367 li
125.239 181.641 li
125.228 181.892 li
125.224 182.025 li
125.222 182.129 li
125.22 182.392 li
125.217 180.492 li
125.214 180.521 li
125.15 181.156 125.112 181.789 125.116 182.427 cv
125.107 182.548 li
125.103 182.363 li
125.102 182.126 li
125.102 182.052 li
125.101 182.109 li
125.098 182.021 li
125.097 182.153 li
125.096 182.153 li
125.094 182.16 li
125.093 182.162 li
125.092 182.178 li
125.091 182.261 li
125.091 182.24 li
125.09 182.129 li
125.089 182.513 li
125.088 182.459 li
125.085 182.303 li
125.083 182.453 li
125.081 182.267 li
125.08 182.263 li
125.078 182.245 li
125.077 182.172 li
125.076 182.467 li
125.074 182.372 li
125.067 182.535 li
125.064 182.403 li
125.063 182.321 li
125.062 182.249 li
125.061 182.107 li
125.061 182.602 li
125.06 182.572 li
125.055 182.36 li
125.045 182.381 li
125.034 183.562 li
125.024 183.472 li
124.978 182.937 li
124.968 182.763 li
124.958 182.541 li
124.936 180.689 li
124.916 180.951 li
124.888 181.493 li
124.843 183.263 li
124.8 182.756 li
124.782 182.413 li
124.772 182.01 li
124.769 182.151 li
124.765 181.765 li
124.761 181.773 li
124.758 181.799 li
124.757 181.587 li
124.756 181.64 li
124.755 181.718 li
124.753 182.066 li
124.752 181.968 li
124.749 181.967 li
124.746 182.004 li
124.744 181.318 li
124.741 181.391 li
124.737 181.54 li
124.733 181.917 li
124.727 181.066 li
124.72 181.212 li
124.711 181.493 li
124.708 181.635 li
124.705 181.706 li
124.703 181.18 li
124.701 181.229 li
124.69 181.639 li
124.686 181.269 li
124.681 181.421 li
124.663 180.228 li
124.649 180.408 li
124.627 180.738 li
124.6 181.329 li
124.573 180.872 li
124.553 181.462 li
124.552 181.531 li
124.552 181.831 li
124.551 181.731 li
124.549 181.728 li
124.548 181.721 li
124.547 181.693 li
124.546 181.539 li
124.545 181.427 li
124.544 181.488 li
124.54 181.788 li
124.537 182.347 li
124.533 182.269 li
124.523 182.027 li
124.521 181.913 li
124.518 181.707 li
124.516 181.78 li
124.515 181.51 li
124.514 181.541 li
124.513 181.86 li
124.512 181.768 li
124.507 181.852 li
124.506 181.771 li
124.505 181.438 li
124.503 181.563 li
124.502 181.648 li
124.501 181.444 li
124.499 181.042 li
124.498 181.073 li
124.492 181.27 li
124.475 180.592 li
124.456 180.968 li
124.448 181.24 li
124.445 181.444 li
124.441 181.404 li
124.437 183.048 li
124.433 183.013 li
124.414 182.835 li
124.371 182.325 li
124.346 181.719 li
124.329 181.968 li
124.322 181.735 li
124.319 181.583 li
124.317 181.378 li
124.315 181.555 li
124.313 181.178 li
124.311 181.298 li
124.31 181.505 li
124.308 181.558 li
124.306 181.354 li
124.304 181.382 li
124.303 181.667 li
124.302 181.589 li
124.301 181.505 li
124.3 181.539 li
124.3 181.423 li
124.299 182.048 li
124.298 182.034 li
124.295 181.959 li
124.284 181.579 li
124.275 181.59 li
124.265 182.077 li
124.254 181.832 li
124.249 181.624 li
124.247 181.479 li
124.245 181.075 li
124.242 181.266 li
124.24 181.269 li
124.238 181.299 li
124.236 181.449 li
124.234 182.126 li
124.232 182.087 li
124.221 181.866 li
124.193 180.872 li
124.159 182.856 li
124.128 182.576 li
124.088 182.112 li
124.073 181.872 li
124.06 181.531 li
124.027 181.834 li
124.015 181.553 li
124.009 181.294 li
124.002 182.524 li
123.995 182.461 li
123.963 182.111 li
123.928 181.493 li
123.908 180.738 li
123.889 180.684 li
123.881 179.228 li
123.876 179.317 li
123.847 179.826 123.814 180.332 123.812 180.842 cv
123.807 181.188 li
123.804 181.037 li
123.802 180.631 li
123.801 180.737 li
123.8 181.087 li
123.799 180.994 li
123.798 180.856 li
123.797 180.873 li
123.797 180.986 li
123.796 180.858 li
123.795 180.913 li
123.794 182.109 li
123.793 182.101 li
123.789 182.056 li
123.77 181.817 li
123.739 181.116 li
123.72 181.276 li
123.714 181.047 li
123.712 180.852 li
123.711 180.575 li
123.708 180.872 li
123.705 180.598 li
123.704 180.729 li
123.702 180.679 li
123.701 180.852 li
123.699 180.762 li
123.698 180.903 li
123.697 180.539 li
123.695 180.662 li
123.691 180.616 li
123.688 180.952 li
123.685 180.264 li
123.682 180.365 li
123.679 180.486 li
123.677 180.582 li
123.676 180.919 li
123.674 180.716 li
123.673 180.665 li
123.672 180.588 li
123.672 180.644 li
123.669 180.385 li
123.665 180.626 li
123.661 180.573 li
123.654 182.177 li
123.647 182.117 li
123.617 181.787 li
123.585 181.263 li
123.576 180.981 li
123.573 180.821 li
123.571 180.525 li
123.568 181.372 li
123.564 181.302 li
123.557 181.108 li
123.549 180.756 li
123.547 180.81 li
123.544 180.561 li
123.542 180.552 li
123.541 180.502 li
123.539 180.754 li
123.536 181.174 li
123.533 181.089 li
123.524 180.42 li
123.516 180.176 li
123.512 180.38 li
123.511 180.535 li
123.509 180.55 li
123.508 180.561 li
123.507 180.581 li
123.507 180.777 li
123.505 180.556 li
123.504 180.721 li
123.502 180.014 li
123.501 180.057 li
123.493 180.412 li
123.486 180.329 li
123.477 181.031 li
123.47 180.734 li
123.464 180.866 li
123.461 180.702 li
123.459 180.321 li
123.458 180.456 li
123.456 180.03 li
123.455 180.076 li
123.451 180.243 li
123.45 180.312 li
123.449 180.417 li
123.445 180.362 li
123.44 180.976 li
123.435 180.751 li
123.423 180.811 li
123.415 179.912 li
123.406 180.256 li
123.395 180.03 li
123.392 180.179 li
123.388 180.652 li
123.381 180.744 li
123.379 180.593 li
123.377 179.625 li
123.376 179.651 li
123.371 179.796 li
123.358 180.297 li
123.354 180.158 li
123.35 180.663 li
123.349 180.532 li
123.347 180.829 li
123.345 180.756 li
123.343 180.586 li
123.34 180.164 li
123.339 180.279 li
123.337 180.319 li
123.336 180.626 li
123.333 180.603 li
123.331 180.573 li
123.329 180.626 li
123.328 180.449 li
123.327 179.504 li
123.326 179.52 li
123.323 179.605 li
123.308 180.085 li
123.293 179.656 li
123.286 179.857 li
123.281 180.097 li
123.277 180.761 li
123.273 180.567 li
123.263 180.623 li
123.257 179.72 li
123.25 179.936 li
123.226 181.055 li
123.206 180.449 li
123.193 179.983 li
123.183 180.444 li
123.176 180.498 li
123.171 179.463 li
123.167 179.563 li
123.16 179.791 li
123.155 180.086 li
123.149 180.043 li
123.144 180.569 li
123.139 179.913 li
123.137 180.009 li
123.136 180.101 li
123.135 180.11 li
123.134 180.146 li
123.133 181.409 li
123.132 181.395 li
123.126 181.323 li
123.098 180.906 li
123.076 180.066 li
123.054 181.304 li
123.028 180.96 li
123.004 180.367 li
122.987 180.656 li
122.976 180.238 li
122.969 180.305 li
122.963 179.718 li
122.959 179.104 li
122.955 179.189 li
122.945 179.503 li
122.937 179.925 li
122.926 180.365 li
122.923 180.184 li
122.92 179.899 li
122.918 179.84 li
122.915 180.17 li
122.912 179.094 li
122.911 179.137 li
122.902 179.409 li
122.895 179.704 li
122.883 180.58 li
122.87 180.075 li
122.862 179.683 li
122.852 180.519 li
122.84 180.034 li
122.832 179.619 li
122.83 179.845 li
122.829 179.791 li
122.828 179.837 li
122.827 179.577 li
122.826 179.633 li
122.824 179.799 li
122.822 179.563 li
122.819 179.742 li
122.813 179.699 li
122.812 178.171 li
122.812 178.208 li
122.815 178.642 122.792 179.076 122.783 179.51 cv
122.763 180.549 li
122.752 180.284 li
122.746 179.963 li
122.741 179.986 li
122.736 180.51 li
122.731 180.382 li
122.722 180.083 li
122.715 179.619 li
122.71 179.334 li
122.706 179.581 li
122.701 180.001 li
122.697 179.455 li
122.694 179.721 li
122.689 180.071 li
122.686 179.815 li
122.685 179.194 li
122.683 179.266 li
122.674 178.296 li
122.673 178.42 li
122.67 178.724 122.658 179.028 122.651 179.332 cv
122.647 179.59 li
122.642 179.55 li
122.638 180.119 li
122.634 179.895 li
122.625 179.861 li
122.62 179.93 li
122.616 179.537 li
122.613 179.094 li
122.609 179.214 li
122.604 179.585 li
122.595 179.859 li
122.587 179.952 li
122.585 179.741 li
122.583 179.726 li
122.583 179.741 li
122.581 180.458 li
122.58 180.437 li
122.575 180.326 li
122.564 180.061 li
122.561 179.898 li
122.558 179.711 li
122.557 179.73 li
122.557 179.573 li
122.556 179.428 li
122.555 179.548 li
122.552 179.581 li
122.55 179.722 li
122.548 179.723 li
122.546 179.753 li
122.546 178.512 li
122.545 178.53 li
122.543 178.624 li
122.539 178.796 li
122.533 179.027 li
122.53 179.157 li
122.526 179.36 li
122.518 179.097 li
122.513 179.314 li
122.511 179.481 li
122.509 179.258 li
122.507 179.466 li
122.503 179.428 li
122.503 177.806 li
122.504 177.83 li
122.527 178.318 122.503 178.804 122.495 179.292 cv
122.493 179.405 li
122.492 179.35 li
122.49 179.494 li
122.489 179.485 li
122.487 179.422 li
122.486 179.669 li
122.486 179.52 li
122.485 179.512 li
122.484 179.445 li
122.484 179.38 li
122.483 179.456 li
122.481 179.401 li
122.477 179.788 li
122.473 179.416 li
122.469 179.324 li
122.469 179.396 li
122.468 179.486 li
122.467 179.297 li
122.467 179.353 li
122.462 179.921 li
122.457 179.687 li
122.453 180.03 li
122.447 179.831 li
122.442 178.596 li
122.439 178.733 li
122.434 178.957 li
122.43 179.148 li
122.427 179.292 li
122.426 179.398 li
122.425 179.568 li
122.424 179.538 li
122.423 179.349 li
122.422 179.468 li
122.422 179.545 li
122.421 179.529 li
122.421 179.438 li
122.42 178.767 li
122.42 178.777 li
122.419 178.827 li
122.412 179.121 li
122.409 179.317 li
122.404 180.259 li
122.398 180.149 li
122.382 179.566 li
122.376 178.95 li
122.366 179.645 li
122.357 179.708 li
122.352 178.826 li
122.348 179.022 li
122.345 179.189 li
122.344 179.322 li
122.343 178.536 li
122.343 178.556 li
122.339 178.803 122.33 179.051 122.329 179.298 cv
122.328 179.597 li
122.325 179.493 li
122.323 179.485 li
122.321 179.462 li
122.32 179.433 li
122.319 179.211 li
122.319 179.268 li
122.318 179.339 li
122.318 180.022 li
122.317 180.006 li
122.314 179.925 li
122.306 179.66 li
122.303 179.04 li
122.301 179.193 li
122.295 179.047 li
122.293 179.233 li
122.292 178.529 li
122.291 178.572 li
122.287 178.756 li
122.281 179.06 li
122.268 179.861 li
122.262 179.677 li
122.259 179.469 li
122.255 179.778 li
122.251 179.599 li
122.232 180.36 li
122.214 180.086 li
122.198 179.73 li
122.193 179.564 li
122.19 179.022 li
122.189 179.147 li
122.187 179.461 li
122.186 179.369 li
122.185 179.289 li
122.185 179.125 li
122.184 179.227 li
122.184 179.25 li
122.183 179.155 li
122.183 179.359 li
122.183 179.299 li
122.182 179.585 li
122.182 179.564 li
122.18 179.458 li
122.171 179.572 li
122.168 179.36 li
122.165 179.422 li
122.162 179.133 li
122.16 179.09 li
122.155 180.244 li
122.15 180.174 li
122.116 179.792 122.127 179.384 122.106 179.011 cv
122.104 178.995 li
122.103 179.135 li
122.102 179.212 li
122.101 179.05 li
122.1 179.089 li
122.099 179.25 li
122.098 179.961 li
122.097 179.938 li
122.09 179.812 li
122.077 179.395 li
122.063 179.836 li
122.049 179.475 li
122.047 179.387 li
122.046 179.263 li
122.041 179.262 li
122.036 179.356 li
122.035 179.277 li
122.034 179.189 li
122.034 178.996 li
122.032 179.156 li
122.031 179.063 li
122.03 179.138 li
122.03 178.977 li
122.028 178.999 li
122.028 179.128 li
122.027 178.726 li
122.026 178.763 li
122.022 179.177 li
122.02 178.412 li
122.018 178.551 li
122.015 178.793 li
122.013 178.944 li
122.01 179.37 li
122.008 179.214 li
122.006 178.836 li
122.006 178.905 li
122.005 179.063 li
122.004 178.863 li
122.003 178.947 li
122.001 178.845 li
121.999 178.989 li
121.998 178.924 li
121.998 178.997 li
121.997 179.119 li
121.996 179.098 li
121.996 178.972 li
121.995 179.032 li
121.995 179.048 li
121.994 179.159 li
121.994 179.165 li
121.993 179.024 li
121.993 178.949 li
121.992 178.899 li
121.992 179.017 li
121.991 178.98 li
121.991 178.995 li
121.99 179.108 li
121.99 179.088 li
121.989 178.947 li
121.989 179.46 li
121.988 179.452 li
121.987 179.411 li
121.985 179.281 li
121.984 179.21 li
121.983 179.127 li
121.983 178.872 li
121.982 178.939 li
121.98 178.847 li
121.979 178.981 li
121.978 178.966 li
121.977 178.817 li
121.976 178.932 li
121.974 179.153 li
121.972 179.371 li
121.969 179.181 li
121.965 179.227 li
121.962 178.623 li
121.96 178.772 li
121.952 179.209 li
121.944 179.194 li
121.936 179.236 li
121.936 177.942 li
121.938 178.004 li
121.946 178.224 121.941 178.446 121.938 178.666 cv
121.936 178.891 li
121.933 178.889 li
121.93 178.857 li
121.93 178.144 li
121.93 178.192 li
121.931 178.307 li
121.93 178.442 li
121.927 178.63 li
121.925 178.815 li
121.92 179.284 li
121.915 178.741 li
121.906 179.268 li
121.9 178.745 li
121.888 179.856 li
121.874 179.628 li
121.862 179.327 li
121.857 179.031 li
121.855 179.18 li
121.853 178.988 li
121.851 178.841 li
121.85 178.846 li
121.848 178.873 li
121.846 178.984 li
121.845 178.974 li
121.844 178.96 li
121.844 178.897 li
121.843 179.55 li
121.841 179.522 li
121.835 179.37 li
121.83 179.162 li
121.828 179.035 li
121.828 178.964 li
121.827 178.81 li
121.827 178.956 li
121.826 178.932 li
121.825 178.809 li
121.824 179.121 li
121.822 178.977 li
121.821 178.97 li
121.819 178.941 li
121.818 178.831 li
121.817 178.855 li
121.816 178.999 li
121.815 178.754 li
121.813 178.953 li
121.812 178.988 li
121.811 178.836 li
121.811 178.843 li
121.81 178.853 li
121.81 178.906 li
121.809 178.805 li
121.809 178.92 li
121.808 178.901 li
121.808 178.76 li
121.808 178.81 li
121.807 178.812 li
121.807 178.907 li
121.807 178.899 li
121.806 178.85 li
121.806 178.962 li
121.805 178.979 li
121.805 178.842 li
121.805 178.857 li
121.804 178.959 li
121.804 179.052 li
121.803 179.011 li
121.802 178.673 li
121.8 178.68 li
121.799 178.768 li
121.799 178.829 li
121.799 178.73 li
121.798 178.793 li
121.797 178.779 li
121.796 178.665 li
121.795 178.798 li
121.794 178.8 li
121.793 178.812 li
121.792 178.816 li
121.791 178.836 li
121.791 178.962 li
121.79 178.818 li
121.789 178.797 li
121.789 178.944 li
121.788 178.64 li
121.788 178.71 li
121.786 178.509 li
121.781 179.046 li
121.773 179.216 li
121.768 178.91 li
121.765 178.659 li
121.761 179.045 li
121.76 178.118 li
121.761 178.195 li
121.763 178.389 121.761 178.589 121.756 178.783 cv
121.755 178.869 li
121.754 178.76 li
121.753 178.747 li
121.752 178.636 li
121.75 178.673 li
121.748 178.87 li
121.746 178.678 li
121.744 178.922 li
121.741 178.947 li
121.733 180.659 li
121.726 180.6 li
121.634 179.931 121.596 179.284 121.586 178.609 cv
121.586 178.571 li
121.585 178.67 li
121.584 179.065 li
121.583 179.027 li
121.579 178.762 li
121.575 178.734 li
121.573 178.717 li
121.572 178.693 li
121.571 178.597 li
121.57 178.668 li
121.569 178.412 li
121.569 178.508 li
121.568 178.338 li
121.567 178.463 li
121.565 178.504 li
121.563 178.8 li
121.566 177.5 li
121.572 177.571 li
121.597 177.916 121.604 178.262 121.595 178.608 cv
121.592 178.767 li
121.589 178.722 li
121.587 178.585 li
121.586 178.596 li
121.585 178.619 li
121.584 178.753 li
121.583 178.714 li
121.582 178.825 li
121.581 178.512 li
121.581 178.572 li
121.58 178.61 li
121.58 178.627 li
121.579 178.673 li
121.579 178.63 li
121.579 178.719 li
121.578 178.628 li
121.578 178.741 li
121.577 178.691 li
121.577 178.675 li
121.576 178.6 li
121.576 178.599 li
121.575 178.608 li
121.575 178.476 li
121.574 178.518 li
121.573 178.71 li
121.572 178.789 li
121.571 178.564 li
121.57 178.528 li
121.566 179.388 li
121.561 179.304 li
121.552 179.097 li
121.546 178.835 li
121.542 178.551 li
121.541 178.56 li
121.541 178.582 li
121.54 178.748 li
121.538 178.69 li
121.537 178.959 li
121.535 178.864 li
121.533 178.713 li
121.532 178.274 li
121.532 178.44 li
121.53 178.461 li
121.529 178.425 li
121.529 178.52 li
121.53 177.594 li
121.532 177.619 li
121.55 177.888 121.558 178.157 121.554 178.427 cv
121.554 178.571 li
121.553 178.567 li
121.553 178.543 li
121.552 178.557 li
121.552 178.679 li
121.551 178.742 li
121.55 178.665 li
121.55 178.707 li
121.549 178.473 li
121.549 178.505 li
121.547 178.784 li
121.536 179.712 li
121.524 179.561 li
121.496 179.198 121.486 178.837 121.485 178.473 cv
121.484 178.43 li
121.478 179.361 li
121.471 179.237 li
121.462 179.057 li
121.456 178.856 li
121.452 178.693 li
121.451 178.605 li
121.449 178.627 li
121.444 179.312 li
121.438 179.214 li
121.43 179.043 li
121.423 178.858 li
121.418 178.616 li
121.413 178.935 li
121.407 178.738 li
121.405 178.493 li
121.408 177.093 li
121.412 177.135 li
121.447 177.5 121.471 177.867 121.474 178.233 cv
121.474 178.359 li
121.473 178.309 li
121.472 178.501 li
121.469 178.741 li
121.467 178.333 li
121.467 178.443 li
121.465 178.449 li
121.464 178.433 li
121.464 178.22 li
121.465 178.312 li
121.463 178.769 li
121.461 178.653 li
121.46 178.571 li
121.46 178.636 li
121.459 178.55 li
121.459 178.441 li
121.459 178.505 li
121.458 178.648 li
121.457 178.616 li
121.456 178.444 li
121.458 177.629 li
121.46 177.667 li
121.48 177.949 121.482 178.23 121.48 178.513 cv
121.477 178.814 li
121.475 178.667 li
121.474 178.466 li
121.473 178.426 li
121.466 179.591 li
121.458 179.489 li
121.434 179.18 121.423 178.87 121.421 178.56 cv
121.421 177.855 li
121.422 177.881 li
121.431 178.072 121.434 178.272 121.429 178.463 cv
121.428 178.564 li
121.427 178.535 li
121.426 178.428 li
121.425 178.399 li
121.429 177.494 li
121.433 177.558 li
121.451 177.815 121.462 178.076 121.46 178.334 cv
121.46 178.45 li
121.459 178.363 li
121.459 178.434 li
121.458 178.485 li
121.458 178.501 li
121.457 178.602 li
121.458 177.726 li
121.459 177.751 li
121.47 177.94 121.474 178.128 121.475 178.318 cv
121.473 178.832 li
121.47 178.666 li
121.469 178.388 li
121.468 178.341 li
121.468 178.489 li
121.468 178.256 li
121.468 178.273 li
121.467 178.384 li
121.466 178.435 li
121.466 178.284 li
121.465 178.46 li
121.465 178.282 li
121.465 178.331 li
121.464 178.498 li
121.461 178.763 li
121.458 178.681 li
121.457 178.353 li
121.455 178.352 li
121.454 178.834 li
121.451 178.666 li
121.438 180.032 li
121.424 179.905 li
121.369 179.384 121.339 178.863 121.341 178.339 cv
121.341 178.309 li
121.339 178.492 li
121.337 178.447 li
121.337 178.279 li
121.337 178.339 li
121.336 178.447 li
121.336 178.42 li
121.337 177.803 li
121.339 177.843 li
121.344 178.004 121.349 178.164 121.349 178.326 cv
121.347 178.479 li
121.346 178.441 li
121.347 178.165 li
121.347 178.367 li
121.346 178.38 li
121.345 178.446 li
121.345 178.277 li
121.345 178.573 li
121.344 178.545 li
121.343 178.529 li
121.342 178.475 li
121.341 178.548 li
121.34 178.371 li
121.34 178.385 li
121.339 178.469 li
121.338 178.588 li
121.337 178.48 li
121.337 178.284 li
121.337 178.325 li
121.336 178.369 li
121.336 178.28 li
121.336 178.309 li
121.334 178.546 li
121.334 177.956 li
121.335 177.987 li
121.338 178.08 li
121.339 178.168 li
121.34 178.257 li
121.339 178.668 li
121.336 178.476 li
121.335 178.437 li
121.335 178.204 li
121.335 178.305 li
121.334 178.461 li
121.333 178.531 li
121.332 178.203 li
121.333 178.239 li
121.333 178.318 li
121.332 178.458 li
121.331 178.422 li
121.332 178.01 li
121.333 178.075 li
121.335 178.163 li
121.336 178.252 li
121.335 178.489 li
121.333 178.453 li
121.333 178.363 li
121.332 178.376 li
121.331 178.501 li
121.331 178.249 li
121.331 178.322 li
121.33 178.46 li
121.329 178.422 li
121.329 178.112 li
121.33 178.178 li
121.331 178.269 li
121.331 178.694 li
121.33 178.646 li
121.328 178.5 li
121.327 178.341 li
121.327 178.365 li
121.325 178.456 li
121.324 178.42 li
121.324 178.173 li
121.325 178.253 li
121.324 178.659 li
121.322 178.489 li
121.316 178.934 li
121.311 178.786 li
121.307 178.628 li
121.304 178.426 li
121.303 178.391 li
121.305 177.895 li
121.308 177.971 li
121.31 178.069 li
121.312 178.159 li
121.313 178.246 li
121.312 178.512 li
121.312 178.092 li
121.312 178.108 li
121.313 178.189 li
121.314 178.28 li
121.313 178.292 li
121.313 178.263 li
121.313 178.321 li
121.312 178.49 li
121.311 178.496 li
121.311 178.382 li
121.311 178.386 li
121.31 178.55 li
121.309 178.486 li
121.31 178.193 li
121.31 178.285 li
121.31 178.202 li
121.31 178.441 li
121.309 178.416 li
121.308 178.347 li
121.308 178.413 li
121.307 178.392 li
121.307 178.273 li
121.307 178.311 li
121.307 178.257 li
121.307 178.39 li
121.308 178.054 li
121.309 178.098 li
121.31 178.187 li
121.311 178.277 li
121.31 178.277 li
121.31 178.238 li
121.31 178.343 li
121.309 178.352 li
121.309 178.408 li
121.308 178.334 li
121.308 178.348 li
121.307 178.386 li
121.306 178.492 li
121.305 178.435 li
121.304 178.479 li
121.305 178.19 li
121.305 178.325 li
121.304 178.345 li
121.303 178.406 li
121.303 178.306 li
121.304 178.172 li
121.305 178.259 li
121.305 178.08 li
121.306 178.154 li
121.307 178.24 li
121.307 178.59 li
121.306 178.523 li
121.304 178.428 li
121.303 178.398 li
121.304 178.199 li
121.304 178.29 li
121.303 178.449 li
121.301 178.432 li
121.299 178.393 li
121.301 178.087 li
121.302 178.178 li
121.303 178.266 li
121.303 178.174 li
121.304 178.247 li
121.303 178.696 li
121.3 178.565 li
121.298 178.233 li
121.299 178.283 li
121.298 178.411 li
121.298 178.417 li
121.297 178.404 li
121.297 178.035 li
121.299 178.087 li
121.3 178.178 li
121.301 178.266 li
121.301 178.189 li
121.301 178.265 li
121.301 178.167 li
121.302 178.239 li
121.302 178.381 li
121.301 178.456 li
121.292 179.528 li
121.283 179.418 li
121.253 179.067 121.238 178.711 121.236 178.358 cv
121.236 178.204 li
121.237 178.272 li
121.236 178.373 li
121.236 178.284 li
@
2 lj
[10 6 ] 0 dsh
120.496 266.515 mo
121.222 119.523 li
@
0 lj
[] 0 dsh
120.496 263.515 mo
120.496 269.515 li
@
117.496 266.515 mo
123.496 266.515 li
@
118.375 264.394 mo
122.617 268.636 li
@
118.375 268.636 mo
122.617 264.394 li
@
121.223 116.523 mo
121.223 122.523 li
@
118.223 119.523 mo
124.223 119.523 li
@
119.102 117.402 mo
123.344 121.644 li
@
119.102 121.644 mo
123.344 117.402 li
@
499.935 175.286 mo
499.935 181.286 li
1 /0 /CSD get_res sepcs
.674 sep
@
496.935 178.286 mo
502.935 178.286 li
@
497.814 176.165 mo
502.056 180.407 li
@
497.814 180.407 mo
502.056 176.165 li
@
1 lj
499.935 178.286 mo
499.935 178.317 li
499.934 178.472 li
499.933 179.245 li
499.804 226.478 485.771 269.528 450.92 302.434 cv
449.691 303.581 li
448.451 304.715 li
418.654 331.63 379.439 346.688 339.865 351.247 cv
338.159 351.438 li
336.452 351.616 li
334.742 351.781 li
256.79 359.045 177.85 327.001 122.768 272.259 cv
121.847 271.335 li
120.934 270.41 li
1 /0 /CSD get_res sepcs
.148 sep
@
121.222 80.043 mo
122.186 81.025 li
123.139 82.007 li
124.083 82.99 li
144.034 103.918 163.489 130.834 171.353 159.05 cv
171.539 159.745 li
171.718 160.435 li
174.98 172.973 176.394 190.332 166.855 200.668 cv
166.634 200.903 li
166.41 201.132 li
166.183 201.357 li
153.299 213.658 132.466 205.653 121.536 194.569 cv
121.376 194.41 li
121.218 194.25 li
@
2 lj
[10 6 ] 0 dsh
120.934 270.41 mo
121.222 80.043 li
@
0 lj
[] 0 dsh
120.934 267.41 mo
120.934 273.41 li
@
117.934 270.41 mo
123.934 270.41 li
@
118.813 268.289 mo
123.055 272.531 li
@
118.813 272.531 mo
123.055 268.289 li
@
121.222 77.042 mo
121.222 83.042 li
@
118.222 80.042 mo
124.222 80.042 li
@
119.101 77.921 mo
123.343 82.163 li
@
119.101 82.163 mo
123.343 77.921 li
@
1 lj
121.222 161.257 mo
121.389 161.427 li
121.555 161.598 li
125.414 165.24 133.579 176.714 129.102 182.199 cv
129.024 182.279 li
126.795 184.44 123.17 183.039 121.272 181.112 cv
121.244 181.084 li
121.217 181.056 li
@
2 lj
[10 6 ] 0 dsh
121.218 194.25 mo
121.222 161.257 li
@
0 lj
[] 0 dsh
121.218 191.25 mo
121.218 197.25 li
@
118.218 194.25 mo
124.218 194.25 li
@
119.097 192.129 mo
123.339 196.371 li
@
119.097 196.371 mo
123.339 192.129 li
@
121.222 158.257 mo
121.222 164.257 li
@
118.222 161.257 mo
124.222 161.257 li
@
119.101 159.136 mo
123.343 163.378 li
@
119.101 163.378 mo
123.343 159.136 li
@
1 lj
121.222 175.331 mo
121.251 175.36 li
121.28 175.39 li
121.95 176.021 123.367 178.015 122.589 178.965 cv
122.583 178.972 li
122.576 178.979 li
122.189 179.354 121.559 179.11 121.231 178.776 cv
121.226 178.771 li
121.221 178.766 li
@
2 lj
[10 6 ] 0 dsh
121.217 181.056 mo
121.222 175.331 li
@
0 lj
[] 0 dsh
121.217 178.056 mo
121.217 184.056 li
@
118.217 181.056 mo
124.217 181.056 li
@
119.096 178.935 mo
123.338 183.177 li
@
119.096 183.177 mo
123.338 178.935 li
@
121.223 172.331 mo
121.223 178.331 li
@
118.223 175.331 mo
124.223 175.331 li
@
119.102 173.21 mo
123.344 177.452 li
@
119.102 177.452 mo
123.344 173.21 li
@
1 lj
121.222 177.773 mo
121.227 177.778 li
121.232 177.783 li
121.237 177.788 li
121.343 177.9 121.442 178.037 121.484 178.186 cv
121.485 178.189 li
121.486 178.193 li
121.486 178.197 li
121.497 178.235 121.501 178.281 121.496 178.32 cv
121.496 178.322 li
121.495 178.325 li
121.495 178.327 li
121.494 178.329 li
121.494 178.334 li
121.493 178.336 li
121.493 178.339 li
121.492 178.341 li
121.491 178.343 li
121.491 178.345 li
121.49 178.347 li
121.49 178.349 li
121.488 178.353 li
121.488 178.355 li
121.487 178.357 li
121.486 178.359 li
121.486 178.361 li
121.485 178.363 li
121.484 178.365 li
121.483 178.367 li
121.482 178.369 li
121.482 178.371 li
121.481 178.372 li
121.479 178.376 121.476 178.38 121.474 178.384 cv
121.473 178.386 li
121.472 178.387 li
121.47 178.391 121.467 178.395 121.464 178.398 cv
121.463 178.4 li
121.462 178.401 li
121.461 178.402 li
121.458 178.405 li
121.457 178.406 li
121.455 178.408 li
121.453 178.409 li
121.452 178.41 li
121.451 178.412 li
121.45 178.413 li
121.448 178.414 li
121.446 178.416 li
121.445 178.417 li
121.443 178.418 li
121.442 178.418 li
121.441 178.419 li
121.439 178.42 li
121.438 178.421 li
121.437 178.422 li
121.435 178.423 li
121.434 178.423 li
121.433 178.424 li
121.431 178.425 li
121.43 178.426 li
121.429 178.426 li
121.427 178.427 li
121.426 178.428 li
121.424 178.428 li
121.423 178.429 li
121.422 178.43 li
121.42 178.43 li
121.419 178.431 li
121.417 178.431 li
121.416 178.432 li
121.414 178.432 li
121.413 178.433 li
121.412 178.433 li
121.41 178.434 li
121.407 178.434 li
121.406 178.435 li
121.404 178.435 li
121.403 178.436 li
121.398 178.436 li
121.397 178.437 li
121.392 178.437 li
121.391 178.438 li
121.382 178.438 li
121.38 178.439 li
121.379 178.439 li
121.375 178.439 121.371 178.439 121.367 178.439 cv
121.365 178.439 li
121.364 178.438 li
121.361 178.438 li
121.352 178.439 121.356 178.437 121.35 178.437 cv
121.347 178.437 li
121.346 178.436 li
121.341 178.436 li
121.34 178.435 li
121.337 178.435 li
121.335 178.434 li
121.333 178.434 li
121.331 178.433 li
121.33 178.433 li
121.328 178.432 li
121.325 178.432 li
121.324 178.431 li
121.321 178.431 121.318 178.428 121.314 178.428 cv
121.313 178.428 li
121.311 178.427 li
121.31 178.426 li
121.308 178.426 li
121.307 178.425 li
121.306 178.425 li
121.304 178.424 li
121.303 178.424 li
121.302 178.423 li
121.3 178.423 li
121.299 178.422 li
121.297 178.421 li
121.296 178.421 li
121.295 178.42 li
121.293 178.42 li
121.292 178.419 li
121.291 178.418 li
121.29 178.418 li
121.288 178.417 li
121.287 178.416 li
121.286 178.416 li
121.284 178.415 li
121.283 178.415 li
121.282 178.414 li
121.281 178.413 li
121.279 178.412 li
121.278 178.412 li
121.277 178.411 li
121.276 178.41 li
121.274 178.41 li
121.273 178.409 li
121.272 178.408 li
121.271 178.408 li
121.27 178.407 li
121.268 178.406 li
121.267 178.405 li
121.266 178.405 li
121.265 178.404 li
121.264 178.403 li
121.263 178.402 li
121.261 178.402 li
121.26 178.401 li
121.259 178.4 li
121.257 178.398 li
121.256 178.398 li
121.255 178.397 li
121.254 178.396 li
121.253 178.395 li
121.251 178.395 li
121.25 178.394 li
121.249 178.393 li
121.248 178.392 li
121.247 178.391 li
121.246 178.391 li
121.245 178.39 li
121.244 178.389 li
121.241 178.386 121.241 178.388 121.237 178.383 cv
121.236 178.382 li
121.235 178.382 li
121.233 178.38 li
121.232 178.379 li
121.232 178.378 li
121.231 178.377 li
121.23 178.377 li
121.229 178.376 li
121.228 178.375 li
121.226 178.373 li
121.224 178.371 li
121.223 178.37 li
121.222 178.369 li
@
2 lj
[10 6 ] 0 dsh
121.221 178.766 mo
121.222 177.773 li
@
0 lj
[] 0 dsh
121.221 175.766 mo
121.221 181.766 li
@
118.221 178.766 mo
124.221 178.766 li
@
119.1 176.645 mo
123.342 180.887 li
@
119.1 180.887 mo
123.342 176.645 li
@
121.222 174.773 mo
121.222 180.773 li
@
118.222 177.773 mo
124.222 177.773 li
@
119.101 175.652 mo
123.343 179.894 li
@
119.101 179.894 mo
123.343 175.652 li
@
1 lj
121.222 178.197 mo
121.223 178.198 li
121.224 178.199 li
121.225 178.199 li
121.226 178.2 li
121.226 178.201 li
121.227 178.202 li
121.229 178.204 li
121.23 178.205 li
121.231 178.206 li
121.231 178.207 li
121.232 178.207 li
121.237 178.211 121.231 178.207 121.237 178.213 cv
121.237 178.214 li
121.238 178.214 li
121.239 178.215 li
121.239 178.216 li
121.24 178.217 li
121.241 178.218 li
121.241 178.219 li
121.242 178.22 li
121.243 178.221 li
121.244 178.222 li
121.245 178.223 li
121.245 178.224 li
121.246 178.225 li
121.246 178.226 li
121.247 178.226 li
121.248 178.227 li
121.248 178.228 li
121.249 178.229 li
121.249 178.23 li
121.25 178.231 li
121.251 178.232 li
121.251 178.233 li
121.252 178.234 li
121.252 178.235 li
121.253 178.236 li
121.254 178.237 li
121.254 178.238 li
121.255 178.239 li
121.255 178.24 li
121.256 178.24 li
121.256 178.241 li
121.257 178.242 li
121.257 178.244 li
121.258 178.244 li
121.258 178.245 li
121.259 178.246 li
121.259 178.249 121.262 178.25 121.262 178.253 cv
121.263 178.254 li
121.263 178.256 li
121.264 178.257 li
121.264 178.258 li
121.265 178.259 li
121.265 178.261 li
121.266 178.262 li
121.266 178.265 li
121.267 178.265 li
121.267 178.268 li
121.268 178.268 li
121.268 178.272 li
121.269 178.273 li
121.269 178.277 li
121.27 178.278 li
121.27 178.281 li
121.27 178.284 121.27 178.288 121.27 178.291 cv
121.27 178.293 li
121.269 178.293 li
121.269 178.297 li
121.268 178.297 li
121.268 178.3 li
121.267 178.3 li
121.267 178.302 li
121.266 178.302 li
121.266 178.303 li
121.265 178.304 li
121.265 178.305 li
121.264 178.305 li
121.264 178.306 li
121.263 178.306 li
121.263 178.307 li
121.262 178.307 li
121.262 178.308 li
121.261 178.308 li
121.261 178.309 li
121.259 178.309 li
121.259 178.31 li
121.257 178.31 li
121.257 178.311 li
121.255 178.311 li
121.254 178.312 li
121.251 178.312 li
@
2 lj
[10 6 ] 0 dsh
121.222 178.369 mo
121.222 178.197 li
@
0 lj
[] 0 dsh
121.222 175.369 mo
121.222 181.369 li
@
118.222 178.369 mo
124.222 178.369 li
@
119.101 176.248 mo
123.343 180.49 li
@
119.101 180.49 mo
123.343 176.248 li
@
121.222 175.197 mo
121.222 181.197 li
@
118.222 178.197 mo
124.222 178.197 li
@
119.101 176.076 mo
123.343 180.318 li
@
119.101 180.318 mo
123.343 176.076 li
@
499.935 175.286 mo
499.935 181.286 li
1 /0 /CSD get_res sepcs
.49 sep
@
496.935 178.286 mo
502.935 178.286 li
@
497.814 176.165 mo
502.056 180.407 li
@
497.814 180.407 mo
502.056 176.165 li
@
1 lj
499.935 178.286 mo
499.935 178.317 li
499.934 178.472 li
499.933 179.245 li
499.804 226.478 485.771 269.528 450.92 302.434 cv
449.691 303.581 li
448.451 304.715 li
418.654 331.63 379.439 346.688 339.865 351.247 cv
338.159 351.438 li
336.452 351.616 li
334.742 351.781 li
256.79 359.045 177.85 327.001 122.768 272.259 cv
121.847 271.335 li
120.934 270.41 li
1 /0 /CSD get_res sepcs
.477 sep
@
121.222 43.193 mo
122.547 44.544 li
123.858 45.895 li
125.157 47.245 li
152.733 76.176 179.766 113.591 190.442 152.668 cv
190.689 153.614 li
190.928 154.552 li
195.279 171.668 197.017 195.168 183.891 209.141 cv
183.585 209.458 li
183.277 209.769 li
182.965 210.074 li
165.107 226.821 136.446 215.754 121.453 200.418 cv
121.236 200.199 li
121.021 199.98 li
@
2 lj
[10 6 ] 0 dsh
120.934 270.41 mo
121.222 43.193 li
@
0 lj
[] 0 dsh
120.934 267.41 mo
120.934 273.41 li
@
117.934 270.41 mo
123.934 270.41 li
@
118.813 268.289 mo
123.055 272.531 li
@
118.813 272.531 mo
123.055 268.289 li
@
121.222 40.192 mo
121.222 46.192 li
@
118.222 43.192 mo
124.222 43.192 li
@
119.101 41.071 mo
123.343 45.313 li
@
119.101 45.313 mo
123.343 41.071 li
@
1 lj
121.222 146.472 mo
121.534 146.79 li
121.843 147.108 li
129.048 153.902 144.31 175.355 135.947 185.592 cv
135.875 185.667 li
135.802 185.741 li
131.643 189.782 124.865 187.167 121.32 183.569 cv
121.216 183.465 li
@
2 lj
[10 6 ] 0 dsh
121.021 199.98 mo
121.222 146.472 li
@
0 lj
[] 0 dsh
121.021 196.98 mo
121.021 202.98 li
@
118.021 199.98 mo
124.021 199.98 li
@
118.9 197.859 mo
123.142 202.101 li
@
118.9 202.101 mo
123.142 197.859 li
@
121.222 143.472 mo
121.222 149.472 li
@
118.222 146.472 mo
124.222 146.472 li
@
119.101 144.351 mo
123.343 148.593 li
@
119.101 148.593 mo
123.343 144.351 li
@
1 lj
121.222 170.689 mo
121.297 170.765 li
121.37 170.841 li
123.093 172.468 126.734 177.582 124.737 180.032 cv
124.719 180.05 li
124.702 180.067 li
123.709 181.032 122.09 180.405 121.244 179.546 cv
121.232 179.534 li
121.219 179.521 li
@
2 lj
[10 6 ] 0 dsh
121.216 183.465 mo
121.222 170.689 li
@
0 lj
[] 0 dsh
121.216 180.465 mo
121.216 186.465 li
@
118.216 183.465 mo
124.216 183.465 li
@
119.095 181.344 mo
123.337 185.586 li
@
119.095 185.586 mo
123.337 181.344 li
@
121.222 167.69 mo
121.222 173.69 li
@
118.222 170.69 mo
124.222 170.69 li
@
119.101 168.569 mo
123.343 172.811 li
@
119.101 172.811 mo
123.343 168.569 li
@
1 lj
121.222 176.474 mo
121.24 176.492 li
121.258 176.51 li
121.669 176.899 122.536 178.118 122.061 178.702 cv
122.056 178.707 li
122.052 178.711 li
121.814 178.941 121.429 178.791 121.227 178.586 cv
121.224 178.583 li
121.222 178.58 li
@
2 lj
[10 6 ] 0 dsh
121.219 179.521 mo
121.222 176.474 li
@
0 lj
[] 0 dsh
121.219 176.521 mo
121.219 182.521 li
@
118.219 179.521 mo
124.219 179.521 li
@
119.098 177.4 mo
123.34 181.642 li
@
119.098 181.642 mo
123.34 177.4 li
@
121.222 173.473 mo
121.222 179.473 li
@
118.222 176.473 mo
124.222 176.473 li
@
119.101 174.352 mo
123.343 178.594 li
@
119.101 178.594 mo
123.343 174.352 li
@
1 lj
121.222 177.853 mo
121.226 177.858 li
121.231 177.862 li
121.235 177.866 li
121.318 177.954 121.394 178.058 121.434 178.173 cv
121.435 178.176 li
121.436 178.179 li
121.437 178.183 li
121.448 178.214 121.455 178.253 121.455 178.286 cv
121.455 178.295 li
121.456 178.305 121.453 178.297 121.454 178.308 cv
121.454 178.31 li
121.453 178.313 li
121.453 178.317 li
121.452 178.319 li
121.452 178.323 li
121.451 178.325 li
121.451 178.328 li
121.45 178.33 li
121.45 178.332 li
121.449 178.334 li
121.449 178.336 li
121.448 178.338 li
121.448 178.339 li
121.447 178.341 li
121.447 178.343 li
121.446 178.344 li
121.445 178.346 li
121.445 178.348 li
121.444 178.349 li
121.444 178.351 li
121.443 178.353 li
121.442 178.354 li
121.442 178.356 li
121.441 178.357 li
121.44 178.359 li
121.439 178.36 li
121.439 178.362 li
121.438 178.363 li
121.437 178.364 li
121.436 178.366 li
121.436 178.367 li
121.435 178.369 li
121.433 178.371 li
121.432 178.372 li
121.431 178.374 li
121.431 178.375 li
121.43 178.376 li
121.429 178.377 li
121.428 178.378 li
121.427 178.38 li
121.426 178.381 li
121.424 178.383 121.422 178.385 121.42 178.387 cv
121.419 178.388 li
121.417 178.39 li
121.416 178.391 li
121.41 178.397 121.414 178.391 121.41 178.396 cv
121.409 178.397 li
121.408 178.398 li
121.406 178.398 li
121.405 178.399 li
121.404 178.4 li
121.403 178.401 li
121.402 178.401 li
121.401 178.402 li
121.4 178.403 li
121.399 178.403 li
121.397 178.404 li
121.396 178.404 li
121.395 178.405 li
121.394 178.405 li
121.393 178.406 li
121.391 178.407 li
121.389 178.407 li
121.388 178.408 li
121.387 178.408 li
121.385 178.409 li
121.384 178.409 li
121.383 178.41 li
121.381 178.41 li
121.379 178.411 li
121.377 178.411 li
121.376 178.412 li
121.373 178.412 li
121.372 178.413 li
121.367 178.413 li
121.366 178.414 li
121.357 178.414 li
121.356 178.415 li
121.343 178.415 li
121.342 178.414 li
121.339 178.414 121.337 178.414 121.334 178.414 cv
121.333 178.414 li
121.331 178.413 li
121.325 178.413 li
121.324 178.412 li
121.32 178.412 li
121.319 178.411 li
121.316 178.411 li
121.315 178.41 li
121.313 178.41 li
121.312 178.409 li
121.309 178.409 li
121.308 178.408 li
121.306 178.408 li
121.304 178.407 li
121.302 178.407 li
121.301 178.406 li
121.3 178.406 li
121.298 178.405 li
121.297 178.405 li
121.296 178.404 li
121.294 178.404 li
121.293 178.403 li
121.291 178.403 li
121.29 178.402 li
121.289 178.402 li
121.288 178.401 li
121.287 178.401 li
121.286 178.4 li
121.285 178.4 li
121.282 178.399 121.279 178.398 121.277 178.396 cv
121.276 178.395 li
121.275 178.395 li
121.274 178.394 li
121.272 178.394 li
121.271 178.393 li
121.27 178.393 li
121.269 178.392 li
121.268 178.391 li
121.267 178.391 li
121.266 178.39 li
121.265 178.39 li
121.264 178.389 li
121.263 178.388 li
121.262 178.388 li
121.261 178.387 li
121.26 178.387 li
121.258 178.385 li
121.257 178.385 li
121.256 178.384 li
121.255 178.383 li
121.254 178.383 li
121.253 178.382 li
121.252 178.381 li
121.251 178.381 li
121.251 178.38 li
121.25 178.379 li
121.249 178.379 li
121.248 178.378 li
121.247 178.378 li
121.246 178.377 li
121.245 178.376 li
121.244 178.375 li
121.243 178.375 li
121.242 178.374 li
121.242 178.373 li
121.241 178.373 li
121.239 178.371 li
121.238 178.371 li
121.234 178.367 li
121.233 178.367 li
121.232 178.366 li
121.232 178.365 li
121.231 178.364 li
121.23 178.364 li
121.229 178.363 li
121.229 178.362 li
121.228 178.362 li
121.226 178.36 121.225 178.359 121.223 178.357 cv
121.222 178.356 li
@
2 lj
[10 6 ] 0 dsh
121.222 178.58 mo
121.222 177.853 li
@
0 lj
[] 0 dsh
121.222 175.58 mo
121.222 181.58 li
@
118.222 178.58 mo
124.222 178.58 li
@
119.101 176.459 mo
123.343 180.701 li
@
119.101 180.701 mo
123.343 176.459 li
@
121.223 174.853 mo
121.223 180.853 li
@
118.223 177.853 mo
124.223 177.853 li
@
119.102 175.732 mo
123.344 179.974 li
@
119.102 179.974 mo
123.344 175.732 li
@
1 lj
121.222 178.183 mo
121.223 178.184 li
121.224 178.185 li
121.225 178.186 li
121.228 178.189 121.23 178.191 121.233 178.194 cv
121.234 178.195 li
121.235 178.196 li
121.235 178.197 li
121.236 178.198 li
121.237 178.199 li
121.238 178.2 li
121.239 178.201 li
121.24 178.202 li
121.241 178.203 li
121.241 178.204 li
121.242 178.205 li
121.243 178.206 li
121.244 178.207 li
121.244 178.208 li
121.245 178.209 li
121.246 178.21 li
121.247 178.211 li
121.247 178.212 li
121.248 178.213 li
121.249 178.214 li
121.25 178.215 li
121.25 178.216 li
121.251 178.217 li
121.252 178.218 li
121.252 178.219 li
121.253 178.22 li
121.254 178.221 li
121.254 178.222 li
121.255 178.223 li
121.255 178.224 li
121.256 178.225 li
121.257 178.226 li
121.257 178.227 li
121.258 178.228 li
121.258 178.229 li
121.259 178.229 li
121.259 178.23 li
121.26 178.231 li
121.261 178.232 li
121.261 178.233 li
121.262 178.234 li
121.262 178.235 li
121.263 178.236 li
121.263 178.237 li
121.264 178.238 li
121.264 178.24 li
121.265 178.24 li
121.265 178.241 li
121.266 178.242 li
121.266 178.243 li
121.267 178.244 li
121.267 178.246 li
121.268 178.247 li
121.269 178.248 li
121.269 178.25 li
121.27 178.251 li
121.27 178.252 li
121.271 178.253 li
121.271 178.255 li
121.272 178.256 li
121.272 178.258 li
121.273 178.259 li
121.273 178.261 li
121.274 178.262 li
121.274 178.264 li
121.275 178.265 li
121.275 178.268 li
121.276 178.269 li
121.276 178.273 li
121.277 178.273 li
121.277 178.274 li
121.277 178.276 121.277 178.277 121.277 178.279 cv
121.277 178.28 li
121.278 178.28 li
121.278 178.281 li
121.278 178.284 121.278 178.287 121.278 178.29 cv
121.278 178.291 li
121.277 178.291 li
121.277 178.296 li
121.276 178.297 li
121.276 178.3 li
121.275 178.3 li
121.275 178.302 li
121.274 178.303 li
121.274 178.305 li
121.273 178.305 li
121.273 178.306 li
121.272 178.306 li
121.272 178.307 li
121.271 178.308 li
121.271 178.309 li
121.27 178.309 li
121.27 178.31 li
121.269 178.31 li
121.269 178.311 li
121.268 178.311 li
121.267 178.312 li
121.266 178.312 li
121.266 178.313 li
121.265 178.313 li
121.265 178.314 li
121.263 178.314 li
121.263 178.315 li
121.26 178.315 li
121.26 178.316 li
121.259 178.316 li
121.257 178.316 121.254 178.316 121.252 178.316 cv
121.251 178.316 li
@
2 lj
[10 6 ] 0 dsh
121.222 178.356 mo
121.222 178.183 li
@
0 lj
[] 0 dsh
121.222 175.356 mo
121.222 181.356 li
@
118.222 178.356 mo
124.222 178.356 li
@
119.101 176.235 mo
123.343 180.477 li
@
119.101 180.477 mo
123.343 176.235 li
@
121.222 175.183 mo
121.222 181.183 li
@
118.222 178.183 mo
124.222 178.183 li
@
119.101 176.062 mo
123.343 180.304 li
@
119.101 180.304 mo
123.343 176.062 li
@
499.935 175.286 mo
499.935 181.286 li
1 /0 /CSD get_res sepcs
.49 sep
@
496.935 178.286 mo
502.935 178.286 li
@
497.814 176.165 mo
502.056 180.407 li
@
497.814 180.407 mo
502.056 176.165 li
@
395.5 98.5 mo
499 98.5 li
499 39.5 li
395.5 39.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
434.07 52.35 mo
434.07 52.141 434.096 51.902 434.148 51.631 cv
434.2 51.36 434.263 51.118 434.336 50.905 cv
434.409 50.691 434.526 50.365 434.687 49.928 cv
434.848 49.491 434.934 49.251 434.945 49.209 cv
435.08 48.844 435.148 48.542 435.148 48.303 cv
435.148 48.012 435.039 47.866 434.82 47.866 cv
434.424 47.866 434.098 48.069 433.843 48.475 cv
433.588 48.881 433.398 49.334 433.273 49.834 cv
433.252 49.897 433.211 49.928 433.148 49.928 cv
432.976 49.928 li
432.893 49.928 432.851 49.881 432.851 49.787 cv
432.851 49.756 li
433.008 49.152 433.253 48.621 433.586 48.162 cv
433.919 47.704 434.341 47.475 434.851 47.475 cv
435.206 47.475 435.505 47.592 435.75 47.827 cv
435.995 48.061 436.117 48.355 436.117 48.709 cv
436.117 48.897 436.075 49.095 435.992 49.303 cv
435.877 49.605 435.742 49.97 435.586 50.397 cv
435.429 50.824 435.307 51.209 435.218 51.553 cv
435.13 51.897 435.086 52.23 435.086 52.553 cv
435.086 52.949 435.187 53.267 435.39 53.506 cv
435.593 53.746 435.893 53.866 436.289 53.866 cv
436.82 53.866 437.258 53.465 437.601 52.662 cv
437.591 52.6 437.586 52.517 437.586 52.412 cv
437.586 52.141 437.628 51.834 437.711 51.491 cv
438.554 48.116 li
438.585 47.98 438.664 47.865 438.789 47.772 cv
438.914 47.678 439.044 47.631 439.179 47.631 cv
439.304 47.631 439.411 47.67 439.5 47.748 cv
439.589 47.827 439.633 47.928 439.633 48.053 cv
439.633 48.116 439.628 48.157 439.617 48.178 cv
438.773 51.522 li
438.68 51.918 438.633 52.277 438.633 52.6 cv
438.633 52.975 438.719 53.279 438.89 53.514 cv
439.062 53.749 439.336 53.866 439.711 53.866 cv
440.346 53.866 440.872 53.444 441.289 52.6 cv
441.445 52.298 441.619 51.85 441.812 51.256 cv
442.005 50.663 442.101 50.21 442.101 49.897 cv
442.101 49.616 442.054 49.389 441.961 49.217 cv
441.867 49.045 441.739 48.863 441.578 48.67 cv
441.417 48.477 441.336 48.334 441.336 48.241 cv
441.336 48.043 441.417 47.863 441.578 47.702 cv
441.739 47.54 441.919 47.459 442.117 47.459 cv
442.356 47.459 442.528 47.568 442.633 47.787 cv
442.737 48.006 442.789 48.256 442.789 48.537 cv
442.789 48.87 442.734 49.298 442.625 49.819 cv
442.516 50.34 442.375 50.863 442.203 51.389 cv
442.031 51.915 441.867 52.334 441.711 52.647 cv
441.169 53.73 440.492 54.272 439.679 54.272 cv
439.252 54.272 438.867 54.191 438.523 54.03 cv
438.18 53.868 437.925 53.61 437.758 53.256 cv
437.591 53.548 437.378 53.79 437.117 53.983 cv
436.856 54.176 436.57 54.272 436.258 54.272 cv
435.591 54.272 435.06 54.113 434.664 53.795 cv
434.268 53.478 434.07 52.996 434.07 52.35 cv
1 /0 /CSD get_res sepcs
1 sep
f
445.09 56.475 mo
444.631 56.475 444.269 56.3 444.004 55.951 cv
443.739 55.602 443.606 55.188 443.606 54.709 cv
443.606 54.24 443.728 53.753 443.973 53.248 cv
444.218 52.743 444.546 52.324 444.957 51.991 cv
445.368 51.658 445.814 51.491 446.293 51.491 cv
446.502 51.491 446.694 51.551 446.871 51.67 cv
447.048 51.79 447.184 51.949 447.277 52.147 cv
447.887 49.694 li
447.918 49.569 447.939 49.47 447.949 49.397 cv
447.949 49.282 447.71 49.225 447.231 49.225 cv
447.158 49.225 447.121 49.178 447.121 49.084 cv
447.121 49.063 447.129 49.03 447.145 48.983 cv
447.16 48.936 447.178 48.899 447.199 48.873 cv
447.22 48.847 447.246 48.834 447.277 48.834 cv
448.762 48.725 li
448.845 48.725 448.887 48.767 448.887 48.85 cv
447.309 55.178 li
447.257 55.303 447.231 55.48 447.231 55.709 cv
447.231 56.022 447.335 56.178 447.543 56.178 cv
447.772 56.178 447.949 56.032 448.074 55.741 cv
448.199 55.449 448.298 55.116 448.371 54.741 cv
448.392 54.688 448.423 54.662 448.465 54.662 cv
448.606 54.662 li
448.627 54.662 448.647 54.675 448.668 54.701 cv
448.689 54.728 448.699 54.751 448.699 54.772 cv
448.564 55.282 448.421 55.693 448.27 56.006 cv
448.119 56.319 447.871 56.475 447.527 56.475 cv
447.277 56.475 447.058 56.402 446.871 56.256 cv
446.684 56.11 446.564 55.917 446.512 55.678 cv
446.043 56.209 445.569 56.475 445.09 56.475 cv
cp
445.106 56.178 mo
445.377 56.178 445.634 56.079 445.879 55.881 cv
446.124 55.683 446.335 55.449 446.512 55.178 cv
446.522 55.178 446.527 55.168 446.527 55.147 cv
447.137 52.725 li
447.095 52.464 446.999 52.24 446.848 52.053 cv
446.697 51.866 446.501 51.772 446.262 51.772 cv
446.012 51.772 445.78 51.873 445.567 52.076 cv
445.353 52.279 445.173 52.516 445.027 52.787 cv
444.892 53.09 444.756 53.496 444.621 54.006 cv
444.486 54.517 444.418 54.913 444.418 55.194 cv
444.418 55.444 444.473 55.67 444.582 55.873 cv
444.691 56.076 444.866 56.178 445.106 56.178 cv
f
449.743 58.334 mo
449.743 58.303 449.758 58.272 449.789 58.241 cv
450.05 57.991 450.253 57.699 450.399 57.366 cv
450.545 57.033 450.618 56.678 450.618 56.303 cv
450.618 56.178 li
450.503 56.293 450.357 56.35 450.18 56.35 cv
450.013 56.35 449.87 56.29 449.75 56.17 cv
449.631 56.051 449.571 55.908 449.571 55.741 cv
449.571 55.574 449.631 55.434 449.75 55.319 cv
449.87 55.204 450.013 55.147 450.18 55.147 cv
450.441 55.147 450.626 55.267 450.735 55.506 cv
450.844 55.746 450.899 56.012 450.899 56.303 cv
450.899 56.709 450.818 57.097 450.657 57.467 cv
450.495 57.837 450.268 58.168 449.977 58.459 cv
449.946 58.47 449.92 58.475 449.899 58.475 cv
449.868 58.475 449.834 58.459 449.797 58.428 cv
449.761 58.397 449.743 58.365 449.743 58.334 cv
f
452.425 55.553 mo
452.425 55.418 452.456 55.277 452.519 55.131 cv
453.409 52.756 li
453.503 52.496 453.55 52.277 453.55 52.1 cv
453.55 51.881 453.467 51.772 453.3 51.772 cv
453.019 51.772 452.782 51.923 452.589 52.225 cv
452.396 52.527 452.258 52.86 452.175 53.225 cv
452.154 53.266 452.123 53.287 452.081 53.287 cv
451.956 53.287 li
451.893 53.287 451.862 53.256 451.862 53.194 cv
451.862 53.162 li
451.977 52.725 452.156 52.337 452.401 51.998 cv
452.646 51.66 452.956 51.491 453.331 51.491 cv
453.592 51.491 453.813 51.577 453.995 51.748 cv
454.178 51.92 454.269 52.136 454.269 52.397 cv
454.269 52.532 454.238 52.678 454.175 52.834 cv
453.284 55.194 li
453.18 55.433 453.128 55.652 453.128 55.85 cv
453.128 56.069 453.211 56.178 453.378 56.178 cv
453.67 56.178 453.91 56.027 454.097 55.725 cv
454.284 55.423 454.42 55.095 454.503 54.741 cv
454.514 54.688 454.545 54.662 454.597 54.662 cv
454.722 54.662 li
454.753 54.662 454.777 54.673 454.792 54.694 cv
454.808 54.715 454.816 54.741 454.816 54.772 cv
454.816 54.772 454.816 54.782 454.816 54.803 cv
454.711 55.22 454.534 55.602 454.284 55.951 cv
454.034 56.3 453.727 56.475 453.362 56.475 cv
453.102 56.475 452.881 56.386 452.698 56.209 cv
452.516 56.032 452.425 55.814 452.425 55.553 cv
cp
453.659 49.678 mo
453.659 49.532 453.724 49.397 453.855 49.272 cv
453.985 49.147 454.128 49.084 454.284 49.084 cv
454.409 49.084 454.511 49.121 454.589 49.194 cv
454.667 49.267 454.706 49.366 454.706 49.491 cv
454.706 49.647 454.641 49.787 454.511 49.912 cv
454.381 50.037 454.238 50.1 454.081 50.1 cv
453.966 50.1 453.867 50.061 453.784 49.983 cv
453.701 49.905 453.659 49.803 453.659 49.678 cv
f
461.224 52.1 mo
461.141 52.1 461.073 52.069 461.021 52.006 cv
460.969 51.943 460.943 51.876 460.943 51.803 cv
460.943 51.72 460.969 51.649 461.021 51.592 cv
461.073 51.535 461.141 51.506 461.224 51.506 cv
470.646 51.506 li
470.719 51.506 470.782 51.535 470.834 51.592 cv
470.886 51.649 470.912 51.72 470.912 51.803 cv
470.912 51.876 470.886 51.943 470.834 52.006 cv
470.782 52.069 470.719 52.1 470.646 52.1 cv
461.224 52.1 li
cp
461.224 49.194 mo
461.141 49.194 461.073 49.165 461.021 49.108 cv
460.969 49.051 460.943 48.98 460.943 48.897 cv
460.943 48.824 460.969 48.753 461.021 48.686 cv
461.073 48.618 461.141 48.584 461.224 48.584 cv
470.646 48.584 li
470.719 48.584 470.782 48.618 470.834 48.686 cv
470.886 48.753 470.912 48.824 470.912 48.897 cv
470.912 48.98 470.886 49.051 470.834 49.108 cv
470.782 49.165 470.719 49.194 470.646 49.194 cv
461.224 49.194 li
f
479.683 54.428 mo
478.454 54.428 477.62 53.923 477.183 52.912 cv
476.745 51.902 476.526 50.704 476.526 49.319 cv
476.526 48.444 476.604 47.623 476.761 46.858 cv
476.917 46.092 477.229 45.443 477.698 44.912 cv
478.167 44.381 478.828 44.116 479.683 44.116 cv
480.339 44.116 480.878 44.275 481.3 44.592 cv
481.722 44.91 482.042 45.324 482.261 45.834 cv
482.48 46.345 482.631 46.892 482.714 47.475 cv
482.797 48.058 482.839 48.673 482.839 49.319 cv
482.839 50.173 482.758 50.975 482.597 51.725 cv
482.436 52.475 482.123 53.113 481.659 53.639 cv
481.196 54.165 480.537 54.428 479.683 54.428 cv
cp
479.683 54.037 mo
480.235 54.037 480.649 53.753 480.925 53.186 cv
481.201 52.618 481.37 51.985 481.433 51.287 cv
481.495 50.59 481.526 49.85 481.526 49.069 cv
481.526 48.319 481.495 47.626 481.433 46.991 cv
481.37 46.355 481.204 45.779 480.933 45.264 cv
480.662 44.749 480.245 44.491 479.683 44.491 cv
479.12 44.491 478.701 44.751 478.425 45.272 cv
478.149 45.793 477.98 46.368 477.917 46.998 cv
477.854 47.629 477.823 48.319 477.823 49.069 cv
477.823 49.631 477.836 50.16 477.862 50.655 cv
477.888 51.15 477.961 51.657 478.081 52.178 cv
478.201 52.699 478.391 53.139 478.651 53.498 cv
478.912 53.857 479.256 54.037 479.683 54.037 cv
f
1 lj
399.494 50.5 mo
429.449 50.5 li
1 /0 /CSD get_res sepcs
.729 sep
@
434.07 70.85 mo
434.07 70.641 434.096 70.402 434.148 70.131 cv
434.2 69.86 434.263 69.618 434.336 69.405 cv
434.409 69.191 434.526 68.865 434.687 68.428 cv
434.848 67.991 434.934 67.751 434.945 67.709 cv
435.08 67.344 435.148 67.042 435.148 66.803 cv
435.148 66.512 435.039 66.366 434.82 66.366 cv
434.424 66.366 434.098 66.569 433.843 66.975 cv
433.588 67.381 433.398 67.834 433.273 68.334 cv
433.252 68.397 433.211 68.428 433.148 68.428 cv
432.976 68.428 li
432.893 68.428 432.851 68.381 432.851 68.287 cv
432.851 68.256 li
433.008 67.652 433.253 67.121 433.586 66.662 cv
433.919 66.204 434.341 65.975 434.851 65.975 cv
435.206 65.975 435.505 66.092 435.75 66.327 cv
435.995 66.561 436.117 66.855 436.117 67.209 cv
436.117 67.397 436.075 67.595 435.992 67.803 cv
435.877 68.105 435.742 68.47 435.586 68.897 cv
435.429 69.324 435.307 69.709 435.218 70.053 cv
435.13 70.397 435.086 70.73 435.086 71.053 cv
435.086 71.449 435.187 71.767 435.39 72.006 cv
435.593 72.246 435.893 72.366 436.289 72.366 cv
436.82 72.366 437.258 71.965 437.601 71.162 cv
437.591 71.1 437.586 71.017 437.586 70.912 cv
437.586 70.641 437.628 70.334 437.711 69.991 cv
438.554 66.616 li
438.585 66.48 438.664 66.365 438.789 66.272 cv
438.914 66.178 439.044 66.131 439.179 66.131 cv
439.304 66.131 439.411 66.17 439.5 66.248 cv
439.589 66.327 439.633 66.428 439.633 66.553 cv
439.633 66.616 439.628 66.657 439.617 66.678 cv
438.773 70.022 li
438.68 70.418 438.633 70.777 438.633 71.1 cv
438.633 71.475 438.719 71.779 438.89 72.014 cv
439.062 72.249 439.336 72.366 439.711 72.366 cv
440.346 72.366 440.872 71.944 441.289 71.1 cv
441.445 70.798 441.619 70.35 441.812 69.756 cv
442.005 69.163 442.101 68.71 442.101 68.397 cv
442.101 68.116 442.054 67.889 441.961 67.717 cv
441.867 67.545 441.739 67.363 441.578 67.17 cv
441.417 66.977 441.336 66.834 441.336 66.741 cv
441.336 66.543 441.417 66.363 441.578 66.202 cv
441.739 66.04 441.919 65.959 442.117 65.959 cv
442.356 65.959 442.528 66.068 442.633 66.287 cv
442.737 66.506 442.789 66.756 442.789 67.037 cv
442.789 67.37 442.734 67.798 442.625 68.319 cv
442.516 68.84 442.375 69.363 442.203 69.889 cv
442.031 70.415 441.867 70.834 441.711 71.147 cv
441.169 72.23 440.492 72.772 439.679 72.772 cv
439.252 72.772 438.867 72.691 438.523 72.53 cv
438.18 72.368 437.925 72.11 437.758 71.756 cv
437.591 72.048 437.378 72.29 437.117 72.483 cv
436.856 72.676 436.57 72.772 436.258 72.772 cv
435.591 72.772 435.06 72.613 434.664 72.295 cv
434.268 71.978 434.07 71.496 434.07 70.85 cv
1 /0 /CSD get_res sepcs
1 sep
f
445.09 74.975 mo
444.631 74.975 444.269 74.8 444.004 74.451 cv
443.739 74.102 443.606 73.688 443.606 73.209 cv
443.606 72.74 443.728 72.253 443.973 71.748 cv
444.218 71.243 444.546 70.824 444.957 70.491 cv
445.368 70.158 445.814 69.991 446.293 69.991 cv
446.502 69.991 446.694 70.051 446.871 70.17 cv
447.048 70.29 447.184 70.449 447.277 70.647 cv
447.887 68.194 li
447.918 68.069 447.939 67.97 447.949 67.897 cv
447.949 67.782 447.71 67.725 447.231 67.725 cv
447.158 67.725 447.121 67.678 447.121 67.584 cv
447.121 67.563 447.129 67.53 447.145 67.483 cv
447.16 67.436 447.178 67.399 447.199 67.373 cv
447.22 67.347 447.246 67.334 447.277 67.334 cv
448.762 67.225 li
448.845 67.225 448.887 67.267 448.887 67.35 cv
447.309 73.678 li
447.257 73.803 447.231 73.98 447.231 74.209 cv
447.231 74.522 447.335 74.678 447.543 74.678 cv
447.772 74.678 447.949 74.532 448.074 74.241 cv
448.199 73.949 448.298 73.616 448.371 73.241 cv
448.392 73.188 448.423 73.162 448.465 73.162 cv
448.606 73.162 li
448.627 73.162 448.647 73.175 448.668 73.201 cv
448.689 73.228 448.699 73.251 448.699 73.272 cv
448.564 73.782 448.421 74.193 448.27 74.506 cv
448.119 74.819 447.871 74.975 447.527 74.975 cv
447.277 74.975 447.058 74.902 446.871 74.756 cv
446.684 74.61 446.564 74.417 446.512 74.178 cv
446.043 74.709 445.569 74.975 445.09 74.975 cv
cp
445.106 74.678 mo
445.377 74.678 445.634 74.579 445.879 74.381 cv
446.124 74.183 446.335 73.949 446.512 73.678 cv
446.522 73.678 446.527 73.668 446.527 73.647 cv
447.137 71.225 li
447.095 70.964 446.999 70.74 446.848 70.553 cv
446.697 70.366 446.501 70.272 446.262 70.272 cv
446.012 70.272 445.78 70.373 445.567 70.576 cv
445.353 70.779 445.173 71.016 445.027 71.287 cv
444.892 71.59 444.756 71.996 444.621 72.506 cv
444.486 73.017 444.418 73.413 444.418 73.694 cv
444.418 73.944 444.473 74.17 444.582 74.373 cv
444.691 74.576 444.866 74.678 445.106 74.678 cv
f
449.743 76.834 mo
449.743 76.803 449.758 76.772 449.789 76.741 cv
450.05 76.491 450.253 76.199 450.399 75.866 cv
450.545 75.533 450.618 75.178 450.618 74.803 cv
450.618 74.678 li
450.503 74.793 450.357 74.85 450.18 74.85 cv
450.013 74.85 449.87 74.79 449.75 74.67 cv
449.631 74.551 449.571 74.408 449.571 74.241 cv
449.571 74.074 449.631 73.934 449.75 73.819 cv
449.87 73.704 450.013 73.647 450.18 73.647 cv
450.441 73.647 450.626 73.767 450.735 74.006 cv
450.844 74.246 450.899 74.512 450.899 74.803 cv
450.899 75.209 450.818 75.597 450.657 75.967 cv
450.495 76.337 450.268 76.668 449.977 76.959 cv
449.946 76.97 449.92 76.975 449.899 76.975 cv
449.868 76.975 449.834 76.959 449.797 76.928 cv
449.761 76.897 449.743 76.865 449.743 76.834 cv
f
452.425 74.053 mo
452.425 73.918 452.456 73.777 452.519 73.631 cv
453.409 71.256 li
453.503 70.996 453.55 70.777 453.55 70.6 cv
453.55 70.381 453.467 70.272 453.3 70.272 cv
453.019 70.272 452.782 70.423 452.589 70.725 cv
452.396 71.027 452.258 71.36 452.175 71.725 cv
452.154 71.766 452.123 71.787 452.081 71.787 cv
451.956 71.787 li
451.893 71.787 451.862 71.756 451.862 71.694 cv
451.862 71.662 li
451.977 71.225 452.156 70.837 452.401 70.498 cv
452.646 70.16 452.956 69.991 453.331 69.991 cv
453.592 69.991 453.813 70.077 453.995 70.248 cv
454.178 70.42 454.269 70.636 454.269 70.897 cv
454.269 71.032 454.238 71.178 454.175 71.334 cv
453.284 73.694 li
453.18 73.933 453.128 74.152 453.128 74.35 cv
453.128 74.569 453.211 74.678 453.378 74.678 cv
453.67 74.678 453.91 74.527 454.097 74.225 cv
454.284 73.923 454.42 73.595 454.503 73.241 cv
454.514 73.188 454.545 73.162 454.597 73.162 cv
454.722 73.162 li
454.753 73.162 454.777 73.173 454.792 73.194 cv
454.808 73.215 454.816 73.241 454.816 73.272 cv
454.816 73.272 454.816 73.282 454.816 73.303 cv
454.711 73.72 454.534 74.102 454.284 74.451 cv
454.034 74.8 453.727 74.975 453.362 74.975 cv
453.102 74.975 452.881 74.886 452.698 74.709 cv
452.516 74.532 452.425 74.314 452.425 74.053 cv
cp
453.659 68.178 mo
453.659 68.032 453.724 67.897 453.855 67.772 cv
453.985 67.647 454.128 67.584 454.284 67.584 cv
454.409 67.584 454.511 67.621 454.589 67.694 cv
454.667 67.767 454.706 67.866 454.706 67.991 cv
454.706 68.147 454.641 68.287 454.511 68.412 cv
454.381 68.537 454.238 68.6 454.081 68.6 cv
453.966 68.6 453.867 68.561 453.784 68.483 cv
453.701 68.405 453.659 68.303 453.659 68.178 cv
f
461.224 70.6 mo
461.141 70.6 461.073 70.569 461.021 70.506 cv
460.969 70.443 460.943 70.376 460.943 70.303 cv
460.943 70.22 460.969 70.149 461.021 70.092 cv
461.073 70.035 461.141 70.006 461.224 70.006 cv
470.646 70.006 li
470.719 70.006 470.782 70.035 470.834 70.092 cv
470.886 70.149 470.912 70.22 470.912 70.303 cv
470.912 70.376 470.886 70.443 470.834 70.506 cv
470.782 70.569 470.719 70.6 470.646 70.6 cv
461.224 70.6 li
cp
461.224 67.694 mo
461.141 67.694 461.073 67.665 461.021 67.608 cv
460.969 67.551 460.943 67.48 460.943 67.397 cv
460.943 67.324 460.969 67.253 461.021 67.186 cv
461.073 67.118 461.141 67.084 461.224 67.084 cv
470.646 67.084 li
470.719 67.084 470.782 67.118 470.834 67.186 cv
470.886 67.253 470.912 67.324 470.912 67.397 cv
470.912 67.48 470.886 67.551 470.834 67.608 cv
470.782 67.665 470.719 67.694 470.646 67.694 cv
461.224 67.694 li
f
479.683 72.928 mo
478.454 72.928 477.62 72.423 477.183 71.412 cv
476.745 70.402 476.526 69.204 476.526 67.819 cv
476.526 66.944 476.604 66.123 476.761 65.358 cv
476.917 64.592 477.229 63.943 477.698 63.412 cv
478.167 62.881 478.828 62.616 479.683 62.616 cv
480.339 62.616 480.878 62.775 481.3 63.092 cv
481.722 63.41 482.042 63.824 482.261 64.334 cv
482.48 64.845 482.631 65.392 482.714 65.975 cv
482.797 66.558 482.839 67.173 482.839 67.819 cv
482.839 68.673 482.758 69.475 482.597 70.225 cv
482.436 70.975 482.123 71.613 481.659 72.139 cv
481.196 72.665 480.537 72.928 479.683 72.928 cv
cp
479.683 72.537 mo
480.235 72.537 480.649 72.253 480.925 71.686 cv
481.201 71.118 481.37 70.485 481.433 69.787 cv
481.495 69.09 481.526 68.35 481.526 67.569 cv
481.526 66.819 481.495 66.126 481.433 65.491 cv
481.37 64.855 481.204 64.279 480.933 63.764 cv
480.662 63.249 480.245 62.991 479.683 62.991 cv
479.12 62.991 478.701 63.251 478.425 63.772 cv
478.149 64.293 477.98 64.868 477.917 65.498 cv
477.854 66.129 477.823 66.819 477.823 67.569 cv
477.823 68.131 477.836 68.66 477.862 69.155 cv
477.888 69.65 477.961 70.157 478.081 70.678 cv
478.201 71.199 478.391 71.639 478.651 71.998 cv
478.912 72.357 479.256 72.537 479.683 72.537 cv
f
484.698 71.772 mo
484.698 71.543 484.781 71.35 484.948 71.194 cv
485.115 71.037 485.308 70.959 485.527 70.959 cv
485.662 70.959 485.795 70.996 485.925 71.069 cv
486.055 71.142 486.157 71.243 486.23 71.373 cv
486.303 71.504 486.339 71.637 486.339 71.772 cv
486.339 71.991 486.258 72.183 486.097 72.35 cv
485.936 72.517 485.746 72.6 485.527 72.6 cv
485.308 72.6 485.115 72.517 484.948 72.35 cv
484.781 72.183 484.698 71.991 484.698 71.772 cv
f
488.021 70.131 mo
488.021 69.6 li
492.646 62.678 li
492.688 62.637 492.74 62.616 492.803 62.616 cv
493.021 62.616 li
493.136 62.616 493.193 62.668 493.193 62.772 cv
493.193 69.6 li
494.662 69.6 li
494.662 70.131 li
493.193 70.131 li
493.193 71.6 li
493.193 71.798 493.339 71.926 493.631 71.983 cv
493.922 72.04 494.261 72.069 494.646 72.069 cv
494.646 72.6 li
490.521 72.6 li
490.521 72.069 li
490.906 72.069 491.245 72.04 491.537 71.983 cv
491.828 71.926 491.974 71.798 491.974 71.6 cv
491.974 70.131 li
488.021 70.131 li
cp
488.521 69.6 mo
492.068 69.6 li
492.068 64.287 li
488.521 69.6 li
f
399.494 69 mo
429.449 69 li
1 /0 /CSD get_res sepcs
.148 sep
@
434.07 89.35 mo
434.07 89.141 434.096 88.902 434.148 88.631 cv
434.2 88.36 434.263 88.118 434.336 87.905 cv
434.409 87.691 434.526 87.365 434.687 86.928 cv
434.848 86.491 434.934 86.251 434.945 86.209 cv
435.08 85.844 435.148 85.542 435.148 85.303 cv
435.148 85.012 435.039 84.866 434.82 84.866 cv
434.424 84.866 434.098 85.069 433.843 85.475 cv
433.588 85.881 433.398 86.334 433.273 86.834 cv
433.252 86.897 433.211 86.928 433.148 86.928 cv
432.976 86.928 li
432.893 86.928 432.851 86.881 432.851 86.787 cv
432.851 86.756 li
433.008 86.152 433.253 85.621 433.586 85.162 cv
433.919 84.704 434.341 84.475 434.851 84.475 cv
435.206 84.475 435.505 84.592 435.75 84.827 cv
435.995 85.061 436.117 85.355 436.117 85.709 cv
436.117 85.897 436.075 86.095 435.992 86.303 cv
435.877 86.605 435.742 86.97 435.586 87.397 cv
435.429 87.824 435.307 88.209 435.218 88.553 cv
435.13 88.897 435.086 89.23 435.086 89.553 cv
435.086 89.949 435.187 90.267 435.39 90.506 cv
435.593 90.746 435.893 90.866 436.289 90.866 cv
436.82 90.866 437.258 90.465 437.601 89.662 cv
437.591 89.6 437.586 89.517 437.586 89.412 cv
437.586 89.141 437.628 88.834 437.711 88.491 cv
438.554 85.116 li
438.585 84.98 438.664 84.865 438.789 84.772 cv
438.914 84.678 439.044 84.631 439.179 84.631 cv
439.304 84.631 439.411 84.67 439.5 84.748 cv
439.589 84.827 439.633 84.928 439.633 85.053 cv
439.633 85.116 439.628 85.157 439.617 85.178 cv
438.773 88.522 li
438.68 88.918 438.633 89.277 438.633 89.6 cv
438.633 89.975 438.719 90.279 438.89 90.514 cv
439.062 90.749 439.336 90.866 439.711 90.866 cv
440.346 90.866 440.872 90.444 441.289 89.6 cv
441.445 89.298 441.619 88.85 441.812 88.256 cv
442.005 87.663 442.101 87.21 442.101 86.897 cv
442.101 86.616 442.054 86.389 441.961 86.217 cv
441.867 86.045 441.739 85.863 441.578 85.67 cv
441.417 85.477 441.336 85.334 441.336 85.241 cv
441.336 85.043 441.417 84.863 441.578 84.702 cv
441.739 84.54 441.919 84.459 442.117 84.459 cv
442.356 84.459 442.528 84.568 442.633 84.787 cv
442.737 85.006 442.789 85.256 442.789 85.537 cv
442.789 85.87 442.734 86.298 442.625 86.819 cv
442.516 87.34 442.375 87.863 442.203 88.389 cv
442.031 88.915 441.867 89.334 441.711 89.647 cv
441.169 90.73 440.492 91.272 439.679 91.272 cv
439.252 91.272 438.867 91.191 438.523 91.03 cv
438.18 90.868 437.925 90.61 437.758 90.256 cv
437.591 90.548 437.378 90.79 437.117 90.983 cv
436.856 91.176 436.57 91.272 436.258 91.272 cv
435.591 91.272 435.06 91.113 434.664 90.795 cv
434.268 90.478 434.07 89.996 434.07 89.35 cv
1 /0 /CSD get_res sepcs
1 sep
f
445.09 93.475 mo
444.631 93.475 444.269 93.3 444.004 92.951 cv
443.739 92.602 443.606 92.188 443.606 91.709 cv
443.606 91.24 443.728 90.753 443.973 90.248 cv
444.218 89.743 444.546 89.324 444.957 88.991 cv
445.368 88.658 445.814 88.491 446.293 88.491 cv
446.502 88.491 446.694 88.551 446.871 88.67 cv
447.048 88.79 447.184 88.949 447.277 89.147 cv
447.887 86.694 li
447.918 86.569 447.939 86.47 447.949 86.397 cv
447.949 86.282 447.71 86.225 447.231 86.225 cv
447.158 86.225 447.121 86.178 447.121 86.084 cv
447.121 86.063 447.129 86.03 447.145 85.983 cv
447.16 85.936 447.178 85.899 447.199 85.873 cv
447.22 85.847 447.246 85.834 447.277 85.834 cv
448.762 85.725 li
448.845 85.725 448.887 85.767 448.887 85.85 cv
447.309 92.178 li
447.257 92.303 447.231 92.48 447.231 92.709 cv
447.231 93.022 447.335 93.178 447.543 93.178 cv
447.772 93.178 447.949 93.032 448.074 92.741 cv
448.199 92.449 448.298 92.116 448.371 91.741 cv
448.392 91.688 448.423 91.662 448.465 91.662 cv
448.606 91.662 li
448.627 91.662 448.647 91.675 448.668 91.701 cv
448.689 91.728 448.699 91.751 448.699 91.772 cv
448.564 92.282 448.421 92.693 448.27 93.006 cv
448.119 93.319 447.871 93.475 447.527 93.475 cv
447.277 93.475 447.058 93.402 446.871 93.256 cv
446.684 93.11 446.564 92.917 446.512 92.678 cv
446.043 93.209 445.569 93.475 445.09 93.475 cv
cp
445.106 93.178 mo
445.377 93.178 445.634 93.079 445.879 92.881 cv
446.124 92.683 446.335 92.449 446.512 92.178 cv
446.522 92.178 446.527 92.168 446.527 92.147 cv
447.137 89.725 li
447.095 89.464 446.999 89.24 446.848 89.053 cv
446.697 88.866 446.501 88.772 446.262 88.772 cv
446.012 88.772 445.78 88.873 445.567 89.076 cv
445.353 89.279 445.173 89.516 445.027 89.787 cv
444.892 90.09 444.756 90.496 444.621 91.006 cv
444.486 91.517 444.418 91.913 444.418 92.194 cv
444.418 92.444 444.473 92.67 444.582 92.873 cv
444.691 93.076 444.866 93.178 445.106 93.178 cv
f
449.743 95.334 mo
449.743 95.303 449.758 95.272 449.789 95.241 cv
450.05 94.991 450.253 94.699 450.399 94.366 cv
450.545 94.033 450.618 93.678 450.618 93.303 cv
450.618 93.178 li
450.503 93.293 450.357 93.35 450.18 93.35 cv
450.013 93.35 449.87 93.29 449.75 93.17 cv
449.631 93.051 449.571 92.908 449.571 92.741 cv
449.571 92.574 449.631 92.434 449.75 92.319 cv
449.87 92.204 450.013 92.147 450.18 92.147 cv
450.441 92.147 450.626 92.267 450.735 92.506 cv
450.844 92.746 450.899 93.012 450.899 93.303 cv
450.899 93.709 450.818 94.097 450.657 94.467 cv
450.495 94.837 450.268 95.168 449.977 95.459 cv
449.946 95.47 449.92 95.475 449.899 95.475 cv
449.868 95.475 449.834 95.459 449.797 95.428 cv
449.761 95.397 449.743 95.365 449.743 95.334 cv
f
452.425 92.553 mo
452.425 92.418 452.456 92.277 452.519 92.131 cv
453.409 89.756 li
453.503 89.496 453.55 89.277 453.55 89.1 cv
453.55 88.881 453.467 88.772 453.3 88.772 cv
453.019 88.772 452.782 88.923 452.589 89.225 cv
452.396 89.527 452.258 89.86 452.175 90.225 cv
452.154 90.266 452.123 90.287 452.081 90.287 cv
451.956 90.287 li
451.893 90.287 451.862 90.256 451.862 90.194 cv
451.862 90.162 li
451.977 89.725 452.156 89.337 452.401 88.998 cv
452.646 88.66 452.956 88.491 453.331 88.491 cv
453.592 88.491 453.813 88.577 453.995 88.748 cv
454.178 88.92 454.269 89.136 454.269 89.397 cv
454.269 89.532 454.238 89.678 454.175 89.834 cv
453.284 92.194 li
453.18 92.433 453.128 92.652 453.128 92.85 cv
453.128 93.069 453.211 93.178 453.378 93.178 cv
453.67 93.178 453.91 93.027 454.097 92.725 cv
454.284 92.423 454.42 92.095 454.503 91.741 cv
454.514 91.688 454.545 91.662 454.597 91.662 cv
454.722 91.662 li
454.753 91.662 454.777 91.673 454.792 91.694 cv
454.808 91.715 454.816 91.741 454.816 91.772 cv
454.816 91.772 454.816 91.782 454.816 91.803 cv
454.711 92.22 454.534 92.602 454.284 92.951 cv
454.034 93.3 453.727 93.475 453.362 93.475 cv
453.102 93.475 452.881 93.386 452.698 93.209 cv
452.516 93.032 452.425 92.814 452.425 92.553 cv
cp
453.659 86.678 mo
453.659 86.532 453.724 86.397 453.855 86.272 cv
453.985 86.147 454.128 86.084 454.284 86.084 cv
454.409 86.084 454.511 86.121 454.589 86.194 cv
454.667 86.267 454.706 86.366 454.706 86.491 cv
454.706 86.647 454.641 86.787 454.511 86.912 cv
454.381 87.037 454.238 87.1 454.081 87.1 cv
453.966 87.1 453.867 87.061 453.784 86.983 cv
453.701 86.905 453.659 86.803 453.659 86.678 cv
f
461.224 89.1 mo
461.141 89.1 461.073 89.069 461.021 89.006 cv
460.969 88.943 460.943 88.876 460.943 88.803 cv
460.943 88.72 460.969 88.649 461.021 88.592 cv
461.073 88.535 461.141 88.506 461.224 88.506 cv
470.646 88.506 li
470.719 88.506 470.782 88.535 470.834 88.592 cv
470.886 88.649 470.912 88.72 470.912 88.803 cv
470.912 88.876 470.886 88.943 470.834 89.006 cv
470.782 89.069 470.719 89.1 470.646 89.1 cv
461.224 89.1 li
cp
461.224 86.194 mo
461.141 86.194 461.073 86.165 461.021 86.108 cv
460.969 86.051 460.943 85.98 460.943 85.897 cv
460.943 85.824 460.969 85.753 461.021 85.686 cv
461.073 85.618 461.141 85.584 461.224 85.584 cv
470.646 85.584 li
470.719 85.584 470.782 85.618 470.834 85.686 cv
470.886 85.753 470.912 85.824 470.912 85.897 cv
470.912 85.98 470.886 86.051 470.834 86.108 cv
470.782 86.165 470.719 86.194 470.646 86.194 cv
461.224 86.194 li
f
479.683 91.428 mo
478.454 91.428 477.62 90.923 477.183 89.912 cv
476.745 88.902 476.526 87.704 476.526 86.319 cv
476.526 85.444 476.604 84.623 476.761 83.858 cv
476.917 83.092 477.229 82.443 477.698 81.912 cv
478.167 81.381 478.828 81.116 479.683 81.116 cv
480.339 81.116 480.878 81.275 481.3 81.592 cv
481.722 81.91 482.042 82.324 482.261 82.834 cv
482.48 83.345 482.631 83.892 482.714 84.475 cv
482.797 85.058 482.839 85.673 482.839 86.319 cv
482.839 87.173 482.758 87.975 482.597 88.725 cv
482.436 89.475 482.123 90.113 481.659 90.639 cv
481.196 91.165 480.537 91.428 479.683 91.428 cv
cp
479.683 91.037 mo
480.235 91.037 480.649 90.753 480.925 90.186 cv
481.201 89.618 481.37 88.985 481.433 88.287 cv
481.495 87.59 481.526 86.85 481.526 86.069 cv
481.526 85.319 481.495 84.626 481.433 83.991 cv
481.37 83.355 481.204 82.779 480.933 82.264 cv
480.662 81.749 480.245 81.491 479.683 81.491 cv
479.12 81.491 478.701 81.751 478.425 82.272 cv
478.149 82.793 477.98 83.368 477.917 83.998 cv
477.854 84.629 477.823 85.319 477.823 86.069 cv
477.823 86.631 477.836 87.16 477.862 87.655 cv
477.888 88.15 477.961 88.657 478.081 89.178 cv
478.201 89.699 478.391 90.139 478.651 90.498 cv
478.912 90.857 479.256 91.037 479.683 91.037 cv
f
484.698 90.272 mo
484.698 90.043 484.781 89.85 484.948 89.694 cv
485.115 89.537 485.308 89.459 485.527 89.459 cv
485.662 89.459 485.795 89.496 485.925 89.569 cv
486.055 89.642 486.157 89.743 486.23 89.873 cv
486.303 90.004 486.339 90.137 486.339 90.272 cv
486.339 90.491 486.258 90.683 486.097 90.85 cv
485.936 91.017 485.746 91.1 485.527 91.1 cv
485.308 91.1 485.115 91.017 484.948 90.85 cv
484.781 90.683 484.698 90.491 484.698 90.272 cv
f
488.224 88.819 mo
488.224 88.225 488.422 87.696 488.818 87.233 cv
489.214 86.769 489.724 86.381 490.349 86.069 cv
489.787 85.709 li
489.443 85.49 489.164 85.194 488.951 84.819 cv
488.738 84.444 488.631 84.053 488.631 83.647 cv
488.631 83.168 488.756 82.735 489.006 82.35 cv
489.256 81.965 489.592 81.663 490.013 81.444 cv
490.435 81.225 490.88 81.116 491.349 81.116 cv
491.797 81.116 492.227 81.204 492.638 81.381 cv
493.05 81.558 493.389 81.816 493.654 82.155 cv
493.92 82.493 494.053 82.897 494.053 83.366 cv
494.053 83.699 493.975 84.009 493.818 84.295 cv
493.662 84.582 493.446 84.84 493.17 85.069 cv
492.894 85.298 492.6 85.495 492.287 85.662 cv
493.131 86.209 li
493.526 86.47 493.847 86.808 494.092 87.225 cv
494.337 87.642 494.459 88.084 494.459 88.553 cv
494.459 89.095 494.313 89.587 494.021 90.03 cv
493.73 90.473 493.344 90.816 492.865 91.061 cv
492.386 91.306 491.88 91.428 491.349 91.428 cv
490.828 91.428 490.328 91.324 489.849 91.116 cv
489.37 90.907 488.98 90.603 488.678 90.202 cv
488.375 89.801 488.224 89.34 488.224 88.819 cv
cp
489.037 88.819 mo
489.037 89.214 489.146 89.576 489.365 89.905 cv
489.584 90.233 489.873 90.491 490.232 90.678 cv
490.591 90.865 490.964 90.959 491.349 90.959 cv
491.932 90.959 492.461 90.787 492.935 90.444 cv
493.409 90.1 493.646 89.652 493.646 89.1 cv
493.646 88.902 493.607 88.709 493.529 88.522 cv
493.451 88.335 493.344 88.165 493.209 88.014 cv
493.074 87.863 492.923 87.735 492.756 87.631 cv
490.756 86.334 li
490.443 86.501 490.154 86.712 489.888 86.967 cv
489.623 87.222 489.414 87.506 489.263 87.819 cv
489.112 88.131 489.037 88.464 489.037 88.819 cv
cp
490.068 84.241 mo
491.896 85.412 li
492.313 85.173 492.657 84.879 492.928 84.53 cv
493.199 84.181 493.334 83.793 493.334 83.366 cv
493.334 83.022 493.238 82.709 493.045 82.428 cv
492.852 82.147 492.605 81.928 492.303 81.772 cv
492 81.615 491.677 81.537 491.334 81.537 cv
491.032 81.537 490.727 81.597 490.42 81.717 cv
490.113 81.837 489.86 82.012 489.662 82.241 cv
489.464 82.47 489.365 82.74 489.365 83.053 cv
489.365 83.522 489.599 83.918 490.068 84.241 cv
f
399.494 87.5 mo
429.449 87.5 li
1 /0 /CSD get_res sepcs
.477 sep
@
0 lj
499 98.5 mo
395.5 98.5 li
395.5 39.5 li
499 39.5 li
cp
395.5 98.5 mo
cp
1 /0 /CSD get_res sepcs
.851 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/VJOHJT+Helvetica*1 uf/VJOHJT+Helvetica uf/BBAAAA+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
